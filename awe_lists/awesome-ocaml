   #Recent
   Commits to awesome-ocaml:master

   Skip to content
   [https://github.com/]
     * Features
     * Explore
     * Pricing

   This repository
   ____________________
   Sign in or
   Sign up

     * 108
     * 1,265
     * 98

awesome-ocaml

   Code
   Pull requests 1
   Insights
   (BUTTON) Dismiss

Join GitHub today

   GitHub is home to over 20 million developers working together to host
   and review code, manage projects, and build software together.

   Sign up
   A curated collection of awesome OCaml tools, frameworks, libraries and
   articles.
   awesome
   programming-language
     * 3 branches
     * 50
       contributors

   Clone or download

Clone with HTTPS [https://help.github.com/articles/which-remote-url-should-i-use]

   Use Git or checkout with SVN using the web URL.
   https://github.com/r
   Download ZIP

Launching GitHub Desktop...

   If nothing happens, [https://desktop.github.com/]download GitHub
   Desktop and try again.

   (BUTTON) Go back

Launching GitHub Desktop...

   If nothing happens, [https://desktop.github.com/]download GitHub
   Desktop and try again.

   (BUTTON) Go back

Launching Xcode...

   If nothing happens, [https://developer.apple.com/xcode/]download Xcode
   and try again.

   (BUTTON) Go back

Launching Visual Studio...

   If nothing happens, [https://visualstudio.github.com/]download the
   GitHub extension for Visual Studio and try again.

   (BUTTON) Go back
   Find file
   (BUTTON) Branch: master
   Switch branches/tags
   ____________________
     * [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/awesome-ocaml
       ]Branches
     * [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/awesome-ocaml
       ]Tags

   master
   rizo-patch-1
   Nothing to show
   Nothing to show
   (BUTTON) New pull request
   Latest commit
   [file://localhost/rizo/awesome-ocaml/commit/2f087c52c4e46ce383f8e767cdf
   d044f1ed3868d]2f087c5 Feb 6, 2018
   @rizo
   rizo
   [file://localhost/rizo/awesome-ocaml/commit/2f087c52c4e46ce383f8e767cdf
   d044f1ed3868d]Update README.md
   [file://localhost/rizo/awesome-ocaml/tree/2f087c52c4e46ce383f8e767cdfd0
   44f1ed3868d]Permalink
   Failed to load latest commit information.
   books
   [file://localhost/rizo/awesome-ocaml/commit/77c9c11f7d4692cb115a809f827
   f572ae44fb5a9]More books and papers. Jul 24, 2014
   papers
   Update the modular implicits paper to the extended
   version. Sep 30, 2015
   presenta
   tions
   [file://localhost/rizo/awesome-ocaml/commit/a924118c84113f21a7799bafd1a
   8ab9a77a0f452]Moved Extension Points presentation. Jul 24, 2014
   README.md
   Update README.md Feb 6, 2018
   colour
   -logo.png
   Added the logo file. Added Modular Implicits paper. Aug
   6, 2014
   sotu.md
   Merge pull request
   [https://github.com/rizo/awesome-ocaml/pull/132]#132
   [file://localhost/rizo/awesome-ocaml/commit/8b4e3dda16aea6914369233d789
   1877634e3b4c3]from glennsl/patch-1 Feb 6, 2018

README.md

Awesome

   

     Everything you'll ever need on the road to mastering OCaml.

   A curated list of references to awesome OCaml tools, frameworks,
   libraries and articles. Additionally there is a collection of freely
   available
   [https://github.com/rizo/awesome-ocaml/tree/master/books]books,
   [https://github.com/rizo/awesome-ocaml/tree/master/papers]papers and
   [https://github.com/rizo/awesome-ocaml/tree/master/presentations]presen
   tations.

   A community-driven review of the current state of the OCaml ecosystem
   and its suitability for various programming domains and tasks can be
   found in:
     * [https://github.com/rizo/awesome-ocaml/blob/master/sotu.md]State of
       the OCaml Ecosystem - August 2015

   Your favorite package is not listed? Fork and
   [https://github.com/rizo/awesome-ocaml/edit/master/README.md]create a
   Pull Request to add it!

   If you are beginner and want to learn the basics of OCaml programming
   here is the
   [http://blog.nullspace.io/beginners-guide-to-ocaml-beginners-guides.htm
   l]Beginner's guide to OCaml beginner's guides.

Contents

     * Community
     * Algorithms and Data Structures
     * Application Libraries
     * Blogs
     * Books
     * Code Analysis and Linters
     * Compilers and Compiler Tools
     * Concurrency
     * Databases
     * Datetime
     * Developer Tools
     * Exercises
     * Formal Software Verification
     * General
     * Graphics
     * User Interface
     * Language-related
     * Logging
     * Messaging
     * Metaprogramming
     * Mobile Applications
     * Networking
     * Online Courses
     * Package Management
     * Parallelism
     * Questions
     * Regular Expressions
     * Science and Technical Computing
     * Security and Cryptography
     * Semantic Technology
     * Serialization
     * System Programming
     * Testing
     * Web Development
     __________________________________________________________________

Community

     * [http://ocaml.org/]Official OCaml Website
     * [https://discuss.ocaml.org/]OCaml Discourse Web Forum
     * [http://caml.inria.fr/resources/forums.en.html]Official OCaml
       Mailing List
     * [http://ocaml.org/community/planet/]OCaml Planet
     * [http://reddit.com/r/ocaml]OCaml SubReddit

Algorithms and Data Structures

     * [http://philtomson.github.io/blog/2014/05/29/comparing-a-machine-le
       arning-algorithm-implemented-in-f-number-and-ocaml/]Comparing a
       Machine Learning Algorithm Implemented in F# and OCaml
     * [https://github.com/backtracking/ocamlgraph]OCamlgraph - A generic
       graph library for OCaml.
     * [https://github.com/owainlewis/ods]ods - A large collection of data
       structures and algorithms for OCaml.
     * [https://github.com/backtracking/combine]combine - OCaml library
       for combinatorics
       [https://www.lri.fr/%7Efilliatr/combine/]https://www.lri.fr/~fillia
       tr/combine/.
     * [https://github.com/oklm-wsh/Decompress]Decompress - A pure OCaml
       implementation of Zlib

Application Libraries

     * [https://github.com/ocaml-batteries-team/batteries-included]Batteri
       es Included - A community-maintained foundation library for your
       OCaml projects.
     * [https://github.com/dbuenzli/cmdliner]Cmdliner - Declarative
       definition of command line interfaces for OCaml.
     * [https://github.com/janestreet/core]Core - Jane Street Capital's
       full-fledged standard library overlay. A portable subset of Core is
       also available:
       [https://github.com/janestreet/core_kernel]Core_kernel.
     * [https://github.com/janestreet/base]Base - Jane Street Capital's
       dependency-free, quick-compiling, fully-portable across any
       environment that can run OCaml code standard library.
     * [http://erratique.ch/software/react]React - React is an OCaml
       module for functional reactive programming (FRP). It provides
       support to program with time varying values: declarative events and
       signals.
     * [https://github.com/UnixJunkie/minicli]Minicli - Minimalist library
       for command line parsing.
     * [https://github.com/ocamllabs/ocaml-ctypes]ctypes - Library for
       binding to C libraries using pure OCaml.
     * [https://github.com/mjambon/easy-format]easy-format -
       Pretty-printing library for OCaml.
     * [https://github.com/mirage/ocaml-rpc]ocaml-rpc - Light library to
       deal with RPCs in OCaml.
     * [https://github.com/c-cube/ocaml-containers]ocaml-containers - A
       lightweight, modular standard library extension, string library and
       interfaces to various libraries (bigarrays, unix, etc...). BSD
       license.

Blogs

     * [http://gallium.inria.fr/blog/]Gagallium
     * [http://typeocaml.com/]Type OCaml - Many things about OCaml
     * [https://opam.ocaml.org/blog/]OCaml Platform
     * [https://drup.github.io/]Drup's Thingies

Books

     * [http://www.amazon.com/More-OCaml-Algorithms-Methods-Diversions/dp/
       0957671113/]More OCaml: Algorithms, Methods, and Diversions - In
       More OCaml John Whitington takes a meandering tour of functional
       programming with OCaml, introducing various language features and
       describing some classic algorithms. The book ends with a large
       worked example dealing with the production of PDF files. There are
       questions for each chapter together with worked answers and hints.
     * [http://www.greenteapress.com/thinkocaml/index.html]How to Think
       Like a (Functional) Programmer by Allen Downey and Nicholas Monje -
       How to Think Like a Computer Scientist is an introductory
       programming textbook based on the OCaml language. It is a modified
       version of Think Python by Allen Downey. It is intended for
       newcomers to programming and also those who know some programming
       but want to learn programming in the function-oriented paradigm, or
       those who simply want to learn OCaml.
     * [http://ocaml-book.com/]OCaml from the Very Beginning by J.
       Whitington - OCaml from the Very Beginning will appeal both to new
       programmers, and experienced programmers eager to explore
       functional languages such as OCaml.
     * [http://www.amazon.co.uk/Pearls-Functional-Algorithm-Design-Richard
       /dp/0521513383]Pearls of Functional Algorithm Design by Richard
       Bird - It summaries 30 hard algorithm problems in function
       programming world. Although it is for Haskell, the algorithm
       problems are very interesting and trying to solve them in OCaml
       also helps the thinking of functional programming. Partial
       solutions in OCaml are [https://github.com/MassD/pearls]here.
     * [https://realworldocaml.org/]Real World OCaml by Y. Minsky, A.
       Madhavapeddy and J. Hickey - Functional programming for the masses.
     * [http://ocamlunix.forge.ocamlcore.org/]Unix System Programming in
       OCaml by X. Leroy and D. Rémy - Introduction to Unix system
       programming, with an emphasis on communications between processes.
     * [http://caml.inria.fr/pub/docs/u3-ocaml]Using, Understanding, and
       Unraveling OCaml - This book describes both the OCaml language and
       the theoretical grounds behind its powerful type system.
     * [http://www.amazon.co.uk/Purely-Functional-Structures-Chris-Okasaki
       /dp/0521631246/ref=sr_1_1?ie=UTF8&qid=1406279836&sr=8-1&keywords=fu
       nctional+data+structures]Purely Functional Data Structures - This
       is the first or only book focus on various data structures in FP
       world. A must-read one.
     * [http://www.ffconsultancy.com/products/ocaml_for_scientists/]OCaml
       for Scientists - by Jon Harrod.

Code Analysis and Linters

     * [http://mascot.x9c.fr/]Mascot - Mascot is a style-checker for OCaml
       sources
     * [https://github.com/facebook/pfff]pfff - pfff is a set of tools and
       APIs to perform some static analysis, dynamic analysis, code
       visualizations, code navigations, or style-preserving
       source-to-source transformations such as refactorings on source
       code.
     * [https://github.com/facebook/infer]infer - infer is a static
       analyzer for Java, C and Objective-C
     * [https://github.com/facebook/flow]flow - flow is a static type
       checker for JavaScript
     * [https://github.com/cryptosense/ocamllint]Ocamllint - Ocamllint
       detects common errors in OCaml code
     * [https://github.com/npm-ml/BetterErrors]BetterErrors - BetterErrors
       improves error messages of the OCaml compiler (Make OCaml Errors
       Great Again.)
     * [https://github.com/Microsoft/SLAyer]SLAyer - SLAyer is an
       automatic formal verification tool that uses separation logic to
       verify memory safety of C programs.
     * [https://github.com/Antique-team/memcad]MemCAD - MemCAD is an
       abstract interpreter for shape analysis. MemCAD can verify C
       programs manipulating complex data structures.
     * [https://github.com/BinaryAnalysisPlatform/bap]BAP - BAP is a
       reverse engineering and program analysis platform that targets
       binary programs.

Compilers and Compiler Tools

     * Languages and Compilers:
          + [http://www.cduce.org/]cDuce - cDuce is a modern XML-oriented
            functional language with innovative features.
          + [http://compcert.inria.fr/]Compcert C Compiler - It is a C
            Compiler supporting most of the ISO C90 and C99 / ANSI C
            features.
          + [http://www.eff-lang.org/]Eff Programming Language - Eff is a
            functional language with handlers of not only exceptions, but
            also of other computational effects such as state or I/O.
          + [http://hacklang.org/]Hack Programming Language
          + [http://haxe.org/]Haxe Programming Language
          + [http://nekovm.org/]Neko Programming Language - Originally the
            compiler was written in OCaml.
          + [http://protz.github.io/mezzo/]Mezzo Programming Language -
            Mezzo is a programming language in the ML tradition, which
            places strong emphasis on the control of aliasing and access
            to mutable memory.
          + [http://www.ocamljava.org/]OCaml-Java - OCaml to Java bytecode
            compiler.
          + [http://opalang.org/]Opa Programming Language
          + [https://github.com/artagnon/rhine-ml]Rhine - A Lisp on LLVM
            written in OCaml.
          + [http://rust-lang.org/]Rust Programming Language - Originally
            written in OCaml before bootstrapping.
          + [http://www.cminusminus.org/]Quick C-- Target Language - It is
            now a dead project. [https://github.com/nrnrnr/qc--]Github
            Repo. [http://www.cs.tufts.edu/%7Enr/c--/qc--.html]Alternative
            website.
          + [https://github.com/TrustInSoft/tis-interpreter]tis-interprete
            r - An interpreter for finding subtle bugs in programs written
            in standard C
          + [http://facebook.github.io/reason/]Reason - Friendly syntax &
            toolchain for OCaml by Facebook.
          + [http://caml.inria.fr/cgi-bin/hump.en.cgi?sort=0&browse=88]Oth
            ers - Some other compilers implemented in OCaml, quite a few
            dead now.
     * Parser and Lexer Generators:
          + [https://github.com/pyrocat101/opal]Opal - Self-contained
            monadic parser combinators for OCaml.
          + [https://github.com/alainfrisch/sedlex]Sedlex is a modern,
            encoding-agnostic (read: Unicode-supporting) lexer generator
            (the ppx-based successor to
            [http://www.cduce.org/download.html#side]ulex.)
          + [http://gallium.inria.fr/%7Efpottier/menhir]Menhir - Menhir is
            a LR(1) parser generator for OCaml.
               o See
                 [https://github.com/smolkaj/ocaml-parsing]ocaml-parsing
                 for a clearer example of using Menhir and Sedlex to
                 produce a useful parser,
               o ... and [https://github.com/Lelio-Brun/Obelisk]Obelisk, a
                 neat project to produce readable LaTeX, HTML, or
                 plain-text EBNF-style documentation for your grammar.
          + [http://caml.inria.fr/pub/docs/manual-ocaml-4.01/lexyacc.html]
            ocamllex/ocamlyacc - lex and yacc implementation for OCaml.
          + [https://github.com/inhabitedtype/angstrom]Angstrom - Parser
            combinators built for speed and memory efficiency
     * Articles:
          + [http://llvm.org/docs/tutorial/OCamlLangImpl1.html]Kaleidoscop
            e: Implementing a Language with LLVM in Objective Caml¶
          + [http://nopaniers.calepin.co/getting-started-with-ocaml-bindin
            gs-for-llvm.html]Getting started with OCaml bindings for LLVM

Concurrency

   Two concurrency libraries exist in OCaml: Lwt and Async. They provide
   very similar functionality but make radically different decisions with
   regards to error handling and internal implementation details (see the
   links below for more details). [https://realworldocaml.org/]Real World
   OCaml uses Async but a version of the
   [https://github.com/dkim/rwo-lwt]code examples translated to Lwt is
   also available.
     * Libraries:
          + [http://ocsigen.org/lwt/]Lwt -- A cooperative threads library
            for OCaml.
          + [http://janestreet.github.io/]Async -- A monadic concurrence
            library to go with the Core library.
     * Articles:
          + [https://blog.janestreet.com/announcing-async/]The blog post
            that introduced Async
          + [http://rgrinberg.com/posts/abandoning-async/]A user gives up
            on Async
          + [http://philtomson.github.io/blog/2014/07/09/core-dot-async-ex
            ample/]Cooperative Concurrency in OCaml: A Core.Std.Async
            Example.

Databases

     * Bindings
          + [https://forge.ocamlcore.org/projects/camldbm/]Dbm -- A
            binding to the NDBM/GDBM Unix "databases".
          + [https://massd.github.io/mongo/]Mongo.ml - An OCaml driver for
            Mongodb
          + [http://pgocaml.forge.ocamlcore.org/]PG'OCaml -- A type-safe
            interface to PostgreSQL in pure OCaml.
               o [https://github.com/tizoc/ppx_pgsql]ppx_pgsql - A syntax
                 extension for embedded SQL queries using PG'OCaml.
          + [https://mmottl.github.io/postgresql-ocaml/]PostgreSQL-OCaml
            -- An interface to PostgreSQL through the C API (libpq).
          + [https://github.com/mmottl/sqlite3-ocaml/]SQLite3 -- OCaml
            bindings to the SQLite3 database.
          + [https://mlin.github.io/ocaml-sqlite3EZ/]Sqlite3EZ -- Thin
            wrapper for SQLite3 with a simplified interface.
          + [https://github.com/0xffea/ocaml-redis]ocaml-redis - Redis
            bindings for OCaml.
          + [http://ocaml-mysql.forge.ocamlcore.org/]mysql - Bindings to
            libmysqlclient for interacting with MySQL databases.
          + [https://github.com/slegrand45/mysql_protocol]mysql_protocol -
            Implementation of MySQL Protocol with the Bitstring library.
     * New Implementations
          + [https://github.com/mirage/irmin]Irmin -- A distributed
            database that follows the same design principles as Git.
          + [http://obigstore.forge.ocamlcore.org/]Obigstore -- A database
            with BigTable-like data model atop LevelDB.
          + [https://github.com/RunOrg/RunOrg]RunOrg - It is a WIP
            database server written in OCaml.
     * Overlays
          + [https://github.com/ocsigen/macaque]Macaque -- Macaque is a
            library for safe and flexible database queries using
            comprehensions on top of PG'OCaml.
          + [https://github.com/mirage/orm/]ORM -- ORM for SQLite.
     * Articles:
          + [http://andreas.github.io/2014/08/22/implementing-the-binary-m
            emcached-protocol-with-ocaml-and-bitstring/]Implementing the
            Binary Memcached Protocol with Ocaml and Bitstring

Datetime

     * [https://github.com/sagotch/ISO8601.ml/]ISO8601
     * [http://calendar.forge.ocamlcore.org/]calendar
     * [https://github.com/hhugo/odate]odate
     * [http://erratique.ch/software/ptime]ptime

Developer Tools

     * [http://try.ocamlpro.com/]Try OCaml - Try OCaml in your web
       browser.
     * [https://www.tutorialspoint.com/compile_ocaml_online.php]codinggrou
       nd - Compile and execute OCaml code online.
     * [https://github.com/andrewray/iocaml]iocaml - An OCaml kernel for
       the IPython notebook.
     * [https://github.com/diml/utop]utop - Universal toplevel for OCaml
       with support of multiline edition, history, real-time and context
       sensitive completion, colors, and more.
     * [http://caml.inria.fr/pub/docs/manual-ocaml/browser.html]ocamlbrows
       er - A source and compiled interface browser, written using LablTk.
       Included in the standard distribution for ocaml <= 4.01 and with
       labltk for ocaml >= 4.02.
     * [https://github.com/samoht/ghim]ghim - A command-line tool to
       manage Github Issues.
     * [https://github.com/mabrasil/generator-ocaml]OCaml Yeoman Generator
       - Yeoman generator to scaffold OCaml modules.
     * Foreign Function Interface:
          + [https://github.com/johnwhitington/ocaml-main-program-in-c]oca
            ml-main-program-in-c - Example build system for making mixed
            C/Ocaml binaries where the main program is in C.
          + [http://openmirage.org/blog/modular-foreign-function-bindings]
            Modular foreign function bindings
     * Editor Integration:
          + [https://github.com/ocaml/merlin]merlin - Context sensitive
            completion for Ocaml in Vim and Emacs.
          + [https://github.com/ocaml/tuareg]tuareg - OCaml mode for Emacs
            that can run the toplevel and the debugger within Emacs.
          + [https://github.com/hackwaly/vscode-ocaml/]vscode-ocaml -
            extension that provides OCaml language support for
            [https://github.com/microsoft/vscode]VSCode
          + [https://github.com/whitequark/sublime-better-ocaml]Sublime
            better ocaml - Better OCaml mode for Sublime Text.
               o [https://github.com/def-lkb/sublime-text-merlin]Sublime
                 text package
          + [http://www.typerex.org/ocp-index.html]ocp-index - Easy access
            to the interface information of installed OCaml libraries.
            Provides standalone tools like ocp-browser and ocp-grep.
               o [http://www.typerex.org/ocp-index.html#ocp-browser]ocp-br
                 owser - Small ncurses-based API and documentation
                 browser.
               o [https://github.com/reynir/ocp-index-top]ocp-index-top -
                 Toplevel directive for looking up documentation using
                 ocp-index.
               o [https://sublime.wbond.net/packages/OCaml%20Autocompletio
                 n]Sublime text package
          + [http://www.typerex.org/ocp-indent.html]ocp-indent -
            Indentation tool for OCaml, to be used from editors like Emacs
            and Vim.
               o [https://github.com/def-lkb/ocp-indent-vim]Vim plugin.
     * Code coverage:
          + [http://bisect.x9c.fr/]Bisect
          + [https://github.com/rleonid/bisect_ppx]Bisect_ppx a more
            recent fork of the previous tool.

Exercises

     * [http://ocaml.org/learn/tutorials/99problems.html]99 problems. 99%
       solutions are [https://github.com/MassD/99]here.
     * [http://rosettacode.org/wiki/Category:OCaml]Rosetta Code
     * [http://exercism.io/languages/ocaml]OCaml at Exercism - Exercism is
       your place to engage in thoughtful conversations about code.
       Explore simplicity, idiomatic language features, and expressive
       readable code. [https://github.com/exercism/xocaml]Solutions.

Formal Software Verification

     * [http://coq.inria.fr/]Coq - Coq is a formal proof management
       system. It provides a formal language to write mathematical
       definitions, executable algorithms and theorems together with an
       environment for semi-interactive development of machine-checked
       proofs.
     * [http://why3.lri.fr/]Why3 - Why3 is a platform for deductive
       program verification. It provides a rich language for specification
       and programming, called WhyML, and relies on external theorem
       provers, both automated and interactive, to discharge verification
       conditions.
     * [http://alt-ergo.lri.fr/]Alt-Ergo - Alt-Ergo is an open-source SMT
       solver dedicated to the proof of mathematical formulas generated in
       the context of program verification.

General

     * [https://haifengl.wordpress.com/2014/06/17/ocaml-introduction/]Func
       tional Programming with OCaml
     * [http://roscidus.com/blog/blog/2014/06/06/python-to-ocaml-retrospec
       tive/]Python to OCaml: retrospective
     * [http://queue.acm.org/detail.cfm?id=2038036]OCaml for the Masses
     * [http://tech.esper.com/2014/07/15/why-we-use-ocaml/]Why We Use
       OCaml
     * [http://web.archive.org/web/20140713005224/http://www.mimisbrunnr.n
       et/%7Emunin/blog/why-ocaml.html]Why OCaml?
     * [http://wiki.xen.org/wiki/OCaml_Coding_Considerations]Xen - OCaml
       Coding Considerations
     * [http://lambda-diode.com/programming/monads-are-a-class-of-hard-dru
       gs]Monads are a class of hard drugs
     * [http://blog.nullspace.io/beginners-guide-to-ocaml-beginners-guides
       .html]Beginner's guide to OCaml
     * [http://spyder.wordpress.com/2014/03/16/why-ocaml-why-now/]Why
       OCaml, why now?
     * [http://cranialburnout.blogspot.ca/]A blog about game development
       in OCaml
     * [http://ocamltutorials.blogspot.se/2013/06/alternatives-to-subtypin
       g.html](Functional) Alternatives to inheritance
     * [https://github.com/johnwhitington/camlpdf]camlPDF - OCaml library
       for reading, writing and modifying PDF files.
     * [http://pelzlpj.github.io/capnp-ocaml/2014/09/02/capnp-ocaml-2.0/]c
       apnp-ocaml 2.0: The Road to Unembarrassing Performance
     * [https://github.com/Leonidas-from-XIV/slacko]slacko - A neat
       interface for Slack in OCaml.
     * [https://learnxinyminutes.com/docs/ocaml/]Learn X in Y minutes -
       Where X=OCaml.

Graphics

     * 2D
          + [http://archimedes.forge.ocamlcore.org/]archimedes -- 2D
            plotting library.
          + [https://github.com/Chris00/ocaml-cairo]cairo2 -- Binding to
            Cairo, a 2D Vector Graphics Library. Integrates well with
            lablgtk.
          + [https://github.com/dbuenzli/vg]Vg - Declarative 2D vector
            graphics for OCaml.
     * 3D
          + [http://www.linux-nantes.org/%7Efmonnier/OCaml/GL/]glMLite --
            OpenGL bindings for OCaml. Provides an (experimental)
            functional API.
          + [https://forge.ocamlcore.org/projects/lablgl/]lablgl --
            Interface to OpenGL. Integrates well with lablgtk.
          + [http://erratique.ch/software/tgls]tgls -- Thin bindings
            OpenGL 3.{2,3},4.{0,1,2,3,4} and OpenGL ES {2,3}.

User Interface

     * [http://lablgtk.forge.ocamlcore.org/]lablgtk -- GTK2 bindings for
       OCaml with various higher-level facilities to define GUIs.
     * [https://github.com/Kakadu/lablqml]lablqml - QML Qt5 bindings for
       OCaml.
     * [https://forge.ocamlcore.org/projects/labltk/]labltk -- Interface
       to the Tcl/Tk GUI framework. In the standard distribution for ocaml
       <= 4.01.
     * [http://erratique.ch/software/tsdl]TSDL - Tsdl is an OCaml module
       providing thin bindings to the cross-platform SDL library.
     * [https://github.com/diml/lambda-term]Lambda-Term - Lambda-Term is a
       cross-platform library for manipulating the terminal. It provides
       an abstraction for keys, mouse events, colors, as well as a set of
       widgets to write curses-like applications.
     * [https://github.com/pqwy/notty]Notty - Notty is a declarative
       terminal library for OCaml, structured around a notion of
       composable images.

Language-related

     * [http://devmusings.legiasoft.com/blog/2008/05/23/higher-rank_polymo
       rphism_in_ocaml]Higher-Rank Polymorphism in OCaml
     * [https://github.com/mjambon/mikmatch]mikmatch - OCaml
       pattern-matching extended with regexps
     * [http://www.lexifi.com/blog/inlined-records-constructors]Inlined
       records in constructors
     * [http://tech.esper.com/2014/07/30/algebraic-data-types/]Algebraic
       Data Types
     * [http://wiki.xen.org/wiki/OCaml_Best_Practices_for_Developers]XEN -
       OCaml Best Practices for Developers
     * [https://github.com/pyrocat101/ocaml-style-guide]OCaml Style Guide
       - See also:
       [https://www.seas.upenn.edu/%7Ecis500/cis500-f06/resources/programm
       ing_style.html][1],
       [http://www.cs.cornell.edu/Courses/cs312/2001sp/style.html][2],
       [https://www.seas.upenn.edu/%7Ecis120/current/programming_style.sht
       ml][3].
     * [https://bitbucket.org/camlspotter/compiler-libs-hack]A safe but
       strange way of modifying OCaml compiler
     * [http://technotroph.wordpress.com/2013/10/25/fiddling-with-the-ocam
       l-type-system/]Fiddling with the OCaml Type System

Logging

     * [https://github.com/UnixJunkie/dolog]dolog - A dumb OCaml logger.
     * [https://github.com/codinuum/volt]Volt - A variant of Bolt OCaml
       logging tool.
     * [http://erratique.ch/software/logs]Logs - Logs provides a logging
       infrastructure for OCaml.

Messaging

     * ZeroMQ:
          + [https://github.com/issuu/ocaml-zmq]ocaml-zmq - ZeroMQ
            bindings for OCaml.
          + [https://github.com/rgrinberg/async-zmq]async-zmq - Async
            wrapper around ocaml-zmq.
          + [https://github.com/hcarty/lwt-zmq]lwt-zmq - Lwt-friendly
            interface to ZeroMQ for OCaml.
     * [https://github.com/rgrinberg/onanomsg]onanomsg - nanomsg bindings
       for OCaml.
     * [https://github.com/didier-wenzek/ocaml-kafka]Kafka - OCaml
       bindings for Apache Kafka.
     * [https://github.com/andersfugmann/amqp-client]AMQP - AMQP client
       library for Async and Lwt.
     * [https://github.com/xavierleroy/ocamlmpi]MPI - Message Passing
       Interface bindings for OCaml.
     * [https://github.com/j0sh/ocaml-mqtt]MQTT - OCaml implementation of
       the MQTT pubsub protocol.

Metaprogramming

     * Articles:
          + [http://whitequark.org/blog/2014/04/16/a-guide-to-extension-po
            ints-in-ocaml/]A Guide to Extension Points in OCaml
          + [https://blogs.janestreet.com/extension-points-or-how-ocaml-is
            -becoming-more-like-lisp]Extension Points, or how OCaml is
            becoming more like Lisp
          + [http://www.lexifi.com/blog/syntax-extensions-without-camlp4-l
            ets-do-it]Syntax extensions without Camlp4: let's do it!
          + [http://ambassadortothecomputers.blogspot.pt/p/reading-camlp4.
            html]Reading Camlp4 - Ambassador to the Computers
     * Syntax Extensions:
          + [https://github.com/whitequark/ppx_import]ppx_import - Import
            is a syntax extension that allows to pull in types or
            signatures from other compiled interface files.
          + [https://github.com/sheijk/ppx_string_interpolate]ppx_string_i
            nterpolate - A simple ppx filter to support string
            interpolation like [%str "value of foo is $(foo)"].
          + [https://github.com/rizo/ppx_monad]ppx_monad - Monad syntax
            extension for OCaml.
          + [https://github.com/whitequark/ppx_deriving_yojson]ppx_derivin
            g_yojson - A Yojson codec generator for OCaml.
     * Tools and Language Extensions:
          + [http://okmij.org/ftp/ML/MetaOCaml.html]MetaOCaml - an OCaml
            dialect for multi-stage programming.
          + [http://thinkinginmeta.com/Fan]Fan - Fan is a compile-time
            metaprogramming system for OCaml, originally inspired from
            Camlp4. It's a combination of OCaml and Lispy Macros. It
            shares the same concrete syntax with OCaml.
          + [http://camlp5.gforge.inria.fr/]camlp5 - Camlp5 is a
            preprocessor-pretty-printer of OCaml.
          + [http://caml.inria.fr/pub/docs/manual-camlp4/manual002.html]ca
            mlp4 - Camlp4 is part of the standard OCaml distribution and
            is different from Camlp5.

Mobile Applications

     * Articles:
          + [http://psellos.com/2014/08/2014.08.ocamlxarm-402.html]OCaml
            on iOS 7 Released
          + [https://blog.danny-willems.be/en/ocaml-cordova-secured-typed-
            hybrid-mobile-applications/]OCaml + Cordova = more secured,
            typed and hybrid mobile applications
     * Bindings:
          + [https://github.com/dannywillems/ocaml-cordova-plugin-list]Cor
            dova plugins - List of bindings to Cordova plugins. Get access
            to native device components like accelerometer, SMS,
            geolocation, etc in OCaml.

Networking

     * HTTP Tools:
          + [https://github.com/mirage/ocaml-cohttp]ocaml-cohttp - Very
            lightweight HTTP server using Lwt or Async.
          + [https://github.com/ygrek/ocurl]ocurl - OCaml bindings to
            libcurl.
          + [https://github.com/inhabitedtype/httpaf]httpaf - A high
            performance, memory efficient, and scalable web server written
            in OCaml.
     * [https://github.com/mirage/ocaml-dns]ocaml-dns - A pure OCaml
       implementation of the DNS protocol.
     * [https://github.com/fluent/fluent-logger-ocaml]fluent-logger -
       Fluentd logger for OCaml.
     * [https://github.com/haesbaert/charrua-unix]charrua-unix -
       charrua-unix is a Unix DHCP daemon based on
       [https://github.com/haesbaert/charrua-core]charrua-core.

Online Courses

     * [https://www.fun-mooc.fr/courses/parisdiderot/56002S02/session02/ab
       out]Introduction to Functional Programming in OCaml.
     * [http://www.cs.cornell.edu/Courses/cs3110/2014fa/course_info.php]Co
       rnell University - Data Structures and Functional Programming.
     * [http://www.cs.princeton.edu/%7Edpw/courses/cos326-12/]Princeton
       University - Functional programming in OCaml.
     * [https://courses.engr.illinois.edu/cs421/fa2014/]University of
       Illinois - Course that uses OCaml to teach functional programming
       and programming language design

Package Management

     * Distribution:
          + [http://opam.ocamlpro.com/]OPAM - A flexible Git-friendly
            package manager with multiple compiler support.
          + [http://projects.camlcity.org/projects/findlib.html]ocamlfind
            -- Local OCaml library manager. Used by most of the OCaml
            ecosystem.
          + [https://fdopen.github.io/opam-repository-mingw]OCaml for
            Windows - opam repository and experimental build for Windows.
          + [https://github.com/sagotch/makorel]makorel - Release OPAM
            packages easily.
     * Build Tools:
          + [http://oasis.forge.ocamlcore.org/]Oasis - A tool to integrate
            a configure, build and install system in your OCaml project.
            It helps to create standard entry points in your build system
            and allows external tools to analyse your project easily.
               o [https://github.com/ocaml/oasis2opam]oasis2opam -- Tool
                 to convert OASIS metadata to OPAM package descriptions.
          + [https://github.com/ocaml-obuild/obuild]obuild - Simple
            package build system for ocaml.
          + [https://github.com/ocaml/dune]dune - A composable and
            opinionated build system for OCaml (former jbuilder)
          + [https://github.com/janestreet/jenga]jenga - Monadic build
            system from Jane Street.
          + [http://ocaml.org/learn/tutorials/ocamlbuild/]ocamlbuild --
            Build system provided with the compiler.
          + [https://github.com/mmottl/ocaml-makefile]ocaml-makefile --
            Easy to use Makefile for small to medium-sized OCaml-projects.
          + [https://github.com/dbuenzli/topkg]topkg -- OPAM-aware
            packaging system using ocamlbuild.
          + [https://github.com/aantron/namespaces]Namespaces - ocamlbuild
            plugin that converts your directory tree into nested modules.
          + [https://github.com/jin/rules_ocaml]Bazel - OCaml rules for
            [https://bazel.build/]Bazel, Google's multi-language and
            platform build tool.

Parallelism

   (Note: Sorted from the easier to use to the more flexible.)
     * Libraries:
          + [http://rdicosmo.github.io/parmap/]Parmap -- Provides
            easy-to-use parallel map and fold functions.
          + [https://github.com/mlin/forkwork]ForkWork -- A simple library
            for forking child processes to perform work on multiple cores.
          + [http://functory.lri.fr/About.html]Functory -- A distributed
            computing library which facilitates distributed execution of
            parallelizable computations in a seamless fashion.
          + [https://github.com/janestreet/rpc_parallel]Rpc.Parallel -- A
            library for spawning processes on a cluster of machines, and
            passing typed messages between them.
          + [http://projects.camlcity.org/projects/ocamlnet.html]Ocamlnet
            -- An enhanced system platform library. Contains the
            netmulticore library to compute tasks on as many cores of the
            machine as needed.
          + [https://github.com/MyLifeLabs/nproc]Nproc - Process pool
            implementation for OCaml.
          + [https://github.com/UnixJunkie/parany]Parany - Parallelize
            computation over independent items, even if there is an
            infinite number of them.
          + [http://sklml.inria.fr/]Sklml - Functional parallel skeleton
            compiler and programming system for OCaml programs.
     * Articles:
          + [http://stackoverflow.com/questions/6588500/what-is-the-state-
            of-ocamls-parallelization-abilities]What is the state of
            OCaml's parallelization abilities?

Questions

     * [http://stackoverflow.com/questions/14440531/ocaml-polymorphism-exa
       mple-other-than-template-function]OCaml polymorphism example other
       than template function?
     * [http://stackoverflow.com/questions/7442449/ocaml-polymorphic-print
       -and-type-losing]OCaml - polymorphic print and type losing

Science and Technical Computing

     * [https://github.com/biocaml/biocaml]biocaml - OCaml Bioinformatics
       Library [http://biocaml.org/]http://biocaml.org.
     * [https://github.com/pveber/guizmin]guizmin - OCaml library for
       building bioinformatics pipelines.
     * [https://mmottl.github.io/lacaml/]lacaml - OCaml bindings for
       BLAS/LAPACK (high-performance linear algebra Fortran libraries).
     * [http://freux.fr/oss/obandit.html]obandit - OCaml library for
       multi-armed bandits.
     * [https://github.com/cheshire/onumerical]onumerical - Numerical
       library for OCaml.
     * [https://github.com/hammerlab/oml]oml - OCaml library for general
       numerical work.
     * [https://github.com/rleonid/ocephes]ocephes - Bindings to
       frequently used C special funcitons library.
     * [https://github.com/akabe/slap]slap - A linear algebra library in
       OCaml with type-based static size checking for matrix operations.
     * [https://github.com/LaurentMazare/tensorflow-ocaml]tensorflow-ocaml
       - OCaml bindings for TensorFlow.
     * [https://github.com/ryanrhymes/owl]owl - OCaml numerical library:
       dense and sparse matrix, linear algebra, regressions, maths and
       stats functions.

Regular Expressions

     * [https://github.com/ocaml/ocaml-re]Re - a pure OCaml regular
       expressions library with combinators, supporting several formats
       (glob, posix, str...)
     * [https://github.com/mmottl/pcre-ocaml]ocaml-pcre - bindings to the
       PCRE library (perl-compatible regular expressions)
     * [https://github.com/rgrinberg/humane-re]Humane-re - Humane-re
       attempts to provide an easy interface for 90% of your regex needs
       Courtesy of ocaml-re
     * [https://github.com/Drup/tyre]Tyre - Tyre is a set of combinators
       to build type-safe regular expressions, allowing automatic
       extraction and modification of matched groups.

Security and Cryptography

     * [https://github.com/mirleft/ocaml-tls]ocaml-tls - TLS in pure
       OCaml.
     * [https://github.com/mirage/digestif]Digestif - Hash algorithms
       (like SHA* or BLAKE2*) in OCaml and C.
     * [https://github.com/xavierleroy/cryptokit]cryptokit - The Cryptokit
       library for OCaml provides a variety of cryptographic primitives
       that can be used to implement cryptographic protocols in
       security-sensitive applications.
     * [https://github.com/mirleft/ocaml-nocrypto]nocrypto - A small
       cryptographic library behind the ocaml-tls project. It is built to
       be straightforward to use, adhere to functional programming
       principles and able to run in a Xen-based unikernel.

     Note: The differences between nocrypto and cryptokit cryptographic
     libraries are described in the following blog post:
     [https://mirage.io/blog/introducing-nocrypto]OCaml-TLS: building the
     nocrypto library core.

Semantic Technology

     * [http://zoggy.github.io/ocaml-rdf/]OCaml-RDF - OCaml library to
       manipulate RDF graphs and execute Sparql queries.

Serialization

     * [https://github.com/rgrinberg/bencode]bencode -- Bencode (.torrent
       file format) reader/writer.
     * [https://github.com/mjambon/biniou]biniou - Extensible binary data
       format, like JSON but faster.
     * [http://erratique.ch/software/jsonm]jsonm -- Non-blocking streaming
       JSON codec for OCaml.
     * [http://erratique.ch/software/xmlm]xmlm -- A streaming codec to
       decode and encode the XML data format.
     * [https://github.com/mjambon/yojson]yojson -- An optimized parsing
       and printing library for the JSON format.
     * [https://github.com/janestreet/sexplib]sexplib - A S-expression
       parser and printer

System Programming

     * [https://github.com/mirage/mirage]Mirage OS - Mirage is a
       programming framework for constructing secure, high-performance
       network applications across a variety of cloud computing and mobile
       platforms.
     * [https://github.com/mirage/ocaml-fat]ocaml-fat - Read and write FAT
       format filesystems from OCaml.
     * [https://github.com/mirage/ocaml-git]ocaml-git - Pure OCaml
       low-level git bindings.
     * [https://github.com/mirage/ocaml-vchan]ocaml-vchan - Pure OCaml
       implementation of the "vchan" shared-memory communication protocol.

Testing

     * [https://github.com/samoht/alcotest]Alcotest - A lightweight and
       colourful test framework.
     * [http://ounit.forge.ocamlcore.org/]OUnit - OUnit is a unit test
       framework for OCaml. It allows one to easily create unit-tests for
       OCaml code. It is based on HUnit, a unit testing framework for
       Haskell.
     * [https://github.com/c-cube/qcheck]QCheck -- QCheck is a property
       testing library inspired from Haskell's QuickCheck
     * [https://github.com/vincent-hugot/iTeML]iTeML (formerly known as
       [http://batteries.vhugot.com/qtest/]qtest) -- supports inline
       pragma's to generate tests.
     * [http://kaputt.x9c.fr/]Kaputt -- comprehensive testing framework.
     * [https://ocaml.janestreet.com/ocaml-core/111.28.00/doc/pa_test]Pa_t
       est -- General inline testing macro's.
     * [https://github.com/hcarty/ocaml-testsimple]TestSimple - A
       lightweight unit testing framework compatible with the
       [https://testanything.org/]Test Anything Protocol.

Web Development

     * Frameworks:
          + [https://github.com/rgrinberg/opium]Opium - Sinatra like web
            toolkit for OCaml.
          + [http://ocsigen.org/eliom/]Ocsigen Eliom - Eliom is a
            full-featured multi-tier framework, for developing
            multi-platform Web and mobile apps as 100% OCaml distributed
            applications. It can also be used for more traditional Web or
            mobile apps: Web sites, single page applications, REST API,
            etc.
          + [http://ohm-framework.com/]Ohm - Ohm was an open source web
            framework for the OCaml language which is now dead.
          + [https://github.com/inhabitedtype/ocaml-webmachine]webmachine
            - A REST toolkit for OCaml. OCaml webmachine is a layer on top
            of cohttp that implements a state-machine-based HTTP request
            processor. It's particularly well-suited for writing RESTful
            APIs. As the name suggests, this is an OCaml port of the
            webmachine project.
     * Tools:
          + [https://github.com/mirage/ocaml-cow]COW - Caml on the Web
            (COW) is a set of parsers and syntax extensions to let you
            manipulate HTML, CSS, XML, JSON and Markdown directly from
            OCaml code.
          + [http://projects.camlcity.org/projects/ocamlnet.html]Ocamlnet
            has many relevant web libraries --
            [http://projects.camlcity.org/projects/dl/ocamlnet-4.0.4/doc/h
            tml-main/Nethtml.html]Nethtml html parser,
            [http://projects.camlcity.org/projects/dl/ocamlnet-4.0.4/doc/h
            tml-main/Netasn1.html]Netasn1 for ASN.1 parsing,
            [http://projects.camlcity.org/projects/dl/ocamlnet-4.0.4/doc/h
            tml-main/Netencoding.html]Netencoding for Base64, Quoted
            Printable, URL encoding and HTML escaping,
            [http://projects.camlcity.org/projects/dl/ocamlnet-4.0.4/doc/h
            tml-main/Netmime.html]Netmime for MIME processing, etc. See
            the
            [http://projects.camlcity.org/projects/dl/ocamlnet-4.0.4/doc/h
            tml-main/index.html]list of modules in Ocamlnet's manual.
          + [http://ocsigen.org/tyxml]tyxml -- Library to build valid
            (according to the W3C spec) Html and Svg trees.
          + [http://ocsigen.org/js_of_ocaml]js_of_ocaml - Js_of_ocaml is a
            compiler of OCaml bytecode to Javascript. It makes it possible
            to run Ocaml programs in a Web browser.
               o [https://github.com/AngryLawyer/commonjs_of_ocaml]commonj
                 s_of_ocaml - Easily import and export CommonJS modules
                 from a js_of_ocaml project.
          + [https://github.com/bloomberg/bucklescript]BuckleScript -
            BuckleScript is backend for OCaml to generate debuggable
            Javascript. It enables OCaml to integrate Javascript platform
            in a seamless way.
          + [https://github.com/mirage/ocaml-uri]ocaml-uri - RFC3986 URI
            parsing library.
          + [https://github.com/klakplok/goji]Goji - An OCaml bindings
            generator for JavaScript libraries.
          + [https://github.com/Cumulus/Syndic]Syndic - RSS and Atom feed
            parsing
          + [https://github.com/rgrinberg/ocaml-mustache]ocaml-mustache -
            mustache.js logic-less templates in OCaml.
          + [https://github.com/barko/atdjs]atdjs - atd code generator for
            OCaml/js_of_ocaml.
          + [https://github.com/tategakibunko/jingoo]jingoo - OCaml
            template engine almost compatible with jinja2.
          + [https://github.com/inhabitedtype/ocaml-dispatch]dispatch -
            Path-based dispatching for client- and server-side
            applications.
          + [https://github.com/aantron/lambda-soup]Lambda Soup -
            Functional HTML scraping and manipulation with CSS selectors,
            à la Python's Beautiful Soup.
          + [https://github.com/aantron/markup.ml]Markup.ml -
            Error-recovering streaming HTML5 and XML parsers, serializers.
          + [https://github.com/LexiFi/gen_js_api]gen_js_api - gen_js_api
            aims at simplifying the creation of OCaml bindings for
            Javascript libraries.
     * Open Source Projects:
          + [https://github.com/Cumulus/Cumulus]Cumulus - Hacker news like
            website with the OCaml framework Ocsigen
     __________________________________________________________________

   Inspired by awesome projects line. Discover
   [https://github.com/bayandin/awesome-awesomeness]more awesomeness ¨.

     * © 2018 GitHub, Inc.
     * [https://github.com/site/terms]Terms
     * [https://github.com/site/privacy]Privacy
     * [https://help.github.com/articles/github-security/]Security
     * [https://status.github.com/]Status
     * [https://help.github.com/]Help

   [https://github.com/]
     * [https://github.com/contact]Contact GitHub
     * [https://developer.github.com/]API
     * [https://training.github.com/]Training
     * [https://shop.github.com/]Shop
     * [https://blog.github.com/]Blog
     * [https://github.com/about]About

   (BUTTON) You can't perform that action at this time.

   You signed in with another tab or window.
   Rel
   oad to refresh your session. You signed out in another tab or window.
   Rel
   oad to refresh your session.

   (BUTTON)

   Press h to open a hovercard with more details.
