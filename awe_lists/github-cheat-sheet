   #Re
   cent Commits to github-cheat-sheet:master

   Skip to content
   [https://github.com/]
     * Features
     * Explore
     * Pricing

   This repository
   ____________________
   Sig
   n in or Sign up

     * Watch
       1,295
     * [file://localhost/login?return_to=%2Ftiimgreen%2Fgithub-cheat-sheet
       ]Star
       24,825
     * 3,783

github-cheat-sheet

   Code
   Pull requests 8
   Insights
   (BUTTON) Dismiss

Join GitHub today

   GitHub is home to over 20 million developers working together to host
   and review code, manage projects, and build software together.

   Sign up
   A list of cool features of Git and GitHub.
   [http://git.io/sheet]http://git.io/sheet
   awesome-list
   474
       commits
     * 1 branch
     * 
       74 contributors
     * 
       MIT

   Clone or download

Clone with HTTPS [https://help.github.com/articles/which-remote-url-should-i-use]

   Use Git or checkout with SVN using the web URL.
   https://github.com/t
   Downl
   oad ZIP

Launching GitHub Desktop...

   If nothing happens, [https://desktop.github.com/]download GitHub
   Desktop and try again.

   (BUTTON) Go back

Launching GitHub Desktop...

   If nothing happens, [https://desktop.github.com/]download GitHub
   Desktop and try again.

   (BUTTON) Go back

Launching Xcode...

   If nothing happens, [https://developer.apple.com/xcode/]download Xcode
   and try again.

   (BUTTON) Go back

Launching Visual Studio...

   If nothing happens, [https://visualstudio.github.com/]download the
   GitHub extension for Visual Studio and try again.

   (BUTTON) Go back
   Find file
   (BUTTON) Branch: master
   Switch branches/tags
   ____________________
     * Branches
     * Tags

   master
   Nothing to show
   Nothing to show
   (BUTTON) New pull request
   Fetching latest commit...
   Cannot retrieve the latest commit at this time.
   [file://localhost/tiimgreen/github-cheat-sheet/tree/a96f4fab81dca2e5ae6
   e4cfbd44f470e26c6c838]Permalink
   Failed to load latest commit information.
   
   .travis.yml
    improve travis.yml: update spacing Mar 2,
   2017
   [file://localhost/tiimgreen/github-cheat-sheet/blob/master/CONTRIBUTING
   .md]CONTRIBUTING.md
   [file://localhost/tiimgreen/github-cheat-sheet/commit/704d07fcc6fb72f98
   35ef935d9a8bcac756bf4cc]CONTRIBUTING.md Jan 18, 2015
   LICE
   NSE
   [file://localhost/tiimgreen/github-cheat-sheet/commit/e00c588ea0682f610
   55c3df7625ee0bbd243d325]Add LICENSE Apr 13, 2014
   [file://localhost/tiimgreen/github-cheat-sheet/blob/master/README.ja.md
   ]README.ja.md
   [file://localhost/tiimgreen/github-cheat-sheet/commit/a78ef158aaba3be26
   e10c1679172aa06019a840a]Fix failing links Jan 3, 2016
   [file://localhost/tiimgreen/github-cheat-sheet/blob/master/README.ko.md
   ]README.ko.md
   [file://localhost/tiimgreen/github-cheat-sheet/commit/5fdd48875db1fbb40
   6f2e1377fb3c3b6037c9eec]Update Korean translation to
   [https://github.com/tiimgreen/github-cheat-sheet/commit/b85d9146d76309c
   7d53deece58cbe0a018ecb2ef]b85d914 Mar 2, 2016
   RE
   ADME.md
   [file://localhost/tiimgreen/github-cheat-sheet/commit/a96f4fab81dca2e5a
   e6e4cfbd44f470e26c6c838]Add Git God to git resources Mar 14, 2018
   [file://localhost/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn
   .md]README.zh-cn.md
   [file://localhost/tiimgreen/github-cheat-sheet/commit/75b034d4d080bb094
   0775f738e155435c94fb4d8]Remove erroring links Feb 29, 2016
   [file://localhost/tiimgreen/github-cheat-sheet/blob/master/README.zh-tw
   .md]README.zh-tw.md
   [file://localhost/tiimgreen/github-cheat-sheet/commit/75b034d4d080bb094
   0775f738e155435c94fb4d8]Remove erroring links Feb 29, 2016

README.md

Awesome

   A collection of cool hidden and not so hidden features of Git and
   GitHub. This cheat sheet was inspired by
   [https://github.com/holman]Zach Holman's
   [http://confreaks.tv/videos/aloharuby2012-git-and-github-secrets]Git
   and GitHub Secrets talk at Aloha Ruby Conference 2012
   ([https://speakerdeck.com/holman/git-and-github-secrets]slides) and his
   [https://vimeo.com/72955426]More Git and GitHub Secrets talk at WDCNZ
   2013
   ([https://speakerdeck.com/holman/more-git-and-github-secrets]slides).

   Shortlink: [http://git.io/sheet]http://git.io/sheet

   Read this in other languages:
   En
   glish,
   [file://localhost/tiimgreen/github-cheat-sheet/blob/master/README.ko.md
   ]н┤,
   [file://localhost/tiimgreen/github-cheat-sheet/blob/master/README.ja.md
   ]ем,
   [file://localhost/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn
   .md]н,
   [file://localhost/tiimgreen/github-cheat-sheet/blob/master/README.zh-tw
   .md]гн.

Table of Contents

     * GitHub
          + Ignore Whitespace
          + Adjust Tab Space
          + Commit History by Author
          + Cloning a Repository
          + Branch
               o Co
                 mpare all Branches to Another Branch
               o [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/git
                 hub-cheat-sheet#comparing-branches]Comparing Branches
               o [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/git
                 hub-cheat-sheet#compare-branches-across-forked-repositori
                 es]Compare Branches across Forked Repositories
          + Gists
          + Git.io
          + Keyboard Shortcuts
          + Line Highlighting
            in Repositories
          + [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/github-c
            heat-sheet#closing-issues-via-commit-messages]Closing Issues
            via Commit Messages
          + Cross-Link Issues
          + Locking Conversations
          + CI Status on Pull
            Requests
          + [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/github-c
            heat-sheet#filters]Filters
          + [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/github-c
            heat-sheet#syntax-highlighting-in-markdown-files]Syntax
            Highlighting in Markdown Files
          + Emojis
          + Images/GIFs
               o Embedding
                 Images in GitHub Wiki
          + [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/github-c
            heat-sheet#quick-quoting]Quick Quoting
          + [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/github-c
            heat-sheet#pasting-clipboard-image-to-comments]Pasting
            Clipboard Image to Comments
          + Quick Licensing
          + Task Lists
               o Task
                 Lists in Markdown Documents
          + [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/github-c
            heat-sheet#relative-links]Relative Links
          + [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/github-c
            heat-sheet#metadata-and-plugin-support-for-github-pages]Metada
            ta and Plugin Support for GitHub Pages
          + Viewing
            YAML Metadata in your Documents
          + [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/github-c
            heat-sheet#rendering-tabular-data]Rendering Tabular Data
          + [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/github-c
            heat-sheet#rendering-pdf]Rendering PDF
          + [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/github-c
            heat-sheet#revert-a-pull-request]Revert a Pull Request
          + [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/github-c
            heat-sheet#diffs]Diffs
               o [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/git
                 hub-cheat-sheet#rendered-prose-diffs]Rendered Prose Diffs
               o [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/git
                 hub-cheat-sheet#diffable-maps]Diffable Maps
               o [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/git
                 hub-cheat-sheet#expanding-context-in-diffs]Expanding
                 Context in Diffs
               o Diff or
                 Patch of Pull Request
               o [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/git
                 hub-cheat-sheet#rendering-and-diffing-images]Rendering
                 and diffing images
          + Hub
          + Contribution Guidelines
               o CONTRIBUTING file
               o ISSUE_TEMPLATE file
               o PULL_REQUEST_T
                 EMPLATE file
          + [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/github-c
            heat-sheet#octicons]Octicons
          + [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/github-c
            heat-sheet#github-student-developer-pack]GitHub Student
            Developer Pack
          + GitHub Resources
               o GitHub Talks
          + SSH keys
     * Git
          + Remo
            ve All Deleted Files from the Working Tree
          + [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/github-c
            heat-sheet#previous-branch]Previous Branch
          + [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/github-c
            heat-sheet#stripspace]Stripspace
          + [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/github-c
            heat-sheet#checking-out-pull-requests]Checking out Pull
            Requests
          + Empty Commits
          + Styled Git Status
          + Styled Git Log
          + Git Query
          + Git Grep
          + Merged Branches
          + Fixup and Autosquash
          + Web
            Server for Browsing Local Repositories
          + [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/github-c
            heat-sheet#git-configurations]Git Configurations
               o [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/git
                 hub-cheat-sheet#aliases]Aliases
               o [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/git
                 hub-cheat-sheet#auto-correct]Auto-Correct
               o [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/git
                 hub-cheat-sheet#color]Color
          + [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/github-c
            heat-sheet#git-resources]Git Resources
               o [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/git
                 hub-cheat-sheet#git-books]Git Books
               o [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/git
                 hub-cheat-sheet#git-videos]Git Videos
               o [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/git
                 hub-cheat-sheet#git-articles]Git Articles

GitHub

Ignore Whitespace

   Adding ?w=1 to any diff URL will remove any changes only in whitespace,
   enabling you to see only the code that has changed.

   [https://camo.githubusercontent.com/797184940defadec00393e6559b835358a8
   63eeb/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e617
   7732e636f6d2f626c6f672f323031312f736563726574732f776869746573706163652e
   706e67]Diff without whitespace

   [https://github.com/blog/967-github-secrets]Read more about GitHub
   secrets.

Adjust Tab Space

   Adding ?ts=4 to a diff or file URL will display tab characters as 4
   spaces wide instead of the default 8. The number after ts can be
   adjusted to suit your preference. This does not work on Gists, or raw
   file views, but a
   [https://chrome.google.com/webstore/detail/tab-size-on-github/ofjbgnceg
   kdemndciafljngjbdpfmbkn]Chrome or
   [https://addons.opera.com/en/extensions/details/github-tab-size/]Opera
   extension can automate this.

   Here is a Go source file before adding ?ts=4:

   [https://camo.githubusercontent.com/b52541f4421a753d80462f3ca35ab8cd0b2
   d2814/687474703a2f2f692e696d6775722e636f6d2f474954314672302e706e67]Befo
   re, tab space example

   ...and this is after adding ?ts=4:

   [https://camo.githubusercontent.com/fe1043f0996f491d6eea37ef068535f087e
   00c83/687474703a2f2f692e696d6775722e636f6d2f3730464c3448392e706e67]Afte
   r, tab space example

Commit History by Author

   To view all commits on a repo by author add ?author={user} to the URL.
https://github.com/rails/rails/commits/master?author=dhh

   [https://camo.githubusercontent.com/d4af886fa80d5b63d1884338a8566ad009a
   1021d/687474703a2f2f692e696d6775722e636f6d2f533741453239622e706e67]DHH
   commit history

   [https://help.github.com/articles/differences-between-commit-views/]Rea
   d more about the differences between commits views.

Cloning a Repository

   When cloning a repository the .git can be left off the end.
$ git clone https://github.com/tiimgreen/github-cheat-sheet

   [http://git-scm.com/docs/git-clone]Read more about the Git clone
   command.

Branch

Compare all Branches to Another Branch

   If you go to the repo's
   [https://github.com/tiimgreen/github-cheat-sheet/branches]Branches
   page, next to the Commits button:
https://github.com/{user}/{repo}/branches

   ... you would see a list of all branches which are not merged into the
   main branch.

   From here you can access the compare page or delete a branch with a
   click of a button.

   [https://camo.githubusercontent.com/ae7a4633f0d28244736c6d85c1a86709b6d
   f2166/687474703a2f2f692e696d6775722e636f6d2f3046456533307a2e706e67]Comp
   are branches not merged into master in rails/rails repo -
   https://github.com/rails/rails/branches

Comparing Branches

   To use GitHub to compare branches, change the URL to look like this:
https://github.com/{user}/{repo}/compare/{range}

   where {range} = master...4-1-stable

   For example:
https://github.com/rails/rails/compare/master...4-1-stable

   [https://camo.githubusercontent.com/66b48236ec6fdc4f1112da35764d3d89939
   fa0a2/687474703a2f2f692e696d6775722e636f6d2f744952434f734b2e706e67]Rail
   s branch compare example

   {range} can be changed to things like:
https://github.com/rails/rails/compare/master@{1.day.ago}...master
https://github.com/rails/rails/compare/master@{2014-10-04}...master

   Here, dates are in the format YYYY-MM-DD

   [https://camo.githubusercontent.com/e9d634ff7da136f67279a183f3e73baafec
   61ef8/687474703a2f2f692e696d6775722e636f6d2f3564747a45537a2e706e67]Anot
   her compare example

   Branches can also be compared in diff and patch views:
https://github.com/rails/rails/compare/master...4-1-stable.diff
https://github.com/rails/rails/compare/master...4-1-stable.patch

   [https://help.github.com/articles/comparing-commits-across-time/]Read
   more about comparing commits across time.

Compare Branches across Forked Repositories

   To use GitHub to compare branches across forked repositories, change
   the URL to look like this:
https://github.com/{user}/{repo}/compare/{foreign-user}:{branch}...{own-branch}

   For example:
https://github.com/rails/rails/compare/byroot:master...master

   [https://camo.githubusercontent.com/19e6a90dd1814243b90871fafb98a8b60a9
   23ec9/687474703a2f2f692e696d6775722e636f6d2f513157367163422e706e67]Fork
   ed branch compare

Gists

   [https://gist.github.com/]Gists are an easy way to work with small bits
   of code without creating a fully fledged repository.

   [https://camo.githubusercontent.com/2577712c9a05afec55930e914c38aed69f8
   5c221/687474703a2f2f692e696d6775722e636f6d2f566b4b49314c432e706e673f31]
   Gist

   Add .pibb to the end of any Gist URL
   ([https://gist.github.com/tiimgreen/10545817.pibb]like this) in order
   to get the HTML-only version suitable for embedding in any other site.

   Gists can be treated as a repository so they can be cloned like any
   other:
$ git clone https://gist.github.com/tiimgreen/10545817

   [https://camo.githubusercontent.com/6f44827b994777e311cb4d4e0b1163adaaa
   5f190/687474703a2f2f692e696d6775722e636f6d2f4263467a6162702e706e67]Gist
   s

   This means you also can modify and push updates to Gists:
$ git commit
$ git push
Username for 'https://gist.github.com':
Password for 'https://tiimgreen@gist.github.com':

   However, Gists do not support directories. All files need to be added
   to the repository root.
   [https://help.github.com/articles/creating-gists/]Read more about
   creating Gists.

Git.io

   [http://git.io/]Git.io is a simple URL shortener for GitHub.

   [https://camo.githubusercontent.com/44e4c7861337bea3d61eac724c9bfac446f
   b5d37/687474703a2f2f692e696d6775722e636f6d2f364a55666263472e706e673f31]
   Git.io

   You can also use it via pure HTTP using Curl:
$ curl -i http://git.io -F "url=https://github.com/..."
HTTP/1.1 201 Created
Location: http://git.io/abc123

$ curl -i http://git.io/abc123
HTTP/1.1 302 Found
Location: https://github.com/...

   [https://github.com/blog/985-git-io-github-url-shortener]Read more
   about Git.io.

Keyboard Shortcuts

   When on a repository page, keyboard shortcuts allow you to navigate
   easily.
     * Pressing t will bring up a file explorer.
     * Pressing w will bring up the branch selector.
     * Pressing s will focus the search field for the current repository.
       Pressing Backspace to delete the "This repository" pill changes the
       field to search all of GitHub.
     * Pressing l will edit labels on existing Issues.
     * Pressing y when looking at a file (e.g.,
       https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.
       md) will change your URL to one which, in effect, freezes the page
       you are looking at. If this code changes, you will still be able to
       see what you saw at that current time.

   To see all of the shortcuts for the current page press ?:

   [https://camo.githubusercontent.com/e8444fa30f6994ed634c623d7ac7b30dc82
   fb46c/687474703a2f2f692e696d6775722e636f6d2f79355a664e456d2e706e67]Keyb
   oard shortcuts

   [https://help.github.com/articles/search-syntax/]Read more about search
   syntax you can use.

Line Highlighting in Repositories

   Either adding, e.g., #L52 to the end of a code file URL or simply
   clicking the line number will highlight that line number.

   It also works with ranges, e.g., #L53-L60, to select ranges, hold shift
   and click two lines:
https://github.com/rails/rails/blob/master/activemodel/lib/active_model.rb#L53-L60

   [https://camo.githubusercontent.com/da8b01ee726d25c787bcc5791ef1ba0d92c
   e4d7d/687474703a2f2f692e696d6775722e636f6d2f3841686a72437a2e706e67]Line
   Highlighting

Closing Issues via Commit Messages

   If a particular commit fixes an issue, any of the keywords
   fix/fixes/fixed, close/closes/closed or resolve/resolves/resolved,
   followed by the issue number, will close the issue once it is committed
   to the master branch.
$ git commit -m "Fix screwup, fixes #12"

   This closes the issue and references the closing commit.

   [https://camo.githubusercontent.com/ade6142e7353dabecc199411dec63973eb6
   fa5df/687474703a2f2f692e696d6775722e636f6d2f556831675a64782e706e67]Clos
   ing Repo

   [https://help.github.com/articles/closing-issues-via-commit-messages/]R
   ead more about closing Issues via commit messages.

Cross-Link Issues

   If you want to link to another issue in the same repository, simply
   type hash # then the issue number, and it will be auto-linked.

   To link to an issue in another repository, {user}/{repo}#ISSUE_NUMBER,
   e.g., tiimgreen/toc#12.

   [https://camo.githubusercontent.com/447e39ab8d96b553cadc8d31799100190df
   230a8/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e617
   7732e636f6d2f626c6f672f323031312f736563726574732f7265666572656e6365732e
   706e67]Cross-Link Issues

Locking Conversations

   Pull Requests and Issues can now be locked by owners or collaborators
   of the repo.

   [https://cloud.githubusercontent.com/assets/2723/3221693/bf54dd44-f00d-
   11e3-8eb6-bb51e825bc2c.png]Lock conversation

   This means that users who are not collaborators on the project will no
   longer be able to comment.

   [https://cloud.githubusercontent.com/assets/2723/3221775/d6e513b0-f00e-
   11e3-9721-2131cb37c906.png]Comments locked

   [https://github.com/blog/1847-locking-conversations]Read more about
   locking conversations.

CI Status on Pull Requests

   If set up correctly, every time you receive a Pull Request,
   [https://travis-ci.org/]Travis CI will build that Pull Request just
   like it would every time you make a new commit. Read more about how to
   [http://docs.travis-ci.com/user/getting-started/]get started with
   Travis CI.

   [https://github.com/octokit/octokit.rb/pull/452]Travis CI status

   [https://github.com/blog/1227-commit-status-api]Read more about the
   commit status API.

Filters

   Both issues and pull requests allow filtering in the user interface.

   For the Rails repo:
   [https://github.com/rails/rails/issues]https://github.com/rails/rails/i
   ssues, the following filter is built by selecting the label
   "activerecord":

   is:issue label:activerecord

   But, you can also find all issues that are NOT labeled activerecord:

   is:issue -label:activerecord

   Additionally, this also works for pull requests:

   is:pr -label:activerecord

   Github has tabs for displaying open or closed issues and pull requests
   but you can also see merged pull requests. Just put the following in
   the filter:

   is:merged

   [https://help.github.com/articles/searching-issues/]Read more about
   searching issues.

   Finally, github now allows you to filter by the Status API's status.

   Pull requests with only successful statuses:

   status:success

   [https://github.com/blog/2014-filter-pull-requests-by-status]Read more
   about searching on the Status API.

Syntax Highlighting in Markdown Files

   For example, to syntax highlight Ruby code in your Markdown files
   write:
```ruby
require 'tabbit'
table = Tabbit.new('Name', 'Email')
table.add_row('Tim Green', 'tiimgreen@gmail.com')
puts table.to_s
```

   This will produce:
require 'tabbit'
table = Tabbit.new('Name', 'Email')
table.add_row('Tim Green', 'tiimgreen@gmail.com')
puts table.to_s

   GitHub uses [https://github.com/github/linguist]Linguist to perform
   language detection and syntax highlighting. You can find out which
   keywords are valid by perusing the
   [https://github.com/github/linguist/blob/master/lib/linguist/languages.
   yml]languages YAML file.

   [https://help.github.com/articles/github-flavored-markdown/]Read more
   about GitHub Flavored Markdown.

Emojis

   Emojis can be added to Pull Requests, Issues, commit messages,
   repository descriptions, etc. using :name_of_emoji:.

   The full list of supported Emojis on GitHub can be found at
   [http://www.emoji-cheat-sheet.com/]emoji-cheat-sheet.com or
   [https://github.com/scotch-io/All-Github-Emoji-Icons]scotch-io/All-Gith
   ub-Emoji-Icons. A handy emoji search engine can be found at
   [http://emoji.muan.co/]emoji.muan.co.

   The top 5 used Emojis on GitHub are:
    1. :shipit:
    2. :sparkles:
    3. :-1:
    4. :+1:
    5. :clap:

Images/GIFs

   Images and GIFs can be added to comments, READMEs etc.:
![Alt Text](http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif)

   Raw images from the repo can be used by calling them directly.:
![Alt Text](https://github.com/{user}/{repo}/raw/master/path/to/image.gif)

   [https://camo.githubusercontent.com/fca1eaa46baa3573f6e2d993f6fe1f95a63
   29ae9/687474703a2f2f7777772e73686561776f6e672e636f6d2f77702d636f6e74656
   e742f75706c6f6164732f323031332f30382f6b656570686174696e2e676966]Peter
   don't care

   All images are cached on GitHub, so if your host goes down, the image
   will remain available.

Embedding Images in GitHub Wiki

   There are multiple ways of embedding images in Wiki pages. There's the
   standard Markdown syntax (shown above). But there's also a syntax that
   allows things like specifying the height or width of the image:
[[ http://www.sheawong.com/wp-content/uploads/2013/08/keephatin.gif | height = 100px ]]

   Which produces:

   [https://camo.githubusercontent.com/cf2e557009192c63d6accbdf14bcf4b78e9
   ed97b/687474703a2f2f692e696d6775722e636f6d2f4a35624d6637532e706e67]Just
   a screenshot

Quick Quoting

   When on a comment thread and you want to quote something someone
   previously said, highlight the text and press r, this will copy it into
   your text box in the block-quote format.

   [https://camo.githubusercontent.com/df4de1519cc0c3cc4d394f309f1d5c7c922
   97e03/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f61737365747
   32f3239363433322f3132343438332f62306661363230342d366566302d313165322d38
   3363332d3235366333376661376162632e676966]Quick Quote

   [https://github.com/blog/1399-quick-quotes]Read more about quick
   quoting.

Pasting Clipboard Image to Comments

   (Works on Chrome browsers only)

   After taking a screenshot and adding it to the clipboard (mac:
   cmd-ctrl-shift-4), you can simply paste (cmd-v / ctrl-v) the image into
   the comment section and it will be auto-uploaded to github.

   [https://cloud.githubusercontent.com/assets/39191/5794265/39c9b65a-9f1b
   -11e4-9bc7-04e41f59ea5f.png]Pasting Clipboard Image to Comments

   [https://help.github.com/articles/issue-attachments/]Read more about
   issue attachments.

Quick Licensing

   When creating a repository, GitHub gives you the option of adding in a
   pre-made license:

   [https://camo.githubusercontent.com/a3b95ac4cfc8bec5d4fdc007fe5b12655a3
   f25a5/687474703a2f2f692e696d6775722e636f6d2f4368716a3446672e706e67]Lice
   nse

   You can also add them to existing repositories by creating a new file
   through the web interface. When the name LICENSE is typed in you will
   get an option to use a template:

   [https://camo.githubusercontent.com/74e0a5fea1880745908b53ff06536fd7219
   08a86/687474703a2f2f692e696d6775722e636f6d2f66546a516963742e706e67]Lice
   nse

   Also works for .gitignore.

   [https://help.github.com/articles/open-source-licensing/]Read more
   about open source licensing.

Task Lists

   In Issues and Pull requests check boxes can be added with the following
   syntax (notice the space):
- [ ] Be awesome
- [ ] Prepare dinner
  - [ ] Research recipe
  - [ ] Buy ingredients
  - [ ] Cook recipe
- [ ] Sleep

   [https://camo.githubusercontent.com/e0ca04595f493cd02e6da43402b028cbaf6
   31fae/687474703a2f2f692e696d6775722e636f6d2f6a4a42586873592e706e67]Task
   List

   When they are clicked, they will be updated in the pure Markdown:
- [x] Be awesome
- [ ] Prepare dinner
  - [x] Research recipe
  - [x] Buy ingredients
  - [ ] Cook recipe
- [ ] Sleep

   [https://help.github.com/articles/writing-on-github/#task-lists]Read
   more about task lists.

Task Lists in Markdown Documents

   In full Markdown documents read-only checklists can now be added using
   the following syntax:
- [ ] Mercury
- [x] Venus
- [x] Earth
  - [x] Moon
- [x] Mars
  - [ ] Deimos
  - [ ] Phobos

     * [ ] Mercury
     * [X] Venus
     * [X] Earth
          + [X] Moon
     * [X] Mars
          + [ ] Deimos
          + [ ] Phobos

   [https://github.com/blog/1825-task-lists-in-all-markdown-documents]Read
   more about task lists in markdown documents.

Relative Links

   Relative links are recommended in your Markdown files when linking to
   internal content.
[Link to a header](#awesome-section)
[Link to a file](docs/readme)

   Absolute links have to be updated whenever the URL changes (e.g.,
   repository renamed, username changed, project forked). Using relative
   links makes your documentation easily stand on its own.

   [https://help.github.com/articles/relative-links-in-readmes/]Read more
   about relative links.

Metadata and Plugin Support for GitHub Pages

   Within Jekyll pages and posts, repository information is available
   within the site.github namespace, and can be displayed, for example,
   using {{ site.github.project_title }}.

   The Jemoji and jekyll-mentions plugins enable
   @mentions in your
   Jekyll posts and pages to work just like you'd expect when interacting
   with a repository on GitHub.com.

   [https://github.com/blog/1797-repository-metadata-and-plugin-support-fo
   r-github-pages]Read more about repository metadata and plugin support
   for GitHub Pages.

Viewing YAML Metadata in your Documents

   Many blogging websites, like [http://jekyllrb.com/]Jekyll with
   [https://pages.github.com/]GitHub Pages, depend on some YAML-formatted
   metadata at the beginning of your post. GitHub will render this
   metadata as a horizontal table, for easier reading

   [https://camo.githubusercontent.com/47245aa16728e242f74a9a324ce0d24c0b9
   16075/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f61737365747
   32f36343035302f313232383236372f65303439643063362d323761302d313165332d39
   6464382d6131636432323539393334342e706e67]YAML metadata

   [https://github.com/blog/1647-viewing-yaml-metadata-in-your-documents]R
   ead more about viewing YAML metadata in your documents.

Rendering Tabular Data

   GitHub supports rendering tabular data in the form of .csv
   (comma-separated) and .tsv (tab-separated) files.

   [https://camo.githubusercontent.com/1b6dd0157ffb45d9939abf14233a0cb13b3
   b4dfe/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f61737365747
   32f3238323735392f3937363436322f33323038336463652d303638642d313165332d39
   3262322d3566323863313061353035392e706e67]Tabular data

   [https://github.com/blog/1601-see-your-csvs]Read more about rendering
   tabular data.

Rendering PDF

   GitHub supports rendering PDF:

   [https://cloud.githubusercontent.com/assets/1000669/7492902/f8493160-f4
   2e-11e4-8cea-1cb4f02757e7.png]PDF

   [https://github.com/blog/1974-pdf-viewing]Read more about rendering
   PDF.

Revert a Pull Request

   After a pull request is merged, you may find it does not help anything
   or it was a bad decision to merge the pull request.

   You can revert it by clicking the Revert button on the right side of a
   commit in the pull request page to create a pull request with reverted
   changes to this specific pull request.

   [https://camo.githubusercontent.com/0d3350caf2bb1cba53123ffeafc00ca702b
   1b164/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e617
   7732e636f6d2f68656c702f70756c6c5f72657175657374732f7265766572742d70756c
   6c2d726571756573742d6c696e6b2e706e67]Revert button

   [https://github.com/blog/1857-introducing-the-revert-button]Read more
   about reverting pull requests

Diffs

Rendered Prose Diffs

   Commits and pull requests, including rendered documents supported by
   GitHub (e.g., Markdown), feature source and rendered views.

   [https://camo.githubusercontent.com/d13da922ee5d1185db29b193d454f5b397a
   8da89/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e617
   7732e636f6d2f68656c702f7265706f7369746f72792f72656e64657265645f70726f73
   655f646966662e706e67]Source / Rendered view

   Click the "rendered" button to see the changes as they'll appear in the
   rendered document. Rendered prose view is handy when you're adding,
   removing, and editing text:

   [https://camo.githubusercontent.com/1c4a52738b52038653e37bb1e51d0dcf7dd
   3cc18/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f61737365747
   32f31373731352f323030333035362f33393937656462342d383632622d313165332d39
   3062652d3565393538366564656364372e706e67]Rendered Prose Diffs

   [https://github.com/blog/1784-rendered-prose-diffs]Read more about
   rendered prose diffs.

Diffable Maps

   Any time you view a commit or pull request on GitHub that includes
   geodata, GitHub will render a visual representation of what was
   changed.

   [https://github.com/benbalter/congressional-districts/commit/2233c76ca5
   bb059582d796f053775d8859198ec5]Diffable Maps

   [https://github.com/blog/1772-diffable-more-customizable-maps]Read more
   about diffable maps.

Expanding Context in Diffs

   Using the unfold button in the gutter of a diff, you can reveal
   additional lines of context with a click. You can keep clicking unfold
   until you've revealed the whole file, and the feature is available
   anywhere GitHub renders diffs.

   [https://camo.githubusercontent.com/0e02bc17ce408657ba14c164b9f9edac432
   685a4/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f61737365747
   32f32323633352f313631303533392f38363363316636342d353538342d313165332d38
   3262662d3135316234303661323732662e676966]Expanding Context in Diffs

   [https://github.com/blog/1705-expanding-context-in-diffs]Read more
   about expanding context in diffs.

Diff or Patch of Pull Request

   You can get the diff of a Pull Request by adding a .diff or .patch
   extension to the end of the URL. For example:
https://github.com/tiimgreen/github-cheat-sheet/pull/15
https://github.com/tiimgreen/github-cheat-sheet/pull/15.diff
https://github.com/tiimgreen/github-cheat-sheet/pull/15.patch

   The .diff extension would give you this in plain text:
diff --git a/README.md b/README.md
index 88fcf69..8614873 100644
--- a/README.md
+++ b/README.md
@@ -28,6 +28,7 @@ All the hidden and not hidden features of Git and GitHub. This cheat sheet was i
 - [Merged Branches](#merged-branches)
 - [Quick Licensing](#quick-licensing)
 - [TODO Lists](#todo-lists)
+- [Relative Links](#relative-links)
 - [.gitconfig Recommendations](#gitconfig-recommendations)
     - [Aliases](#aliases)
     - [Auto-correct](#auto-correct)
@@ -381,6 +382,19 @@ When they are clicked, they will be updated in the pure Markdown:
 - [ ] Sleep

(...)

Rendering and diffing images

   GitHub can display several common image formats, including PNG, JPG,
   GIF, and PSD. In addition, there are several ways to compare
   differences between versions of those image formats.

   [https://github.com/blog/1845-psd-viewing-diffing]Diffable PSD

   [https://help.github.com/articles/rendering-and-diffing-images/]Read
   more about rendering and diffing images.

Hub

   [https://github.com/github/hub]Hub is a command line Git wrapper that
   gives you extra features and commands that make working with GitHub
   easier.

   This allows you to do things like:
$ hub clone tiimgreen/toc

   [https://github.com/github/hub#commands]Check out some more cool
   commands Hub has to offer.

Contribution Guidelines

   GitHub supports adding 3 different files which help users contribute to
   your project. These files can either be placed in the root of your
   repository or a .github directory under the root.

CONTRIBUTING File

   Adding a CONTRIBUTING or CONTRIBUTING.md file to either the root of
   your repository or a .github directory will add a link to your file
   when a contributor creates an Issue or opens a Pull Request.

   [https://camo.githubusercontent.com/71995d6b0e620a9ef1ded00a04498241c69
   dd1bf/68747470733a2f2f6769746875622d696d616765732e73332e616d617a6f6e617
   7732e636f6d2f736b697463682f6973737565732d32303132303931332d313632353339
   2e6a7067]Contributing Guidelines

   [https://github.com/blog/1184-contributing-guidelines]Read more about
   contributing guidelines.

ISSUE_TEMPLATE file

   You can define a template for all new issues opened in your project.
   The content of this file will pre-populate the new issue box when users
   create new issues. Add an ISSUE_TEMPLATE or ISSUE_TEMPLATE.md file to
   either the root of your repository or a .github directory.

   [https://github.com/blog/2111-issue-and-pull-request-templates]Read
   more about issue templates.

   [https://www.talater.com/open-source-templates/]Issue template file
   generator

   [https://cloud.githubusercontent.com/assets/25792/13120859/733479fe-d56
   4-11e5-8a1f-a03f95072f7a.png]GitHub Issue template

PULL_REQUEST_TEMPLATE file

   You can define a template for all new pull requests opened in your
   project. The content of this file will pre-populate the text area when
   users create pull requests. Add a PULL_REQUEST_TEMPLATE or
   PULL_REQUEST_TEMPLATE.md file to either the root of your repository or
   a .github directory.

   [https://github.com/blog/2111-issue-and-pull-request-templates]Read
   more about pull request templates.

   [https://www.talater.com/open-source-templates/]Pull request template
   file generator

Octicons

   GitHubs icons (Octicons) have now been open sourced.

   [https://camo.githubusercontent.com/2f4f450830accbd44062add083885eadc0f
   791c7/68747470733a2f2f6f672e6769746875622e636f6d2f6f637469636f6e732f6f6
   37469636f6e734031323030783633302e706e67]Octicons

   [https://octicons.github.com/]Read more about GitHub's Octicons

GitHub Student Developer Pack

   If you are a student you will be eligible for the GitHub Student
   Developer Pack. This gives you free credit, free trials and early
   access to software that will help you when developing.

   [https://camo.githubusercontent.com/f6b7a562d52dac859be4318b6d952bbe475
   6652f/687474703a2f2f692e696d6775722e636f6d2f397275334b34332e706e67]GitH
   ub Student Developer Pack

   [https://education.github.com/pack]Read more about GitHub's Student
   Developer Pack

GitHub Resources

   Title Link
   GitHub Explore [https://github.com/explore]https://github.com/explore
   GitHub Blog [https://github.com/blog]https://github.com/blog
   GitHub Help [https://help.github.com/]https://help.github.com/
   GitHub Training
   [https://training.github.com/]https://training.github.com/
   GitHub Developer
   [https://developer.github.com/]https://developer.github.com/
   Github Education (Free Micro Account and other stuff for students)
   [https://education.github.com/]https://education.github.com/

GitHub Talks

                        Title                      Link
   How GitHub Uses GitHub to Build GitHub
   [https://www.youtube.com/watch?v=qyz3jkOBbQY]https://www.youtube.com/wa
   tch?v=qyz3jkOBbQY
   Introduction to Git with Scott Chacon of GitHub
   [https://www.youtube.com/watch?v=ZDR433b0HJY]https://www.youtube.com/wa
   tch?v=ZDR433b0HJY
   How GitHub No Longer Works
   [https://www.youtube.com/watch?v=gXD1ITW7iZI]https://www.youtube.com/wa
   tch?v=gXD1ITW7iZI
   Git and GitHub Secrets
   [https://www.youtube.com/watch?v=Foz9yvMkvlA]https://www.youtube.com/wa
   tch?v=Foz9yvMkvlA
   More Git and GitHub Secrets
   [https://www.youtube.com/watch?v=p50xsL-iVgU]https://www.youtube.com/wa
   tch?v=p50xsL-iVgU

SSH keys

   You can get a list of public ssh keys in plain text format by visiting:
https://github.com/{user}.keys

   e.g.
   [https://github.com/tiimgreen.keys]https://github.com/tiimgreen.keys

   [https://changelog.com/github-exposes-public-ssh-keys-for-its-users/]Re
   ad more about accessing public ssh keys.

Git

Remove All Deleted Files from the Working Tree

   When you delete a lot of files using /bin/rm you can use the following
   command to remove them from the working tree and from the index,
   eliminating the need to remove each one individually:
$ git rm $(git ls-files -d)

   For example:
$ git status
On branch master
Changes not staged for commit:
        deleted:    a
        deleted:    c

$ git rm $(git ls-files -d)
rm 'a'
rm 'c'

$ git status
On branch master
Changes to be committed:
        deleted:    a
        deleted:    c

Previous Branch

   To move to the previous branch in Git:
$ git checkout -
# Switched to branch 'master'

$ git checkout -
# Switched to branch 'next'

$ git checkout -
# Switched to branch 'master'

   [http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging]R
   ead more about Git branching.

Stripspace

   Git Stripspace:
     * Strips trailing whitespace
     * Collapses newlines
     * Adds newline to end of file

   A file must be passed when calling the command, e.g.:
$ git stripspace < README.md

   [http://git-scm.com/docs/git-stripspace]Read more about the Git
   stripspace command.

Checking out Pull Requests

   Pull Requests are special branches on the GitHub repository which can
   be retrieved locally in several ways:

   Retrieve a specific Pull Request and store it temporarily in FETCH_HEAD
   for quickly diff-ing or merge-ing:
$ git fetch origin refs/pull/[PR-Number]/head

   Acquire all Pull Request branches as local remote branches by refspec:
$ git fetch origin '+refs/pull/*/head:refs/remotes/origin/pr/*'

   Or setup the remote to fetch Pull Requests automatically by adding
   these corresponding lines in your repository's .git/config:
[remote "origin"]
    fetch = +refs/heads/*:refs/remotes/origin/*
    url = git@github.com:tiimgreen/github-cheat-sheet.git

[remote "origin"]
    fetch = +refs/heads/*:refs/remotes/origin/*
    url = git@github.com:tiimgreen/github-cheat-sheet.git
    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*

   For Fork-based Pull Request contributions, it's useful to checkout a
   remote branch representing the Pull Request and create a local branch
   from it:
$ git checkout pr/42 pr-42

   Or should you work on more repositories, you can globally configure
   fetching pull requests in the global git config instead.
git config --global --add remote.origin.fetch "+refs/pull/*/head:refs/remotes/origin/pr/*"

   This way, you can use the following short commands in all your
   repositories:
git fetch origin

git checkout pr/42

   [https://help.github.com/articles/checking-out-pull-requests-locally/]R
   ead more about checking out pull requests locally.

Empty Commits

   Commits can be pushed with no code changes by adding --allow-empty:
$ git commit -m "Big-ass commit" --allow-empty

   Some use-cases for this (that make sense), include:
     * Annotating the start of a new bulk of work or a new feature.
     * Documenting when you make changes to the project that aren't code
       related.
     * Communicating with people using your repository.
     * The first commit of a repository: git commit -m "Initial commit"
       --allow-empty.

Styled Git Status

   Running:
$ git status

   produces:

   [https://camo.githubusercontent.com/8318c88e25e3d6c1eb2a9ba73b8c508447f
   ea00e/687474703a2f2f692e696d6775722e636f6d2f716a50797658622e706e67]git
   status

   By adding -sb:
$ git status -sb

   this is produced:

   [https://camo.githubusercontent.com/a2d692c06a0d296cbf8258d546f996e47fd
   13229/687474703a2f2f692e696d6775722e636f6d2f4b304f59336e6d2e706e67]git
   status -sb

   [http://git-scm.com/docs/git-status]Read more about the Git status
   command.

Styled Git Log

   Running:
$ git log --all --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

   produces:

   [https://camo.githubusercontent.com/a698d31838cd57e7910c8b2922b7c9aae26
   1b152/687474703a2f2f692e696d6775722e636f6d2f3538654f746b572e706e67]git
   log --all --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s
   %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

   Credit to [http://stackoverflow.com/users/88355/palesz]Palesz

   This can be aliased using the instructions found
   [https://github.com/tiimgreen/github-cheat-sheet#aliases]here.

   [http://git-scm.com/docs/git-log]Read more about the Git log command.

Git Query

   A Git query allows you to search all your previous commit messages and
   find the most recent one matching the query.
$ git show :/query

   where query (case-sensitive) is the term you want to search, this then
   finds the last one and gives details on the lines that were changed.
$ git show :/typo

   [https://camo.githubusercontent.com/dd367971caed2480a98cab383b542cd9f36
   aca0c/687474703a2f2f692e696d6775722e636f6d2f69636147694e742e706e67]git
   show :/query

   Press q to quit.

Git Grep

   Git Grep will return a list of lines matching a pattern.

   Running:
$ git grep aliases

   will show all the files containing the string aliases.

   [https://camo.githubusercontent.com/da30968c6afc0a4cd65baa5ec579dab10e5
   78670/687474703a2f2f692e696d6775722e636f6d2f444c327a7051392e706e67]git
   grep aliases

   Press q to quit.

   You can also use multiple flags for more advanced search. For example:
     * -e The next parameter is the pattern (e.g., regex)
     * --and, --or and --not Combine multiple patterns.

   Use it like this:
 $ git grep -e pattern --and -e anotherpattern

   [http://git-scm.com/docs/git-grep]Read more about the Git grep command.

Merged Branches

   Running:
$ git branch --merged

   will give you a list of all branches that have been merged into your
   current branch.

   Conversely:
$ git branch --no-merged

   will give you a list of branches that have not been merged into your
   current branch.

   [http://git-scm.com/docs/git-branch]Read more about the Git branch
   command.

Fixup and Autosquash

   If there is something wrong with a previous commit (can be one or more
   from HEAD), for example abcde, run the following command after you've
   amended the problem:
$ git commit --fixup=abcde
$ git rebase abcde^ --autosquash -i

   [http://git-scm.com/docs/git-commit]Read more about the Git commit
   command. [http://git-scm.com/docs/git-rebase]Read more about the Git
   rebase command.

Web Server for Browsing Local Repositories

   Use the Git instaweb command to instantly browse your working
   repository in gitweb. This command is a simple script to set up gitweb
   and a web server for browsing the local repository.
$ git instaweb

   opens:

   [https://camo.githubusercontent.com/96e740c09fa676f180273cb52fd9bfc2df1
   f77e6/687474703a2f2f692e696d6775722e636f6d2f4478656b6d71632e706e67]Git
   instaweb

   [http://git-scm.com/docs/git-instaweb]Read more about the Git instaweb
   command.

Git Configurations

   Your .gitconfig file contains all your Git configurations.

Aliases

   Aliases are helpers that let you define your own git calls. For example
   you could set git a to run git add --all.

   To add an alias, either navigate to ~/.gitconfig and fill it out in the
   following format:
[alias]
  co = checkout
  cm = commit
  p = push
  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

   ...or type in the command-line:
$ git config --global alias.new_alias git_function

   For example:
$ git config --global alias.cm commit

   For an alias with multiple functions use quotes:
$ git config --global alias.ac 'add -A . && commit'

   Some useful aliases include:
   Alias Command What to Type
   git cm git commit git config --global alias.cm commit
   git co git checkout git config --global alias.co checkout
   git ac git add . -A git commit git config --global alias.ac '!git add
   -A && git commit'
   git st git status -sb git config --global alias.st 'status -sb'
   git tags git tag -l git config --global alias.tags 'tag -l'
   git branches git branch -a git config --global alias.branches 'branch
   -a'
   git cleanup `git branch --merged grep -v '*'
   git remotes git remote -v git config --global alias.remotes 'remote -v'
   git lg git log --color --graph --pretty=format:'%Cred%h%Creset
   -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
   --abbrev-commit -- git config --global alias.lg "log --color --graph
   --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)
   %C(bold blue)<%an>%Creset' --abbrev-commit --"

   Some Aliases are taken from
   [https://github.com/mathiasbynens]@mathiasbynens dotfiles:
   [https://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig]https
   ://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig

Auto-Correct

   If you type git comit you will get this:
$ git comit -m "Message"
# git: 'comit' is not a git command. See 'git --help'.

# Did you mean this?
#   commit

   To call commit when comit is typed, just enable auto-correct:
$ git config --global help.autocorrect 1

   So now you will get this:
$ git comit -m "Message"
# WARNING: You called a Git command named 'comit', which does not exist.
# Continuing under the assumption that you meant 'commit'
# in 0.1 seconds automatically...

Color

   To add more color to your Git output:
$ git config --global color.ui 1

   [http://git-scm.com/docs/git-config]Read more about the Git config
   command.

Git Resources

   Title Link
   Official Git Site [http://git-scm.com/]http://git-scm.com/
   Official Git Video Tutorials
   [http://git-scm.com/videos]http://git-scm.com/videos
   Code School Try Git [http://try.github.com/]http://try.github.com/
   Introductory Reference & Tutorial for Git
   [http://gitref.org/]http://gitref.org/
   Official Git Tutorial
   [http://git-scm.com/docs/gittutorial]http://git-scm.com/docs/gittutoria
   l
   Everyday Git
   [http://git-scm.com/docs/everyday]http://git-scm.com/docs/everyday
   Git Immersion [http://gitimmersion.com/]http://gitimmersion.com/
   Git God
   [https://github.com/gorosgobe/git-god]https://github.com/gorosgobe/git-
   god
   Ry's Git Tutorial
   [http://rypress.com/tutorials/git/index]http://rypress.com/tutorials/gi
   t/index
   Git for Computer Scientists
   [http://eagain.net/articles/git-for-computer-scientists/]http://eagain.
   net/articles/git-for-computer-scientists/
   Git Magic
   [http://www-cs-students.stanford.edu/%7Eblynn/gitmagic/]http://www-cs-s
   tudents.stanford.edu/~blynn/gitmagic/
   GitHub Training Kit
   [https://training.github.com/kit/]https://training.github.com/kit/
   Git Visualization Playground
   [http://onlywei.github.io/explain-git-with-d3/#freeplay]http://onlywei.
   github.io/explain-git-with-d3/#freeplay
   Learn Git Branching
   [http://pcottle.github.io/learnGitBranching/]http://pcottle.github.io/l
   earnGitBranching/
   A collection of useful .gitignore templates
   [https://github.com/github/gitignore]https://github.com/github/gitignor
   e
   Unixorn's git-extra-commands collection of git scripts
   [https://github.com/unixorn/git-extra-commands]https://github.com/unixo
   rn/git-extra-commands

Git Books

   Title Link
   Pragmatic Version Control Using Git
   [https://pragprog.com/titles/tsgit/pragmatic-version-control-using-git]
   https://pragprog.com/titles/tsgit/pragmatic-version-control-using-git
   Pro Git [http://git-scm.com/book]http://git-scm.com/book
   Git Internals PluralSight
   [https://github.com/pluralsight/git-internals-pdf]https://github.com/pl
   uralsight/git-internals-pdf
   Git in the Trenches
   [http://cbx33.github.io/gitt/]http://cbx33.github.io/gitt/
   Version Control with Git
   [http://www.amazon.com/Version-Control-Git-collaborative-development/dp
   /1449316387]http://www.amazon.com/Version-Control-Git-collaborative-dev
   elopment/dp/1449316387
   Pragmatic Guide to Git
   [https://pragprog.com/titles/pg_git/pragmatic-guide-to-git]https://prag
   prog.com/titles/pg_git/pragmatic-guide-to-git
   Git: Version Control for Everyone
   [https://www.packtpub.com/application-development/git-version-control-e
   veryone]https://www.packtpub.com/application-development/git-version-co
   ntrol-everyone

Git Videos

                    Title                  Link
   Linus Torvalds on Git
   [https://www.youtube.com/watch?v=4XpnKHJAok8]https://www.youtube.com/wa
   tch?v=4XpnKHJAok8
   Introduction to Git with Scott Chacon
   [https://www.youtube.com/watch?v=ZDR433b0HJY]https://www.youtube.com/wa
   tch?v=ZDR433b0HJY
   Git From the Bits Up
   [https://www.youtube.com/watch?v=MYP56QJpDr4]https://www.youtube.com/wa
   tch?v=MYP56QJpDr4
   Graphs, Hashes, and Compression, Oh My!
   [https://www.youtube.com/watch?v=ig5E8CcdM9g]https://www.youtube.com/wa
   tch?v=ig5E8CcdM9g
   GitHub Training & Guides
   [https://www.youtube.com/watch?list=PLg7s6cbtAD15G8lNyoaYDuKZSKyJrgwB-&
   v=FyfwLX4HAxM]https://www.youtube.com/watch?list=PLg7s6cbtAD15G8lNyoaYD
   uKZSKyJrgwB-&v=FyfwLX4HAxM

Git Articles

      Title    Link
   GitHub Flow
   [http://scottchacon.com/2011/08/31/github-flow.html]http://scottchacon.
   com/2011/08/31/github-flow.html

     * й 2018 GitHub, Inc.
     * [https://github.com/site/terms]Terms
     * [https://github.com/site/privacy]Privacy
     * [https://help.github.com/articles/github-security/]Security
     * [https://status.github.com/]Status
     * [https://help.github.com/]Help

   [https://github.com/]
     * [https://github.com/contact]Contact GitHub
     * [https://developer.github.com/]API
     * [https://training.github.com/]Training
     * [https://shop.github.com/]Shop
     * [https://blog.github.com/]Blog
     * [https://github.com/about]About

   (BUTTON) You can't perform that action at this time.

   You signed in with another tab or window.
   Reload to refresh your session. You signed out in another tab or
   window.
   [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/github-cheat-shee
   t]Reload to refresh your session.

   (BUTTON)

   Press h to open a hovercard with more details.
