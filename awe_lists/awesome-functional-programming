   #GitHub
   [https://github.com/lucasviola/awesome-functional-programming/commits/m
   aster.atom]Recent Commits to awesome-functional-programming:master

   Skip to content
   [https://github.com/]
     * Features
     * Explore
     * Pricing

   This
   repository ____________________
   [file://localhost/login?return_to=%2Flucasviola%2Fawesome-functional-pr
   ogramming]Sign in or Sign up

     * Watch
       34
     * Star
       361
     * Fork
       18

awesome-functional-programming

   Code
   Issu
   es 1
   Pull
   requests 0
   Pr
   ojects 0
   Insig
   hts
   (BUTTON) Dismiss

Join GitHub today

   GitHub is home to over 20 million developers working together to host
   and review code, manage projects, and build software together.

   Sign up
   ½ A curated list of functional programming resources such as blog
   posts, communities, discussion topics, wikis and more.
     * 81 commits
     * 1 branch
     * 0 releases
     * 8 contributors

   Clone or download

Clone with HTTPS [https://help.github.com/articles/which-remote-url-should-i-use]

   Use Git or checkout with SVN using the web URL.
   https://github.com/l
   [file://localhost/lucasviola/awesome-functional-programming/archive/mas
   ter.zip]Download ZIP

Launching GitHub Desktop...

   If nothing happens, [https://desktop.github.com/]download GitHub
   Desktop and try again.

   (BUTTON) Go back

Launching GitHub Desktop...

   If nothing happens, [https://desktop.github.com/]download GitHub
   Desktop and try again.

   (BUTTON) Go back

Launching Xcode...

   If nothing happens, [https://developer.apple.com/xcode/]download Xcode
   and try again.

   (BUTTON) Go back

Launching Visual Studio...

   If nothing happens, [https://visualstudio.github.com/]download the
   GitHub extension for Visual Studio and try again.

   (BUTTON) Go back
   [file://localhost/lucasviola/awesome-functional-programming/find/master
   ]Find file
   (BUTTON) Branch: master
   Switch branches/tags
   ____________________
     * Branches
     * Tags

   [file://localhost/lucasviola/awesome-functional-programming/tree/master
   ]master
   Nothing to show
   Nothing to show
   (BUTTON) New pull request
   Fetching latest commit...
   Cannot retrieve the latest commit at this time.
   Permalink
   Failed to load latest commit information.
   [file://localhost/lucasviola/awesome-functional-programming/blob/master
   /contributing.md]contributing.md
   [file://localhost/lucasviola/awesome-functional-programming/commit/01ee
   76153018ba5090d42f593f90c1fc5e8e4edb]Added contributing guidelines Nov
   2, 2015
   readme.md
   Merge pull request
   [https://github.com/lucasviola/awesome-functional-programming/pull/9]#9
   [file://localhost/lucasviola/awesome-functional-programming/commit/b481
   a1f7a09829fb40934e01b4ac747923b4d3d4]from Paqmind/master Jan 20, 2018

readme.md

Awesome

   Based on the [https://github.com/sindresorhus/awesome/]Awesome project

What is this about?

   On the last decade, functional programming has gained a new found power
   due to its declarative characteristics which, some would say, are very
   effective for parallel computing and for the whole usage of
   [https://en.wikipedia.org/wiki/Moore%27s_law]Moores Law.

   This repo gathers some material on Functional Programming such as blog
   posts, papers, videos, tools, etc. and also aims to clarify some of the
   theoretical subjects behind it.

   Want to contribute? Please refer to
   [https://github.com/lucasviola/awesome-functional-programming/blob/mast
   er/contributing.md]this first.

Table of Contents

     * [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/awesome-funct
       ional-programming#blog-posts]Blog Posts
     * [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/awesome-funct
       ional-programming#papers]Papers
     * [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/awesome-funct
       ional-programming#wikis]Wikis
     * [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/awesome-funct
       ional-programming#books]Books
     * [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/awesome-funct
       ional-programming#communities]Communities
     * [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/awesome-funct
       ional-programming#discussions-quora-stack-overflow-reddit-etc]Discu
       ssions
     * Videos
     * Lectures
     * Tools
     * Repos
     * People

Blog posts

     * [http://www.akitaonrails.com/2015/10/28/personal-thoughts-on-the-cu
       rrent-functional-programming-bandwagon]Personal thoughts on the
       current functional programming bandwagon Despite the name, this
       post actually clarifies some baisc concepts on Functional
       Programming, explains some of the History of FP and the
       implementation of FPs features on imperative languages and talks
       about all the fuss on declarative programming and why it has become
       so popular in the last few years.
     * [http://robotlolita.me/2014/03/20/a-monad-in-practicality-controlli
       ng-time.html]A Monad in Practicality - Controlling Time
     * [http://robotlolita.me/2013/12/08/a-monad-in-practicality-first-cla
       ss-failures.html]A Monad in Practicality - First Class Failures
     * [http://chris-taylor.github.io/blog/2013/02/10/the-algebra-of-algeb
       raic-data-types/]The Algebra of Algebraic Data Types
     * [http://www.haskellforall.com/2014/10/how-to-desugar-haskell-code.h
       tml]How to desugar Haskell Code
     * [http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads
       _in_pictures.html]Functors, Applicatives, And Monads In Pictures
     * [http://www.stephendiehl.com/posts/monads.html]Monads Made
       Difficult

Papers

     * [http://lambda-the-ultimate.org/node/1180]Tradeoffs between Unique
       Types and Monads
     * [http://research.microsoft.com/en-us/um/people/simonpj/papers/slpj-
       book-1987/start.htm]The implementation of Functional Programming
       Languages - A paper by Simon Peyton Jones
     * [http://research.microsoft.com/en-us/um/people/simonpj/papers/fd-ch
       r/esop04.pdf]Sound and Decidable Type Inference for Functional
       Dependencies - Another very famous paper on Type Inference by the
       main creator of Haskell and GHC
     * [http://research.microsoft.com/en-us/um/people/simonpj/papers/meta-
       haskell/meta-haskell.pdf]Template Meta-Programming for Haskell -
       Paper about generating code at compile-time in Haskell
     * [http://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf]Why
       Functional Programming Matters
     * [http://isabelle.in.tum.de/%7Ehaftmann/pdf/from_hol_to_haskell_haft
       mann.pdf]From Higher-Order Logic to Haskell: There and Back Again
     * [http://es.cs.uni-kl.de/events/TPHOLs-2007/proceedings/B-178.pdf]Tr
       anslating Haskell to Isabelle

Wikis

     * [http://ncatlab.org/nlab/show/HomePage]nLab - A wiki-lab with
       articles, discussion and tools from the point of view of category
       theory, which is the main math behind FP.
     * [https://en.wikibooks.org/wiki/Haskell/Category_theory]Haskell/Cate
       gory Theory - A good overview on Category Theory applied to Haskell
       from Wikibooks.
     * [https://wiki.haskell.org/Haskell]Haskell Wiki

Books

     * [https://books.google.com.br/books?id=I9E_CgAAQBAJ&pg=PR13#v=onepag
       e&q&f=false]The Little Prover - Talks about a theorem prover called
       JBob for writing proofs in LISP.
     * [http://isabelle.in.tum.de/doc/tutorial.pdf]Isabelle/HOL - A Proof
       Assistant for Higher-Order Logic - A Book on implementing logical
       formalisms in Isabelle/HOL.
     * [http://www.ccs.neu.edu/home/matthias/BTML/]The Little MLer - A
       book focused on teaching types, recursive thinking and other
       important subjects in Standard ML.
     * [http://catalogue.pearsoned.co.uk/educator/product/Introduction-to-
       Programming-using-SML/9780201398205.page]Introduction to
       Programming using SML - Introduces you to programming design in a
       very mathematical way.
     * [http://www.htdp.org/]How to Design Programs /
       [http://www.ccs.neu.edu/home/matthias/HtDP2e/]Second Edition
     * [http://www.amazon.com/Introduction-Functional-Programming-Internat
       ional-Computing/dp/0134841891]Introduction to Functional
       Programming

Communities

     * [http://lambda-the-ultimate.org/]Lambda the Ultimate - Community
       focused on discussing researches, papers and hot topic on academia.
       Very high tech discussion level.
     * [https://www.fpcomplete.com/]FP Complete - Community focused on
       helping companies and students on learning and implementing
       Functional Programming in Haskell. Hosters of one of the most
       famous Haskell learning centers:
       [https://www.schoolofhaskell.com/school]School of Haskell
     * [http://www.haskellers.com/]Haskellers - The meeting point for
       Haskell Programmers

Discussions (Quora, Stack Overflow, Reddit, etc)

     * [https://www.quora.com/Why-dont-more-programmers-use-Haskell]Why
       dont more programmers use Haskell
     * [http://lambda-the-ultimate.org/classic/message1532.html]Hidden
       complexities of tail-call/tail-recursion optimization

Videos

     * [https://www.youtube.com/watch?v=ZhuHCtR3xq8]Dont fear the Monad -
       Explanation on one of the most obscure topics of Functional
       Programming by Microsoft researcher Brian Beckman.
     * [https://www.youtube.com/watch?v=iSmkqocn0oQ]Haskell is useless -
       Simon Peyton Jones being just too humble about his creation.
     * [https://www.youtube.com/watch?v=XxzzJiXHOJs]Brian Beckman: The Zen
       of Stateless State
     * [https://www.youtube.com/watch?v=z0N1aZ6SnBk]Erik Meijer:
       Functional Programming
     * [https://www.youtube.com/watch?v=Mw_Jnn_Y5iA]Scala Monads:
       Declutter Your Code With Monadic Design
     * [https://www.youtube.com/watch?v=9SBR_SnrEiI]Philip Wadler and Erik
       Meijer: On Programming Language Theory and Practice

Lectures

     * [https://www.youtube.com/playlist?list=PLTA0Ta9Qyspa5Nayx0VCHj5AHQJ
       qp1clD]C9 Lectures: Dr. Erik Meijer - Functional Programming
       Fundamentals - Series of Lectures from one of the creators of
       Haskell
     * [https://www.youtube.com/watch?v=6COvD8oynmI&list=RD6COvD8oynmI#t=0
       ]Adventure with types in Haskell - Simon Peyton Jones - Lectures
       about Haskells strong Type System by Simon Peyton Jones.
     * [https://www.youtube.com/watch?v=YScIPA8RbVE]The Algebra of
       Algebraic Data Types - Very good explanation on the relationship
       between math and Algebraic Data Types, which is the Type System of
       some very common FP Languages such as Haskell and ML.

Platforms

     * [Paqmind.com] - Guides and challenges to learn and improve in
       programming. All content is CS and FP oriented.

Tools

     * [https://www.cl.cam.ac.uk/research/hvg/Isabelle/]Isabelle/HOL -
       Generic proof assistant based on Higher Order Logic

Repos

     * [https://github.com/idris-hackers/idris-koans]Idris Koans - Project
       for teaching Idris. A General Purpose Functional Programming with
       Dependent Types
     * [https://github.com/timoxley/functional-javascript-workshop]Functio
       nal Javascript Workshop - A functional Javascript workshop.
     * [https://github.com/the-little-prover/j-bob]J-Bob - The proof
       assistant from the book The Little Prover
     * [https://github.com/olehkuchuk/haskell-must-watch]Haskell Must
       Watch - A list of videos, talks and courses on Haskell.
     * [http://www.it.dtu.dk/introSML/]Intro SML - Code, corrections and
       info on the book: Introduction to Programming using SML
     * [https://github.com/busypeoples/functional-programming-javascript]F
       unctional Programming In JavaScript - List of functional
       programming resources in JavaScript.
     * [https://github.com/hemanth/functional-programming-jargon]Functiona
       l Programming Jargon - Project for providing a glossary for FP, and
       make learning FP easier.

People

     * [http://research.microsoft.com/en-us/people/simonpj/]Simon Peyton
       Jones - One of the creators of the Haskell Language and the Glasgow
       Haskell Compiler. Microsoft Researcher.
     * [http://homepages.inf.ed.ac.uk/wadler/]Philip Wadler - Professor of
       Theoretical Computer Science at the University of Edinburgh, author
       of the famous paper Propositions as Types. One of the main people
       behind Java Generics Types.
     * [http://www.ccs.neu.edu/home/matthias/]Matthias Felleisen - Author
       of many books such as How to Design Programs, and The Little
       Schemer.
     * [https://www.linkedin.com/pub/erik-meijer/0/5ba/924]Erik Meijer -
       Former software architect for Microsoft, Functional Programming
       researcher, gives lectures on FP, Software Design and Reactive
       programming.
     * [https://www.linkedin.com/in/brianbeckman]Brian Beckman - Former
       Microsoft Researcher, actual Software Engineer at Amazon.
       Contributed to implementing FP features to inumerous Microsoft
       technologies such as C#, LINQ and F#

License

   [https://creativecommons.org/publicdomain/zero/1.0/]CC0

   To the extent possible under law, [http://lucasviola.github.io/]Lucas
   Viola has waived all copyright and related or neighboring rights to
   this work.

     * © 2018 GitHub, Inc.
     * [https://github.com/site/terms]Terms
     * [https://github.com/site/privacy]Privacy
     * [https://help.github.com/articles/github-security/]Security
     * [https://status.github.com/]Status
     * [https://help.github.com/]Help

   [https://github.com/]
     * [https://github.com/contact]Contact GitHub
     * [https://developer.github.com/]API
     * [https://training.github.com/]Training
     * [https://shop.github.com/]Shop
     * [https://blog.github.com/]Blog
     * [https://github.com/about]About

   (BUTTON) You can't perform that action at this time.

   You signed in with another tab or window.
   [file://localhost/Users/admin/Pros/sh/awesome/awe_raw/awesome-functiona
   l-programming]Reload to refresh your session. You signed out in another
   tab or window.
   Reload to refresh your session.

   (BUTTON)

   Press h to open a hovercard with more details.
