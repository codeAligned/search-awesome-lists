





<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
  <link rel="dns-prefetch" href="https://assets-cdn.github.com">
  <link rel="dns-prefetch" href="https://avatars0.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars1.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars2.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars3.githubusercontent.com">
  <link rel="dns-prefetch" href="https://github-cloud.s3.amazonaws.com">
  <link rel="dns-prefetch" href="https://user-images.githubusercontent.com/">



  <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://assets-cdn.github.com/assets/frameworks-592c4aa40e940d1b0607a3cf272916ff.css" />
  <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://assets-cdn.github.com/assets/github-96ebb1551fc5dba84c6d2a0fa7b1cfcf.css" />
  
  
  <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://assets-cdn.github.com/assets/site-348211d27070b0d7bb5d31b1ac3d265b.css" />
  

  <meta name="viewport" content="width=device-width">
  
  <title>GitHub - mhinz/vim-galore: All things Vim!</title>
    <meta name="description" content="GitHub is where people build software. More than 27 million people use GitHub to discover, fork, and contribute to over 80 million projects.">
  <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">
  <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
  <meta property="fb:app_id" content="1401488693436528">

    
    <meta property="og:image" content="https://avatars0.githubusercontent.com/u/972014?s=400&amp;v=4" /><meta property="og:site_name" content="GitHub" /><meta property="og:type" content="object" /><meta property="og:title" content="mhinz/vim-galore" /><meta property="og:url" content="https://github.com/mhinz/vim-galore" /><meta property="og:description" content="vim-galore - :mortar_board: All things Vim!" />

  <link rel="assets" href="https://assets-cdn.github.com/">
  
  <meta name="pjax-timeout" content="1000">
  
  <meta name="request-id" content="E30D:5D4F:3133868:58BC3EA:5AD2F7A3" data-pjax-transient>


  

  <meta name="selected-link" value="repo_source" data-pjax-transient>

    <meta name="google-site-verification" content="KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU">
  <meta name="google-site-verification" content="ZzhVyEFwb7w3e0-uOTltm8Jsck2F5StVihD0exw2fsA">
  <meta name="google-site-verification" content="GXs5KoUUkNCoaAZn7wPN-t01Pywp9M3sEjnt_3_ZWPc">
    <meta name="google-analytics" content="UA-3769691-2">

<meta name="octolytics-host" content="collector.githubapp.com" /><meta name="octolytics-app-id" content="github" /><meta name="octolytics-event-url" content="https://collector.githubapp.com/github-external/browser_event" /><meta name="octolytics-dimension-request_id" content="E30D:5D4F:3133868:58BC3EA:5AD2F7A3" /><meta name="octolytics-dimension-region_edge" content="iad" /><meta name="octolytics-dimension-region_render" content="iad" />
<meta name="analytics-location" content="/&lt;user-name&gt;/&lt;repo-name&gt;" data-pjax-transient="true" />




  <meta class="js-ga-set" name="dimension1" content="Logged Out">


  

      <meta name="hostname" content="github.com">
    <meta name="user-login" content="">

      <meta name="expected-hostname" content="github.com">
    <meta name="js-proxy-site-detection-payload" content="MmUwZjRkYmYwYWJlOWMyNWYwYWIxNTBlYjQ3Yzk4MzIzMzdkMmFmNDc3OGMwNWQ4M2U3ZmVkYjk4ZjIyMTI4OXx7InJlbW90ZV9hZGRyZXNzIjoiMTA4LjE2OC4zNS4xOTkiLCJyZXF1ZXN0X2lkIjoiRTMwRDo1RDRGOjMxMzM4Njg6NThCQzNFQTo1QUQyRjdBMyIsInRpbWVzdGFtcCI6MTUyMzc3NTM5NiwiaG9zdCI6ImdpdGh1Yi5jb20ifQ==">

    <meta name="enabled-features" content="UNIVERSE_BANNER,FREE_TRIALS,MARKETPLACE_INSIGHTS,MARKETPLACE_SELF_SERVE,MARKETPLACE_INSIGHTS_CONVERSION_PERCENTAGES">

  <meta name="html-safe-nonce" content="b0f3d244afdd2130e12ce7ecf51785fda8a3a79b">

  <meta http-equiv="x-pjax-version" content="402da7acb22ff2e9e7f63736b021d40d">
  

      <link href="https://github.com/mhinz/vim-galore/commits/master.atom" rel="alternate" title="Recent Commits to vim-galore:master" type="application/atom+xml">

  <meta name="description" content="vim-galore - :mortar_board: All things Vim!">
  <meta name="go-import" content="github.com/mhinz/vim-galore git https://github.com/mhinz/vim-galore.git">

  <meta name="octolytics-dimension-user_id" content="972014" /><meta name="octolytics-dimension-user_login" content="mhinz" /><meta name="octolytics-dimension-repository_id" content="49010787" /><meta name="octolytics-dimension-repository_nwo" content="mhinz/vim-galore" /><meta name="octolytics-dimension-repository_public" content="true" /><meta name="octolytics-dimension-repository_is_fork" content="false" /><meta name="octolytics-dimension-repository_network_root_id" content="49010787" /><meta name="octolytics-dimension-repository_network_root_nwo" content="mhinz/vim-galore" /><meta name="octolytics-dimension-repository_explore_github_marketplace_ci_cta_shown" content="false" />


    <link rel="canonical" href="https://github.com/mhinz/vim-galore" data-pjax-transient>


  <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">

  <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">

  <link rel="mask-icon" href="https://assets-cdn.github.com/pinned-octocat.svg" color="#000000">
  <link rel="icon" type="image/x-icon" class="js-site-favicon" href="https://assets-cdn.github.com/favicon.ico">

<meta name="theme-color" content="#1e2327">



<link rel="manifest" href="/manifest.json" crossOrigin="use-credentials">

  </head>

  <body class="logged-out env-production">
    

  <div class="position-relative js-header-wrapper ">
    <a href="#start-of-content" tabindex="1" class="px-2 py-4 bg-blue text-white show-on-focus js-skip-to-content">Skip to content</a>
    <div id="js-pjax-loader-bar" class="pjax-loader-bar"><div class="progress"></div></div>

    
    
    



        <header class="Header header-logged-out  position-relative f4 py-3" role="banner">
  <div class="container-lg d-flex px-3">
    <div class="d-flex flex-justify-between flex-items-center">
      <a class="header-logo-invertocat my-0" href="https://github.com/" aria-label="Homepage" data-ga-click="(Logged out) Header, go to homepage, icon:logo-wordmark">
        <svg height="32" class="octicon octicon-mark-github" viewBox="0 0 16 16" version="1.1" width="32" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg>
      </a>

    </div>

    <div class="HeaderMenu HeaderMenu--bright d-flex flex-justify-between flex-auto">
        <nav class="mt-0">
          <ul class="d-flex list-style-none">
              <li class="ml-2">
                <a class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:features" data-selected-links="/features /features/project-management /features/code-review /features/project-management /features/integrations /features" href="/features">
                  Features
</a>              </li>
              <li class="ml-4">
                <a class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:business" data-selected-links="/business /business/security /business/customers /business" href="/business">
                  Business
</a>              </li>

              <li class="ml-4">
                <a class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:explore" data-selected-links="/explore /trending /trending/developers /integrations /integrations/feature/code /integrations/feature/collaborate /integrations/feature/ship showcases showcases_search showcases_landing /explore" href="/explore">
                  Explore
</a>              </li>

              <li class="ml-4">
                    <a class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:marketplace" data-selected-links=" /marketplace" href="/marketplace">
                      Marketplace
</a>              </li>
              <li class="ml-4">
                <a class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:pricing" data-selected-links="/pricing /pricing/developer /pricing/team /pricing/business-hosted /pricing/business-enterprise /pricing" href="/pricing">
                  Pricing
</a>              </li>
          </ul>
        </nav>

      <div class="d-flex">
          <div class="d-lg-flex flex-items-center mr-3">
            <div class="header-search scoped-search site-scoped-search js-site-search" role="search">
  <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="js-site-search-form" data-scoped-search-url="/mhinz/vim-galore/search" data-unscoped-search-url="/search" action="/mhinz/vim-galore/search" accept-charset="UTF-8" method="get"><input name="utf8" type="hidden" value="&#x2713;" />
    <label class="form-control header-search-wrapper  js-chromeless-input-container">
          <a class="header-search-scope no-underline" href="/mhinz/vim-galore">This repository</a>
      <input type="text"
        class="form-control header-search-input  js-site-search-focus js-site-search-field is-clearable"
        data-hotkey="s,/"
        name="q"
        value=""
        placeholder="Search"
        aria-label="Search this repository"
        data-unscoped-placeholder="Search GitHub"
        data-scoped-placeholder="Search"
        autocapitalize="off"
        >
        <input type="hidden" class="js-site-search-type-field" name="type" >
    </label>
</form></div>

          </div>

        <span class="d-inline-block">
            <div class="HeaderNavlink px-0 py-2 m-0">
              <a class="text-bold text-white no-underline" href="/login?return_to=%2Fmhinz%2Fvim-galore" data-ga-click="(Logged out) Header, clicked Sign in, text:sign-in">Sign in</a>
                <span class="text-gray">or</span>
                <a class="text-bold text-white no-underline" href="/join?source=header-repo" data-ga-click="(Logged out) Header, clicked Sign up, text:sign-up">Sign up</a>
            </div>
        </span>
      </div>
    </div>
  </div>
</header>

  </div>

  <div id="start-of-content" class="show-on-focus"></div>

    <div id="js-flash-container">
</div>



  <div role="main" class="application-main ">
        <div itemscope itemtype="http://schema.org/SoftwareSourceCode" class="">
    <div id="js-repo-pjax-container" data-pjax-container >
      





  <div class="pagehead repohead instapaper_ignore readability-menu experiment-repo-nav  ">
    <div class="repohead-details-container clearfix container">

      <ul class="pagehead-actions">
  <li>
      <a href="/login?return_to=%2Fmhinz%2Fvim-galore"
    class="btn btn-sm btn-with-count tooltipped tooltipped-n"
    aria-label="You must be signed in to watch a repository" rel="nofollow">
    <svg class="octicon octicon-eye" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.06 2C3 2 0 8 0 8s3 6 8.06 6C13 14 16 8 16 8s-3-6-7.94-6zM8 12c-2.2 0-4-1.78-4-4 0-2.2 1.8-4 4-4 2.22 0 4 1.8 4 4 0 2.22-1.78 4-4 4zm2-4c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z"/></svg>
    Watch
  </a>
  <a class="social-count" href="/mhinz/vim-galore/watchers"
     aria-label="274 users are watching this repository">
    274
  </a>

  </li>

  <li>
      <a href="/login?return_to=%2Fmhinz%2Fvim-galore"
    class="btn btn-sm btn-with-count tooltipped tooltipped-n"
    aria-label="You must be signed in to star a repository" rel="nofollow">
    <svg class="octicon octicon-star" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M14 6l-4.9-.64L7 1 4.9 5.36 0 6l3.6 3.26L2.67 14 7 11.67 11.33 14l-.93-4.74z"/></svg>
    Star
  </a>

    <a class="social-count js-social-count" href="/mhinz/vim-galore/stargazers"
      aria-label="8312 users starred this repository">
      8,312
    </a>

  </li>

  <li>
      <a href="/login?return_to=%2Fmhinz%2Fvim-galore"
        class="btn btn-sm btn-with-count tooltipped tooltipped-n"
        aria-label="You must be signed in to fork a repository" rel="nofollow">
        <svg class="octicon octicon-repo-forked" viewBox="0 0 10 16" version="1.1" width="10" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8 1a1.993 1.993 0 0 0-1 3.72V6L5 8 3 6V4.72A1.993 1.993 0 0 0 2 1a1.993 1.993 0 0 0-1 3.72V6.5l3 3v1.78A1.993 1.993 0 0 0 5 15a1.993 1.993 0 0 0 1-3.72V9.5l3-3V4.72A1.993 1.993 0 0 0 8 1zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3 10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3-10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"/></svg>
        Fork
      </a>

    <a href="/mhinz/vim-galore/network" class="social-count"
       aria-label="355 users forked this repository">
      355
    </a>
  </li>
</ul>

      <h1 class="public ">
  <svg class="octicon octicon-repo" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9H3V8h1v1zm0-3H3v1h1V6zm0-2H3v1h1V4zm0-2H3v1h1V2zm8-1v12c0 .55-.45 1-1 1H6v2l-1.5-1.5L3 16v-2H1c-.55 0-1-.45-1-1V1c0-.55.45-1 1-1h10c.55 0 1 .45 1 1zm-1 10H1v2h2v-1h3v1h5v-2zm0-10H2v9h9V1z"/></svg>
  <span class="author" itemprop="author"><a class="url fn" rel="author" href="/mhinz">mhinz</a></span><!--
--><span class="path-divider">/</span><!--
--><strong itemprop="name"><a data-pjax="#js-repo-pjax-container" href="/mhinz/vim-galore">vim-galore</a></strong>

</h1>

    </div>
    
<nav class="reponav js-repo-nav js-sidenav-container-pjax container"
     itemscope
     itemtype="http://schema.org/BreadcrumbList"
     role="navigation"
     data-pjax="#js-repo-pjax-container">

  <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
    <a class="js-selected-navigation-item selected reponav-item" itemprop="url" data-hotkey="g c" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches repo_packages /mhinz/vim-galore" href="/mhinz/vim-galore">
      <svg class="octicon octicon-code" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z"/></svg>
      <span itemprop="name">Code</span>
      <meta itemprop="position" content="1">
</a>  </span>

    <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
      <a itemprop="url" data-hotkey="g i" class="js-selected-navigation-item reponav-item" data-selected-links="repo_issues repo_labels repo_milestones /mhinz/vim-galore/issues" href="/mhinz/vim-galore/issues">
        <svg class="octicon octicon-issue-opened" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"/></svg>
        <span itemprop="name">Issues</span>
        <span class="Counter">0</span>
        <meta itemprop="position" content="2">
</a>    </span>

  <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
    <a data-hotkey="g p" itemprop="url" class="js-selected-navigation-item reponav-item" data-selected-links="repo_pulls checks /mhinz/vim-galore/pulls" href="/mhinz/vim-galore/pulls">
      <svg class="octicon octicon-git-pull-request" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0 0 10 15a1.993 1.993 0 0 0 1-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v6.56A1.993 1.993 0 0 0 2 15a1.993 1.993 0 0 0 1-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"/></svg>
      <span itemprop="name">Pull requests</span>
      <span class="Counter">0</span>
      <meta itemprop="position" content="3">
</a>  </span>




  <a class="js-selected-navigation-item reponav-item" data-selected-links="repo_graphs repo_contributors dependency_graph pulse /mhinz/vim-galore/pulse" href="/mhinz/vim-galore/pulse">
    <svg class="octicon octicon-graph" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M16 14v1H0V0h1v14h15zM5 13H3V8h2v5zm4 0H7V3h2v10zm4 0h-2V6h2v7z"/></svg>
    Insights
</a>

</nav>


  </div>

<div class="container new-discussion-timeline experiment-repo-nav  ">
  <div class="repository-content ">

    
      <div class="signup-prompt-bg rounded-1">
      <div class="signup-prompt p-4 text-center mb-4 rounded-1">
        <div class="position-relative">
          <!-- '"` --><!-- </textarea></xmp> --></option></form><form action="/site/dismiss_signup_prompt" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="SHpdddogTE0QY7rmVtGIRN8UeazLNNMZN8y6BDAw/7W7oPa2kpMFciXnPH4H8bHbk1kaw0PZ4IJLyXDpdwacZg==" />
            <button type="submit" class="position-absolute top-0 right-0 btn-link link-gray" data-ga-click="(Logged out) Sign up prompt, clicked Dismiss, text:dismiss">
              Dismiss
            </button>
</form>
          <h3 class="pt-2">Join GitHub today</h3>
          <p class="col-6 mx-auto">GitHub is home to over 20 million developers working together to host and review code, manage projects, and build software together.</p>
          <p class="pb-2">
            <a class="btn btn-blue" href="/join?source=prompt-code" data-ga-click="(Logged out) Sign up prompt, clicked Sign up, text:sign-up">Sign up</a>
          </p>
        </div>
      </div>
    </div>


  <div class="js-repo-meta-container">
  <div class="repository-meta mb-0  js-repo-meta-edit js-details-container ">
    <div class="repository-meta-content col-11 mb-1">
          <span class="col-11 text-gray-dark mr-2" itemprop="about">
            
<g-emoji class="g-emoji" alias="mortar_board" fallback-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f393.png">🎓</g-emoji> All things Vim!
          </span>
    </div>

  </div>

    <div class="mb-3 repository-topics-container js-repository-topics-container js-details-container">
      <div id="topics-list-container" data-url="/mhinz/vim-galore/settings/topics">
          <div class="list-topics-container f6 mt-1">
      <a href="/topics/vim" class="topic-tag topic-tag-link" data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:vim">
        vim
      </a>
      <a href="/topics/guide" class="topic-tag topic-tag-link" data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:guide">
        guide
      </a>
      <a href="/topics/awesome" class="topic-tag topic-tag-link" data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:awesome">
        awesome
      </a>
      <a href="/topics/awesome-list" class="topic-tag topic-tag-link" data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:awesome-list">
        awesome-list
      </a>
      <a href="/topics/neovim" class="topic-tag topic-tag-link" data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:neovim">
        neovim
      </a>
      <a href="/topics/viml" class="topic-tag topic-tag-link" data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:viml">
        viml
      </a>
      <a href="/topics/vim-scripts" class="topic-tag topic-tag-link" data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:vim-scripts">
        vim-scripts
      </a>
      <a href="/topics/learn" class="topic-tag topic-tag-link" data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:learn">
        learn
      </a>
      <a href="/topics/help" class="topic-tag topic-tag-link" data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:help">
        help
      </a>
      <a href="/topics/tips" class="topic-tag topic-tag-link" data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:tips">
        tips
      </a>
      <a href="/topics/tricks" class="topic-tag topic-tag-link" data-ga-click="Topic, repository page" data-octo-click="topic_click" data-octo-dimensions="topic:tricks">
        tricks
      </a>
  </div>


      </div>

    </div>
</div>



  <div class="overall-summary overall-summary-bottomless">
    <div class="stats-switcher-viewport js-stats-switcher-viewport">
      <div class="stats-switcher-wrapper">
      <ul class="numbers-summary">
        <li class="commits">
          <a data-pjax href="/mhinz/vim-galore/commits/master">
              <svg class="octicon octicon-history" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8 13H6V6h5v2H8v5zM7 1C4.81 1 2.87 2.02 1.59 3.59L0 2v4h4L2.5 4.5C3.55 3.17 5.17 2.3 7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-.34.03-.67.09-1H.08C.03 7.33 0 7.66 0 8c0 3.86 3.14 7 7 7s7-3.14 7-7-3.14-7-7-7z"/></svg>
              <span class="num text-emphasized">
                349
              </span>
              commits
          </a>
        </li>
        <li>
          <a data-pjax href="/mhinz/vim-galore/branches">
            <svg class="octicon octicon-git-branch" viewBox="0 0 10 16" version="1.1" width="10" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M10 5c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v.3c-.02.52-.23.98-.63 1.38-.4.4-.86.61-1.38.63-.83.02-1.48.16-2 .45V4.72a1.993 1.993 0 0 0-1-3.72C.88 1 0 1.89 0 3a2 2 0 0 0 1 1.72v6.56c-.59.35-1 .99-1 1.72 0 1.11.89 2 2 2 1.11 0 2-.89 2-2 0-.53-.2-1-.53-1.36.09-.06.48-.41.59-.47.25-.11.56-.17.94-.17 1.05-.05 1.95-.45 2.75-1.25S8.95 7.77 9 6.73h-.02C9.59 6.37 10 5.73 10 5zM2 1.8c.66 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2C1.35 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2zm0 12.41c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm6-8c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"/></svg>
            <span class="num text-emphasized">
              1
            </span>
            branch
          </a>
        </li>

        <li>
          <a href="/mhinz/vim-galore/releases">
            <svg class="octicon octicon-tag" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.73 1.73C7.26 1.26 6.62 1 5.96 1H3.5C2.13 1 1 2.13 1 3.5v2.47c0 .66.27 1.3.73 1.77l6.06 6.06c.39.39 1.02.39 1.41 0l4.59-4.59a.996.996 0 0 0 0-1.41L7.73 1.73zM2.38 7.09c-.31-.3-.47-.7-.47-1.13V3.5c0-.88.72-1.59 1.59-1.59h2.47c.42 0 .83.16 1.13.47l6.14 6.13-4.73 4.73-6.13-6.15zM3.01 3h2v2H3V3h.01z"/></svg>
            <span class="num text-emphasized">
              3
            </span>
            releases
          </a>
        </li>

        <li>
            <a href="/mhinz/vim-galore/graphs/contributors">
  <svg class="octicon octicon-organization" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M16 12.999c0 .439-.45 1-1 1H7.995c-.539 0-.994-.447-.995-.999H1c-.54 0-1-.561-1-1 0-2.634 3-4 3-4s.229-.409 0-1c-.841-.621-1.058-.59-1-3 .058-2.419 1.367-3 2.5-3s2.442.58 2.5 3c.058 2.41-.159 2.379-1 3-.229.59 0 1 0 1s1.549.711 2.42 2.088C9.196 9.369 10 8.999 10 8.999s.229-.409 0-1c-.841-.62-1.058-.59-1-3 .058-2.419 1.367-3 2.5-3s2.437.581 2.495 3c.059 2.41-.158 2.38-1 3-.229.59 0 1 0 1s3.005 1.366 3.005 4"/></svg>
    <span class="num text-emphasized">
      33
    </span>
    contributors
</a>

        </li>
          <li>
            <a href="/mhinz/vim-galore/blob/master/LICENSE.txt">
              <svg class="octicon octicon-law" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7 4c-.83 0-1.5-.67-1.5-1.5S6.17 1 7 1s1.5.67 1.5 1.5S7.83 4 7 4zm7 6c0 1.11-.89 2-2 2h-1c-1.11 0-2-.89-2-2l2-4h-1c-.55 0-1-.45-1-1H8v8c.42 0 1 .45 1 1h1c.42 0 1 .45 1 1H3c0-.55.58-1 1-1h1c0-.55.58-1 1-1h.03L6 5H5c0 .55-.45 1-1 1H3l2 4c0 1.11-.89 2-2 2H2c-1.11 0-2-.89-2-2l2-4H1V5h3c0-.55.45-1 1-1h4c.55 0 1 .45 1 1h3v1h-1l2 4zM2.5 7L1 10h3L2.5 7zM13 10l-1.5-3-1.5 3h3z"/></svg>
                CC-BY-SA-4.0
            </a>
          </li>
      </ul>

        <div class="repository-lang-stats">
          <ol class="repository-lang-stats-numbers">
            <li>
                <a href="/mhinz/vim-galore/search?l=vim-script"  data-ga-click="Repository, language stats search click, location:repo overview">
                  <span class="color-block language-color" style="background-color:#199f4b;"></span>
                  <span class="lang">Vim script</span>
                  <span class="percent">100.0%</span>
                </a>
            </li>
          </ol>
        </div>
      </div>
    </div>
  </div>

    <div class="repository-lang-stats-graph js-toggle-lang-stats" title="Click for language details" data-ga-click="Repository, language bar stats toggle, location:repo overview">
      <span class="language-color" aria-label="Vim script 100.0%" style="width:100.0%; background-color:#199f4b;" itemprop="keywords">Vim script</span>
    </div>



  <div class="file-navigation in-mid-page">

    <details class="get-repo-select-menu js-get-repo-select-menu float-right position-relative dropdown-details details-reset">
  <summary class="btn btn-sm btn-primary">
    Clone or download
    <span class="dropdown-caret"></span>
  </summary>
  <div class="position-relative">
    <div class="get-repo-modal dropdown-menu dropdown-menu-sw pb-0 js-toggler-container  js-get-repo-modal">

      <div class="get-repo-modal-options">
          <div class="clone-options https-clone-options">

            <h4 class="mb-1">
              Clone with HTTPS
              <a class="muted-link" href="https://help.github.com/articles/which-remote-url-should-i-use" target="_blank" title="Which remote URL should I use?">
                <svg class="octicon octicon-question" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M6 10h2v2H6v-2zm4-3.5C10 8.64 8 9 8 9H6c0-.55.45-1 1-1h.5c.28 0 .5-.22.5-.5v-1c0-.28-.22-.5-.5-.5h-1c-.28 0-.5.22-.5.5V7H4c0-1.5 1.5-3 3-3s3 1 3 2.5zM7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7z"/></svg>
              </a>
            </h4>
            <p class="mb-2 get-repo-decription-text">
              Use Git or checkout with SVN using the web URL.
            </p>

            <div class="input-group">
  <input type="text" class="form-control input-monospace input-sm js-url-field" value="https://github.com/mhinz/vim-galore.git" aria-label="Clone this repository at https://github.com/mhinz/vim-galore.git" readonly>
  <div class="input-group-button">
    <clipboard-copy
        value="https://github.com/mhinz/vim-galore.git"
        aria-label="Copy to clipboard"
        class="btn btn-sm tooltipped tooltipped-s"
        copied-label="Copied!">
      <svg class="octicon octicon-clippy" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M2 13h4v1H2v-1zm5-6H2v1h5V7zm2 3V8l-3 3 3 3v-2h5v-2H9zM4.5 9H2v1h2.5V9zM2 12h2.5v-1H2v1zm9 1h1v2c-.02.28-.11.52-.3.7-.19.18-.42.28-.7.3H1c-.55 0-1-.45-1-1V4c0-.55.45-1 1-1h3c0-1.11.89-2 2-2 1.11 0 2 .89 2 2h3c.55 0 1 .45 1 1v5h-1V6H1v9h10v-2zM2 5h8c0-.55-.45-1-1-1H8c-.55 0-1-.45-1-1s-.45-1-1-1-1 .45-1 1-.45 1-1 1H3c-.55 0-1 .45-1 1z"/></svg>
    </clipboard-copy>
  </div>
</div>

          </div>

        <div class="mt-2">
          
<a href="/mhinz/vim-galore/archive/master.zip"
   class="btn btn-outline get-repo-btn
"
   rel="nofollow"
   data-ga-click="Repository, download zip, location:repo overview">
  Download ZIP
</a>

        </div>
      </div>

      <div class="js-modal-download-mac py-2 px-3 d-none">
        <h4 class="lh-condensed mb-3">Launching GitHub Desktop<span class="animated-ellipsis-container"><span class="animated-ellipsis">...</span></span></h4>
        <p class="text-gray">If nothing happens, <a href="https://desktop.github.com/">download GitHub Desktop</a> and try again.</p>
        <p><button class="btn-link js-get-repo-modal-download-back">Go back</button></p>
      </div>

      <div class="js-modal-download-windows py-2 px-3 d-none">
        <h4 class="lh-condensed mb-3">Launching GitHub Desktop<span class="animated-ellipsis-container"><span class="animated-ellipsis">...</span></span></h4>
        <p class="text-gray">If nothing happens, <a href="https://desktop.github.com/">download GitHub Desktop</a> and try again.</p>
        <p><button class="btn-link js-get-repo-modal-download-back">Go back</button></p>
      </div>

      <div class="js-modal-download-xcode py-2 px-3 d-none">
        <h4 class="lh-condensed mb-3">Launching Xcode<span class="animated-ellipsis-container"><span class="animated-ellipsis">...</span></span></h4>
        <p class="text-gray">If nothing happens, <a href="https://developer.apple.com/xcode/">download Xcode</a> and try again.</p>
        <p><button class="btn-link js-get-repo-modal-download-back">Go back</button></p>
      </div>

      <div class="js-modal-download-visual-studio py-2 px-3 d-none">
        <h4 class="lh-condensed mb-3">Launching Visual Studio<span class="animated-ellipsis-container"><span class="animated-ellipsis">...</span></span></h4>
        <p class="text-gray">If nothing happens, <a href="https://visualstudio.github.com/">download the GitHub extension for Visual Studio</a> and try again.</p>
        <p><button class="btn-link js-get-repo-modal-download-back">Go back</button></p>
      </div>

    </div>
  </div>
</details>


  <div class="BtnGroup float-right">

    <a href="/mhinz/vim-galore/find/master"
      class="btn btn-sm empty-icon float-right BtnGroup-item"
      data-pjax
      data-hotkey="t"
      data-ga-click="Repository, find file, location:repo overview">
      Find file
    </a>
  </div>

  
<div class="select-menu branch-select-menu js-menu-container js-select-menu float-left">
  <button class=" btn btn-sm select-menu-button js-menu-target css-truncate" data-hotkey="w"
    
    type="button" aria-label="Switch branches or tags" aria-expanded="false" aria-haspopup="true">
      <i>Branch:</i>
      <span class="js-select-button css-truncate-target">master</span>
  </button>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax>

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <svg class="octicon octicon-x js-menu-close" role="img" aria-label="Close" viewBox="0 0 12 16" version="1.1" width="12" height="16"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
        <span class="select-menu-title">Switch branches/tags</span>
      </div>

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="form-control js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" data-filter-placeholder="Filter branches/tags" class="js-select-menu-tab" role="tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" data-filter-placeholder="Find a tag…" class="js-select-menu-tab" role="tab">Tags</a>
            </li>
          </ul>
        </div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches" role="menu">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <a class="select-menu-item js-navigation-item js-navigation-open selected"
               href="/mhinz/vim-galore/tree/master"
               data-name="master"
               data-skip-pjax="true"
               rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                master
              </span>
            </a>
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/mhinz/vim-galore/tree/v1.2"
              data-name="v1.2"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v1.2">
                v1.2
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/mhinz/vim-galore/tree/v1.1"
              data-name="v1.1"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v1.1">
                v1.1
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/mhinz/vim-galore/tree/v1.0"
              data-name="v1.0"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v1.0">
                v1.0
              </span>
            </a>
        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div>

    </div>
  </div>
</div>


        <button type="button" class="btn btn-sm disabled tooltipped tooltipped-n new-pull-request-btn" aria-label="You must be signed in to create a pull request">
          New pull request
        </button>

  <div class="breadcrumb">
    
  </div>
</div>


  

<include-fragment src="/mhinz/vim-galore/tree-commit/a605d459e795f9ab5d482e2bff0c1a0f4a595725" class="commit-tease commit-loader">
  <div class="blank">
    <img alt="" class="loader" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32-EAF2F5.gif" width="16" height="16" />
    Fetching latest commit…
  </div>
  <div class="loader-error">
    Cannot retrieve the latest commit at this time.
  </div>
</include-fragment>


<div class="file-wrap">

  <a class="d-none js-permalink-shortcut" data-hotkey="y" href="/mhinz/vim-galore/tree/a605d459e795f9ab5d482e2bff0c1a0f4a595725">Permalink</a>

  <table class="files js-navigation-container js-active-navigation-container" data-pjax>


    <tbody>
      <tr class="warning include-fragment-error">
        <td class="icon"><svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.865 1.52c-.18-.31-.51-.5-.87-.5s-.69.19-.87.5L.275 13.5c-.18.31-.18.69 0 1 .19.31.52.5.87.5h13.7c.36 0 .69-.19.86-.5.17-.31.18-.69.01-1L8.865 1.52zM8.995 13h-2v-2h2v2zm0-3h-2V6h2v4z"/></svg></td>
        <td class="content" colspan="3">Failed to load latest commit information.</td>
      </tr>

        <tr class="js-navigation-item">
          <td class="icon">
            <svg class="octicon octicon-file-directory" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M13 4H7V3c0-.66-.31-1-1-1H1c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1V5c0-.55-.45-1-1-1zM6 4H1V3h5v1z"/></svg>
            <img width="16" height="16" class="spinner" alt="" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" />
          </td>
          <td class="content">
            <span class="css-truncate css-truncate-target"><a class="js-navigation-open" title="static" id="a81259cef8e959c624df1d456e5d3297-d230f95eaa697c1bccd627b051b812da702079c8" href="/mhinz/vim-galore/tree/master/static">static</a></span>
          </td>
          <td class="message">
            <span class="css-truncate css-truncate-target">
                  <a data-pjax="true" title="contents/ -&gt; static/" class="message" href="/mhinz/vim-galore/commit/e922ee26f553db24879c5b183c8c9e2c677421f8">contents/ -&gt; static/</a>
            </span>
          </td>
          <td class="age">
            <span class="css-truncate css-truncate-target"><time-ago datetime="2017-04-20T00:12:17Z">Apr 20, 2017</time-ago></span>
          </td>
        </tr>
        <tr class="js-navigation-item">
          <td class="icon">
            <svg class="octicon octicon-file" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M6 5H2V4h4v1zM2 8h7V7H2v1zm0 2h7V9H2v1zm0 2h7v-1H2v1zm10-7.5V14c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V2c0-.55.45-1 1-1h7.5L12 4.5zM11 5L8 2H1v12h10V5z"/></svg>
            <img width="16" height="16" class="spinner" alt="" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" />
          </td>
          <td class="content">
            <span class="css-truncate css-truncate-target"><a class="js-navigation-open" title=".travis.yml" id="354f30a63fb0907d4ad57269548329e3-d079d09db9614671c54e0206d4681cbce19b4a07" href="/mhinz/vim-galore/blob/master/.travis.yml">.travis.yml</a></span>
          </td>
          <td class="message">
            <span class="css-truncate css-truncate-target">
                  <a data-pjax="true" title="CI: fix gomali issues" class="message" href="/mhinz/vim-galore/commit/7aa7fb259660a24965c048f11e49a82353e5b73e">CI: fix gomali issues</a>
            </span>
          </td>
          <td class="age">
            <span class="css-truncate css-truncate-target"><time-ago datetime="2017-04-20T17:33:36Z">Apr 20, 2017</time-ago></span>
          </td>
        </tr>
        <tr class="js-navigation-item">
          <td class="icon">
            <svg class="octicon octicon-file" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M6 5H2V4h4v1zM2 8h7V7H2v1zm0 2h7V9H2v1zm0 2h7v-1H2v1zm10-7.5V14c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V2c0-.55.45-1 1-1h7.5L12 4.5zM11 5L8 2H1v12h10V5z"/></svg>
            <img width="16" height="16" class="spinner" alt="" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" />
          </td>
          <td class="content">
            <span class="css-truncate css-truncate-target"><a class="js-navigation-open" title="CODE_OF_CONDUCT.md" id="a1ee87dafebc22cbd96979f1b2b7e837-27ea66bb0eef938b9077d90ac27015809248ff49" href="/mhinz/vim-galore/blob/master/CODE_OF_CONDUCT.md">CODE_OF_CONDUCT.md</a></span>
          </td>
          <td class="message">
            <span class="css-truncate css-truncate-target">
                  <a data-pjax="true" title="Add CoC" class="message" href="/mhinz/vim-galore/commit/6b050f8d33775c5885d2d338eeadd8bd42f8b83b">Add CoC</a>
            </span>
          </td>
          <td class="age">
            <span class="css-truncate css-truncate-target"><time-ago datetime="2017-06-05T15:32:17Z">Jun 5, 2017</time-ago></span>
          </td>
        </tr>
        <tr class="js-navigation-item">
          <td class="icon">
            <svg class="octicon octicon-file" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M6 5H2V4h4v1zM2 8h7V7H2v1zm0 2h7V9H2v1zm0 2h7v-1H2v1zm10-7.5V14c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V2c0-.55.45-1 1-1h7.5L12 4.5zM11 5L8 2H1v12h10V5z"/></svg>
            <img width="16" height="16" class="spinner" alt="" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" />
          </td>
          <td class="content">
            <span class="css-truncate css-truncate-target"><a class="js-navigation-open" title="CONTRIBUTING.md" id="6a3371457528722a734f3c51d9238c13-15561bff0287ddc26e0258579f13c1f289e4a8bc" href="/mhinz/vim-galore/blob/master/CONTRIBUTING.md">CONTRIBUTING.md</a></span>
          </td>
          <td class="message">
            <span class="css-truncate css-truncate-target">
                  <a data-pjax="true" title="CONTRIBUTING: remark about adding plugins

References #117." class="message" href="/mhinz/vim-galore/commit/c5f43043055495418ea24046ab383610717bdacd">CONTRIBUTING: remark about adding plugins</a>
            </span>
          </td>
          <td class="age">
            <span class="css-truncate css-truncate-target"><time-ago datetime="2017-11-04T15:43:34Z">Nov 4, 2017</time-ago></span>
          </td>
        </tr>
        <tr class="js-navigation-item">
          <td class="icon">
            <svg class="octicon octicon-file" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M6 5H2V4h4v1zM2 8h7V7H2v1zm0 2h7V9H2v1zm0 2h7v-1H2v1zm10-7.5V14c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V2c0-.55.45-1 1-1h7.5L12 4.5zM11 5L8 2H1v12h10V5z"/></svg>
            <img width="16" height="16" class="spinner" alt="" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" />
          </td>
          <td class="content">
            <span class="css-truncate css-truncate-target"><a class="js-navigation-open" title="LICENSE.txt" id="61e0bdf7e1b43c5c93d9488b22e04170-fd662a7e6c628e351ccd072bf4a30710d36f4556" itemprop="license" href="/mhinz/vim-galore/blob/master/LICENSE.txt">LICENSE.txt</a></span>
          </td>
          <td class="message">
            <span class="css-truncate css-truncate-target">
                  <a data-pjax="true" title="Add LICENSE.txt" class="message" href="/mhinz/vim-galore/commit/cca865d9edb153c4d5f259eea07709cfde65e1e2">Add LICENSE.txt</a>
            </span>
          </td>
          <td class="age">
            <span class="css-truncate css-truncate-target"><time-ago datetime="2017-06-04T19:02:25Z">Jun 4, 2017</time-ago></span>
          </td>
        </tr>
        <tr class="js-navigation-item">
          <td class="icon">
            <svg class="octicon octicon-file" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M6 5H2V4h4v1zM2 8h7V7H2v1zm0 2h7V9H2v1zm0 2h7v-1H2v1zm10-7.5V14c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V2c0-.55.45-1 1-1h7.5L12 4.5zM11 5L8 2H1v12h10V5z"/></svg>
            <img width="16" height="16" class="spinner" alt="" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" />
          </td>
          <td class="content">
            <span class="css-truncate css-truncate-target"><a class="js-navigation-open" title="PLUGINS.md" id="11a05843727f4edf0ace31f319baca00-71f2c3f5c059d67792db6a1aae13ad26593f8216" href="/mhinz/vim-galore/blob/master/PLUGINS.md">PLUGINS.md</a></span>
          </td>
          <td class="message">
            <span class="css-truncate css-truncate-target">
                  <a data-pjax="true" title="Plugins: add yats.vim" class="message" href="/mhinz/vim-galore/commit/7426f2407ed65de3381c65f278024dda5e7af0f8">Plugins: add yats.vim</a>
            </span>
          </td>
          <td class="age">
            <span class="css-truncate css-truncate-target"><time-ago datetime="2018-04-03T23:13:40Z">Apr 3, 2018</time-ago></span>
          </td>
        </tr>
        <tr class="js-navigation-item">
          <td class="icon">
            <svg class="octicon octicon-file" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M6 5H2V4h4v1zM2 8h7V7H2v1zm0 2h7V9H2v1zm0 2h7v-1H2v1zm10-7.5V14c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V2c0-.55.45-1 1-1h7.5L12 4.5zM11 5L8 2H1v12h10V5z"/></svg>
            <img width="16" height="16" class="spinner" alt="" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" />
          </td>
          <td class="content">
            <span class="css-truncate css-truncate-target"><a class="js-navigation-open" title="README.md" id="04c6e90faac2675aa89e2176d2eec7d8-9354e154d52c88cd613c4d7ae766f1b90f368410" href="/mhinz/vim-galore/blob/master/README.md">README.md</a></span>
          </td>
          <td class="message">
            <span class="css-truncate css-truncate-target">
                  <a data-pjax="true" title="Tips: make &quot;cosmetic changes for colorschemes&quot; clearer

The wording should be a bit clearer now. Also use one of the standard
colorschemes shipped with Vim.

Closes #128" class="message" href="/mhinz/vim-galore/commit/a605d459e795f9ab5d482e2bff0c1a0f4a595725">Tips: make "cosmetic changes for colorschemes" clearer</a>
            </span>
          </td>
          <td class="age">
            <span class="css-truncate css-truncate-target"><time-ago datetime="2018-04-13T11:55:02Z">Apr 13, 2018</time-ago></span>
          </td>
        </tr>
    </tbody>
  </table>

</div>



  <div id="readme" class="readme boxed-group clearfix announce instapaper_body md">
    <h3>
      <svg class="octicon octicon-book" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M3 5h4v1H3V5zm0 3h4V7H3v1zm0 2h4V9H3v1zm11-5h-4v1h4V5zm0 2h-4v1h4V7zm0 2h-4v1h4V9zm2-6v9c0 .55-.45 1-1 1H9.5l-1 1-1-1H2c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h5.5l1 1 1-1H15c.55 0 1 .45 1 1zm-8 .5L7.5 3H2v9h6V3.5zm7-.5H9.5l-.5.5V12h6V3z"/></svg>
      README.md
    </h3>

      <article class="markdown-body entry-content" itemprop="text"><div align="center">
  <br><br><br>
  <a target="_blank" href="https://raw.githubusercontent.com/mhinz/vim-galore/master/static/images/logo-vim-galore.png"><img src="https://raw.githubusercontent.com/mhinz/vim-galore/master/static/images/logo-vim-galore.png" alt="vim-galore logo" style="max-width:100%;"></a>
  <br><br><br><br>
  <div>
    <a href="https://github.com/wsdjeg/vim-galore-zh_cn">
      <img src="https://camo.githubusercontent.com/2ba2a124d07443aa680790bb9f2d10bb09afbb68/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5472616e736c6174696f6e3a2d4368696e6573652d677265792e737667" alt="translation: chinese" data-canonical-src="https://img.shields.io/badge/Translation:-Chinese-grey.svg" style="max-width:100%;">
    </a>
    <a href="http://postd.cc/?s=vim-galore" rel="nofollow">
      <img src="https://camo.githubusercontent.com/97e032eba6c845a19897a286724ee7467c3333c3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5472616e736c6174696f6e3a2d4a6170616e6573652d677265792e737667" alt="tranlsation: japanese" data-canonical-src="https://img.shields.io/badge/Translation:-Japanese-grey.svg" style="max-width:100%;">
    </a>
    <a href="https://github.com/lsrdg/vim-galore">
      <img src="https://camo.githubusercontent.com/d43f323218d645f5484c48192fe0b90de4a8fe97/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5472616e736c6174696f6e3a2d506f72747567756573652d677265792e737667" alt="translation: portuguese" data-canonical-src="https://img.shields.io/badge/Translation:-Portuguese-grey.svg" style="max-width:100%;">
    </a>
    <div>
      <br>
      <sub>Licensed under <a href="https://creativecommons.org/licenses/by-sa/4.0" rel="nofollow">CC BY-SA 4.0</a>.</sub>
    </div>
  </div>
  <br><br>
</div>
<h3><a id="user-content-intro" class="anchor" aria-hidden="true" href="#intro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="#intro-1">Intro</a></h3>
<ul>
<li><a href="#what-is-vim">What is Vim?</a></li>
<li><a href="#the-vim-philosophy">The Vim Philosophy</a></li>
<li><a href="#first-steps">First steps</a></li>
<li><a href="#minimal-vimrc">Minimal vimrc</a></li>
<li><a href="#what-kind-of-vim-am-i-running">What kind of Vim am I running?</a></li>
<li><a href="#cheatsheets">Cheatsheets</a></li>
</ul>
<h3><a id="user-content-basics" class="anchor" aria-hidden="true" href="#basics"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="#basics-1">Basics</a></h3>
<ul>
<li><a href="#buffers-windows-tabs">Buffers, windows, tabs</a></li>
<li><a href="#active-loaded-listed-named-buffers">Active, loaded, listed, named buffers</a></li>
<li><a href="#argument-list">Argument list</a></li>
<li><a href="#mappings">Mappings</a></li>
<li><a href="#mapleader">Mapleader</a></li>
<li><a href="#registers">Registers</a></li>
<li><a href="#ranges">Ranges</a></li>
<li><a href="#marks">Marks</a></li>
<li><a href="#completion">Completion</a></li>
<li><a href="#motions-operators-text-objects">Motions, operators, text objects</a></li>
<li><a href="#autocmds">Autocmds</a></li>
<li><a href="#changelist-jumplist">Changelist, jumplist</a></li>
<li><a href="#undo-tree">Undo tree</a></li>
<li><a href="#quickfix-and-location-lists">Quickfix and location lists</a></li>
<li><a href="#macros">Macros</a></li>
<li><a href="#colorschemes">Colorschemes</a></li>
<li><a href="#folding">Folding</a></li>
<li><a href="#sessions">Sessions</a></li>
<li><a href="#locality">Locality</a></li>
</ul>
<h3><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="#usage-1">Usage</a></h3>
<ul>
<li><a href="#getting-help-offline">Getting help offline</a></li>
<li><a href="#getting-help-offline-alternative">Getting help offline (alternative)</a></li>
<li><a href="#getting-help-online">Getting help online</a></li>
<li><a href="#autocmds-in-practice">Autocmds in practice</a>
<ul>
<li><a href="#user-events">User events</a></li>
<li><a href="#nested-autocmds">Nested autocmds</a></li>
</ul>
</li>
<li><a href="#clipboard">Clipboard</a>
<ul>
<li><a href="#clipboard-usage-windows-macos">Clipboard usage (Windows, macOS)</a></li>
<li><a href="#clipboard-usage-linux-bsd-">Clipboard usage (Linux, BSD, ...)</a></li>
</ul>
</li>
<li><a href="#restore-cursor-position-when-opening-file">Restore cursor position when opening file</a></li>
<li><a href="#temporary-files">Temporary files</a>
<ul>
<li><a href="#backup-files">Backup files</a></li>
<li><a href="#swap-files">Swap files</a></li>
<li><a href="#undo-files">Undo files</a></li>
<li><a href="#viminfo-files">Viminfo files</a></li>
<li><a href="#example-configuration-for-temporary-files">Example configuration for temporary files</a></li>
</ul>
</li>
<li><a href="#editing-remote-files">Editing remote files</a></li>
<li><a href="#managing-plugins">Managing plugins</a></li>
<li><a href="#block-insert">Block insert</a></li>
<li><a href="#running-external-programs-and-using-filters">Running external programs and using filters</a></li>
<li><a href="#cscope">Cscope</a></li>
<li><a href="#matchit">MatchIt</a></li>
<li><a href="#true-colors">True colors</a></li>
</ul>
<h3><a id="user-content-tips" class="anchor" aria-hidden="true" href="#tips"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="#tips-1">Tips</a></h3>
<ul>
<li><a href="#saner-behavior-of-n-and-n">Saner behavior of n and N</a></li>
<li><a href="#saner-command-line-history">Saner command-line history</a></li>
<li><a href="#saner-ctrl-l">Saner CTRL-L</a></li>
<li><a href="#disable-audible-and-visual-bells">Disable audible and visual bells</a></li>
<li><a href="#quickly-move-current-line">Quickly move current line</a></li>
<li><a href="#quickly-add-empty-lines">Quickly add empty lines</a></li>
<li><a href="#quickly-edit-your-macros">Quickly edit your macros</a></li>
<li><a href="#quickly-jump-to-header-or-source-file">Quickly jump to header or source file</a></li>
<li><a href="#quickly-change-font-size-in-gui">Quickly change font size in GUI</a></li>
<li><a href="#change-cursor-style-dependent-on-mode">Change cursor style dependent on mode</a></li>
<li><a href="#dont-lose-selection-when-shifting-sidewards">Don't lose selection when shifting sidewards</a></li>
<li><a href="#reload-a-file-on-saving">Reload a file on saving</a></li>
<li><a href="#smarter-cursorline">Smarter cursorline</a></li>
<li><a href="#faster-keyword-completion">Faster keyword completion</a></li>
<li><a href="#cosmetic-changes-to-colorschemes">Cosmetic changes to colorschemes</a></li>
</ul>
<h3><a id="user-content-commands" class="anchor" aria-hidden="true" href="#commands"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="#commands-1">Commands</a></h3>
<ul>
<li><a href="#global-and-vglobal">:global and :vglobal</a> - Execute a command on all matching lines.</li>
<li><a href="#normal-and-execute">:normal and :execute</a> - The scripting dream team.</li>
<li><a href="#redir-and-execute">:redir and execute()</a> - Capture command output.</li>
</ul>
<h3><a id="user-content-debugging" class="anchor" aria-hidden="true" href="#debugging"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="#debugging-1">Debugging</a></h3>
<ul>
<li><a href="#general-tips">General tips</a></li>
<li><a href="#verbosity">Verbosity</a></li>
<li><a href="#profiling-startup-time">Profiling startup time</a></li>
<li><a href="#profiling-at-runtime">Profiling at runtime</a></li>
<li><a href="#debugging-vim-scripts">Debugging Vim scripts</a></li>
<li><a href="#debugging-syntax-files">Debugging syntax files</a></li>
</ul>
<h3><a id="user-content-miscellaneous" class="anchor" aria-hidden="true" href="#miscellaneous"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="#miscellaneous-1">Miscellaneous</a></h3>
<ul>
<li><a href="#additional-resources">Additional resources</a></li>
<li><a href="#vim-distributions">Vim distributions</a></li>
<li><a href="#standard-plugins">Standard plugins</a></li>
<li><a href="#map-capslock-to-control">Map CapsLock to Control</a></li>
<li><a href="#easter-eggs">Easter eggs</a></li>
<li><a href="#why-hjkl-for-navigation">Why hjkl for navigation?</a></li>
</ul>
<h3><a id="user-content-common-problems" class="anchor" aria-hidden="true" href="#common-problems"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="#common-problems-1">Common problems</a></h3>
<ul>
<li><a href="#editing-small-files-is-slow">Editing small files is slow</a></li>
<li><a href="#editing-huge-files-is-slow">Editing huge files is slow</a></li>
<li><a href="#bracketed-paste-or-why-do-i-have-to-set-paste-all-the-time">Bracketed paste (or why do I have to set 'paste' all the time?)</a></li>
<li><a href="#delays-when-using-escape-key-in-terminal">Delays when using escape key in terminal</a></li>
<li><a href="#function-search-undo">Function search undo</a></li>
</ul>
<h3><a id="user-content-technical-quirks" class="anchor" aria-hidden="true" href="#technical-quirks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="#technical-quirks-1">Technical quirks</a></h3>
<ul>
<li><a href="#newline-used-for-nul">Newline used for NUL</a></li>
</ul>
<h3><a id="user-content-list-of-colorschemes" class="anchor" aria-hidden="true" href="#list-of-colorschemes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="/mhinz/vim-galore/blob/master/PLUGINS.md#colorschemes-1">List of colorschemes</a></h3>
<h3><a id="user-content-list-of-plugins" class="anchor" aria-hidden="true" href="#list-of-plugins"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a href="/mhinz/vim-galore/blob/master/PLUGINS.md">List of plugins</a></h3>
<br>
<h1><a id="user-content-intro-1" class="anchor" aria-hidden="true" href="#intro-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Intro</h1>
<h2><a id="user-content-what-is-vim" class="anchor" aria-hidden="true" href="#what-is-vim"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What is Vim?</h2>
<p><a href="http://www.vim.org" rel="nofollow">Vim</a> is a text editor with a long line of ancestors that
goes back to <a href="https://en.wikipedia.org/wiki/QED_(text_editor)" rel="nofollow">qed</a>. <a href="https://en.wikipedia.org/wiki/Bram_Moolenaar" rel="nofollow">Bram
Moolenaar</a> released it in 1991.</p>
<p>The project is hosted online at <a href="http://www.vim.org/index.php" rel="nofollow">vim.org</a>.</p>
<p>Getting Vim: Use your favourite package manager or visit the <a href="http://www.vim.org/download.php" rel="nofollow">download
page</a> from vim.org.</p>
<p>Discussions and user questions are best done on the
<a href="https://groups.google.com/forum/#!forum/vim_use" rel="nofollow">vim_use</a> mailing list or using
IRC (<a href="https://freenode.net" rel="nofollow">Freenode</a>) in the <code>#vim</code> channel.</p>
<p>Development happens on <a href="https://github.com/vim/vim">GitHub</a>, discussions on the
<a href="https://groups.google.com/forum/#!forum/vim_dev" rel="nofollow">vim_dev</a> mailing list.</p>
<p>Read <a href="http://www.viemu.com/a-why-vi-vim.html" rel="nofollow">Why, oh WHY, do those #?@! nutheads use
vi?</a> to see common misconceptions about
Vim explained.</p>
<h2><a id="user-content-the-vim-philosophy" class="anchor" aria-hidden="true" href="#the-vim-philosophy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Vim Philosophy</h2>
<p>Vim adheres to the modal editing philosophy. This means that it provides
multiple modes and the meaning of keys changes according to the mode. You
navigate files in <em>normal mode</em>, you insert text in <em>insert mode</em>, you select
lines in <em>visual mode</em>, you access commands in <em>command-line mode</em> and so on.
This might sound complicated at first, but has a huge advantage: you don't have
to break your fingers by holding several keys at once, most of the time you
simply press them one after the other. The more common the task, the fewer keys
are needed.</p>
<p>A related concept that works well with modal editing are operators and motions.
<em>Operators</em> start a certain action, e.g. changing, removing, or selecting text.
Afterwards you specify the region of text you want to act on using a <em>motion</em>.
To change everything between parentheses, use <code>ci(</code> (read <em>change inner
parentheses</em>). To remove an entire paragraph of text, use <code>dap</code> (read <em>delete
around paragraph</em>).</p>
<p>If you see advanced Vim users working, you'll notice that they speak the
<em>language of Vim</em> as well as pianists handle their instruments. Complex
operations are done using only a few key presses. They don't even think about it
anymore as <a href="https://en.wikipedia.org/wiki/Muscle_memory" rel="nofollow">muscle memory</a> took
over already. This reduces <a href="https://en.wikipedia.org/wiki/Cognitive_load" rel="nofollow">cognitive
load</a> and helps to focus on the
actual task.</p>
<h2><a id="user-content-first-steps" class="anchor" aria-hidden="true" href="#first-steps"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>First steps</h2>
<p>Vim comes bundled with an interactive tutorial that teaches the most basic
things you need to know about. You can start it from the shell:</p>
<pre><code>$ vimtutor
</code></pre>
<p>Don't be put off by how boring it looks like and work through the exercises. The
editors or IDEs you used before were most probably all non-modal, so working by
switching modes will seem awkward at first, but the more you use Vim, the more
it becomes <a href="https://en.wikipedia.org/wiki/Muscle_memory" rel="nofollow">muscle memory</a>.</p>
<p>Vim was bolted on <a href="https://en.wikipedia.org/wiki/Stevie_(text_editor)" rel="nofollow">Stevie</a>, a
<a href="https://en.wikipedia.org/wiki/Vi" rel="nofollow">vi</a> clone, and supports two operating modes:
"compatible" and "nocompatible". Using Vim in compatible mode means using vi
defaults for all options, opposed to Vim defaults. As long as you didn't create
a user vimrc yet or started Vim with <code>vim -N</code>, compatible mode is assumed! Don't
use Vim in compatible mode. Just don't.</p>
<p>Next steps:</p>
<ol>
<li>Create your own <a href="#minimal-vimrc">vimrc</a>.</li>
<li>Have some <a href="#cheatsheets">cheatsheets</a> ready for the first weeks.</li>
<li>Read through the <a href="#basics-1">basics</a> section to learn what is even possible.</li>
<li>Learn on demand! You never finish learning Vim. If you encounter any
problems, just look for it on the internet. Your problem was solved already.
Vim comes with great documentation and knowing how to navigate it is a must:
<a href="#getting-help-offline">Getting help offline</a>.</li>
<li>Have a look at the <a href="#additional-resources">additional resources</a>.</li>
</ol>
<p>One last advice: Please learn how to use Vim properly before starting to add all
kinds of hyped <a href="#managing-plugins">plugins</a> that only implement features that
Vim already supports natively.</p>
<h2><a id="user-content-minimal-vimrc" class="anchor" aria-hidden="true" href="#minimal-vimrc"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Minimal vimrc</h2>
<p>The user vimrc can be put into <code>~/.vimrc</code> or for the sake of better separation
into <code>~/.vim/vimrc</code>. The latter makes it easy to put the entire configuration
under version control and upload it to, let's say GitHub.</p>
<p>You find many "minimal vimrcs" all over the net, and maybe my version isn't as
minimal as it should be, but it provides a good set of sane settings that I deem
to be useful for starting out.</p>
<p>Eventually you have to read up on all the mentioned settings anyway and decide
for yourself. :-)</p>
<p>So here it is: <a href="/mhinz/vim-galore/blob/master/static/minimal-vimrc.vim">minimal-vimrc</a></p>
<p>In case you're interested, here's
<a href="https://github.com/mhinz/dotfiles/blob/master/.vim/vimrc">my vimrc</a>.</p>
<p><strong>TIP</strong>: Most plugin authors maintain several plugins and also publish their
vimrc on GitHub (often in a repository called "vim-config" or "dotfiles"), so
whenever you find a plugin you like, look up its maintainer's GitHub page and
look through the repositories.</p>
<h2><a id="user-content-what-kind-of-vim-am-i-running" class="anchor" aria-hidden="true" href="#what-kind-of-vim-am-i-running"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What kind of Vim am I running?</h2>
<p>Looking at <code>:version</code> will give you all the information you need to know about
how the currently running Vim binary was compiled.</p>
<p>The first line tells you when the binary was compiled and the version, e.g. 7.4.
One of the next lines states <code>Included patches: 1-1051</code>, which is the patch
level. Thus, your exact Vim version is 7.4.1051.</p>
<p>Another line states something like <code>Tiny version without GUI</code> or <code>Huge version with GUI</code>. The obvious information from that is whether your Vim includes GUI
support, e.g. for starting <code>gvim</code> from the shell or running <code>:gui</code> from Vim
within a terminal emulator. The other important information is the <code>Tiny</code> and
<code>Huge</code>. Vim distinguishes between feature sets called <code>tiny</code>, <code>small</code>, <code>normal</code>,
<code>big</code>, and <code>huge</code>, all enabling different subsets of features.</p>
<p>The majority of <code>:version</code> output is consumed by the feature list itself.
<code>+clipboard</code> means the clipboard feature was compiled in, <code>-clipboard</code> means it
wasn't compiled in.</p>
<p>A few Vim features need to be compiled in for them to work. E.g. for <code>:prof</code> to
work, you need a Vim with a huge feature set, because that set enables the
<code>+profile</code> feature.</p>
<p>If that's not the case and you installed Vim from a package manager, make sure
to install a package called <code>vim-x</code>, <code>vim-x11</code>, <code>vim-gtk</code>, <code>vim-gnome</code> or
similar, since these packages usually come with the huge feature set.</p>
<p>You can also test for the version or features programmatically:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c"><span class="pl-c">"</span> Do something if running at least Vim 7.4.42 with +profile enabled.</span>
<span class="pl-k">if</span> (<span class="pl-smi"><span class="pl-k">v:</span>version</span><span class="pl-k"> &gt; </span><span class="pl-c1">704</span> <span class="pl-k">||</span> <span class="pl-smi"><span class="pl-k">v:</span>version</span> <span class="pl-k">==</span> <span class="pl-c1">704</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-en">has</span>(<span class="pl-s"><span class="pl-pds">'</span>patch42<span class="pl-pds">'</span></span>)) <span class="pl-k">&amp;&amp;</span> <span class="pl-en">has</span>(<span class="pl-s"><span class="pl-pds">'</span>profile<span class="pl-pds">'</span></span>)
<span class="pl-c">  <span class="pl-c">"</span> do stuff</span>
<span class="pl-k">endif</span></pre></div>
<p>Help:</p>
<pre><code>:h :version
:h feature-list
:h +feature-list
:h has-patch
</code></pre>
<h2><a id="user-content-cheatsheets" class="anchor" aria-hidden="true" href="#cheatsheets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cheatsheets</h2>
<ul>
<li><a href="http://people.csail.mit.edu/vgod/vim/vim-cheat-sheet-en.png" rel="nofollow">http://people.csail.mit.edu/vgod/vim/vim-cheat-sheet-en.png</a></li>
<li><a href="https://cdn.shopify.com/s/files/1/0165/4168/files/preview.png" rel="nofollow">https://cdn.shopify.com/s/files/1/0165/4168/files/preview.png</a></li>
<li><a href="http://www.nathael.org/Data/vi-vim-cheat-sheet.svg" rel="nofollow">http://www.nathael.org/Data/vi-vim-cheat-sheet.svg</a></li>
<li><a href="http://michael.peopleofhonoronly.com/vim/vim_cheat_sheet_for_programmers_screen.png" rel="nofollow">http://michael.peopleofhonoronly.com/vim/vim_cheat_sheet_for_programmers_screen.png</a></li>
<li><a href="http://www.rosipov.com/images/posts/vim-movement-commands-cheatsheet.png" rel="nofollow">http://www.rosipov.com/images/posts/vim-movement-commands-cheatsheet.png</a></li>
</ul>
<p>Or quickly open a cheatsheet from within Vim: <a href="https://github.com/lifepillar/vim-cheat40">vim-cheat40</a>.</p>
<h1><a id="user-content-basics-1" class="anchor" aria-hidden="true" href="#basics-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basics</h1>
<h2><a id="user-content-buffers-windows-tabs" class="anchor" aria-hidden="true" href="#buffers-windows-tabs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Buffers, windows, tabs</h2>
<p>Vim is a text editor. Every time text is shown, the text is part of a
<strong>buffer</strong>. Each file will be opened in its own buffer. Plugins show stuff in
their own buffers etc.</p>
<p>Buffers have many attributes, e.g. whether the text it contains is modifiable,
or whether it is associated with a file and thus needs to be synchronized to
disk on saving.</p>
<p><strong>Windows</strong> are viewports <em>onto</em> buffers. If you want to view several files at
the same time or even different locations of the same file, you use windows.</p>
<p>And please, please don't call them <em>splits</em>. You can split a window in two, but
that doesn't make them <em>splits</em>.</p>
<p>Windows can be split vertically or horizontally and the heights and widths of
existing windows can be altered, too. Therefore, you can use whatever window
layout you prefer.</p>
<p>A <strong>tab page</strong> (or just tab) is a collection of windows. Thus, if you want to
use multiple window layouts, use tabs.</p>
<p>Putting it in a nutshell, if you start Vim without arguments, you'll have one
tab page that holds one window that shows one buffer.</p>
<p>By the way, the buffer list is global and you can access any buffer from any
tab.</p>
<h2><a id="user-content-active-loaded-listed-named-buffers" class="anchor" aria-hidden="true" href="#active-loaded-listed-named-buffers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Active, loaded, listed, named buffers</h2>
<p>Run Vim like this <code>vim file1</code>. The file's content will be loaded into a buffer.
You have a <strong>loaded buffer</strong> now. The content of the buffer is only synchronized
to disk (written back to the file) if you save it within Vim.</p>
<p>Since the buffer is also shown in a window, it's also an <strong>active buffer</strong>. Now
if you load another file via <code>:e file2</code>, <code>file1</code> will become a <strong>hidden buffer</strong>
and <code>file2</code> the active one.</p>
<p>Both buffers are also <strong>listed</strong>, thus they will get listed in the output of
<code>:ls</code>. Plugin buffers or help buffers are often marked as unlisted, since
they're not regular files you usually edit with a text editor. Listed and
unlisted buffers can be shown via <code>:ls!</code>.</p>
<p><strong>Unnamed buffers</strong>, also often used by plugins, are buffers that don't have an
associated filename. E.g. <code>:enew</code> will create an unnamed scratch buffer. Add
some text and write it to disk via <code>:w /tmp/foo</code>, and it will become a named
buffer.</p>
<h2><a id="user-content-argument-list" class="anchor" aria-hidden="true" href="#argument-list"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Argument list</h2>
<p>The <a href="#buffers-windows-tabs">global buffer list</a> is a Vim thing. Before that, in
vi, there only used to be the argument list, which is also available in Vim.</p>
<p>Every filename given to Vim on the shell command-line, is remembered in the
argument list. There can be multiple argument lists: by default all arguments
are put into the global argument list, but you can use <code>:arglocal</code> to create a
new argument list that is local to the window.</p>
<p>List the current arguments with <code>:args</code>. Switch between files from the argument
list with <code>:next</code>, <code>:previous</code>, <code>:first</code>, <code>:last</code> and friends. Alter it with
<code>:argadd</code>, <code>:argdelete</code> or <code>:args</code> with a list of files.</p>
<p>If you should prefer using the buffer or argument list for working with files is
a matter of taste. My impression is that most people use the buffer list
exclusively.</p>
<p>Nevertheless, there is one huge use case for the argument list: batch processing
via <code>:argdo</code>! A simple refactoring example:</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">args</span> <span class="pl-k">**</span>/<span class="pl-k">*</span>.[<span class="pl-c1">ch</span>]
:<span class="pl-c1">argdo</span> <span class="pl-k">%</span><span class="pl-c1">s</span><span class="pl-sr">/foo/</span><span class="pl-c1">bar</span>/ge | <span class="pl-c1">update</span></pre></div>
<p>This replaces all occurrences of "foo" by "bar" in all C source and header files
from the current directory and below.</p>
<p>Help: <code>:h argument-list</code></p>
<h2><a id="user-content-mappings" class="anchor" aria-hidden="true" href="#mappings"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mappings</h2>
<p>You can define your own mappings with the <code>:map</code> family of commands. Each
command of that family defines a mapping for a certain set of modes. Technically
Vim comes with a whopping 12 modes, 6 of them can be mapped. Additionally, some
commands act on multiple modes at once.</p>
<table>
<thead>
<tr>
<th>Recursive</th>
<th>Non-recursive</th>
<th>Unmap</th>
<th>Modes</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:map</code></td>
<td><code>:noremap</code></td>
<td><code>:unmap</code></td>
<td>normal, visual, operator-pending</td>
</tr>
<tr>
<td><code>:nmap</code></td>
<td><code>:nnoremap</code></td>
<td><code>:nunmap</code></td>
<td>normal</td>
</tr>
<tr>
<td><code>:xmap</code></td>
<td><code>:xnoremap</code></td>
<td><code>:xunmap</code></td>
<td>visual</td>
</tr>
<tr>
<td><code>:cmap</code></td>
<td><code>:cnoremap</code></td>
<td><code>:cunmap</code></td>
<td>command-line</td>
</tr>
<tr>
<td><code>:omap</code></td>
<td><code>:onoremap</code></td>
<td><code>:ounmap</code></td>
<td>operator-pending</td>
</tr>
<tr>
<td><code>:imap</code></td>
<td><code>:inoremap</code></td>
<td><code>:iunmap</code></td>
<td>insert</td>
</tr></tbody></table>
<p>E.g. this defines the mapping for normal mode only:</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">nmap</span> <span class="pl-c1">&lt;space&gt;</span> :echo <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span><span class="pl-c1">&lt;cr&gt;</span></pre></div>
<p>Unmap it again by using <code>:nunmap &lt;space&gt;</code>.</p>
<p>For a few more but rather uncommon modes (or combinations of them), see <code>:h map-modes</code>.</p>
<p>So far, so good. There's only one problem that can be pretty confusing to
beginners: <code>:nmap</code> is <em>recursive</em>! That is, the right-hand side takes other
mappings into account.</p>
<p>So you defined a mapping that simply echoes "Foo":</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">nmap</span> <span class="pl-c1">b</span> :echo <span class="pl-s"><span class="pl-pds">"</span>Foo<span class="pl-pds">"</span></span><span class="pl-c1">&lt;cr&gt;</span></pre></div>
<p>But what if you want to map the default behavior of <code>b</code> (going one word back) to
another key?</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">nmap</span> <span class="pl-c1">a</span> <span class="pl-c1">b</span></pre></div>
<p>If you hit <kbd>a</kbd>, we expect the cursor to go back a word, but instead
"Foo" is printed in the command-line! Because the right-hand side, <code>b</code>, was
mapped to another action already, namely <code>:echo "Foo"&lt;cr&gt;</code>.</p>
<p>The proper way to resolve this problem is to use a <em>non-recursive</em> mapping
instead:</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">nnoremap</span> <span class="pl-c1">a</span> <span class="pl-c1">b</span></pre></div>
<p>Rule of thumb: Always use non-recursive mappings unless recursing is actually
desired.</p>
<p>Look up your mappings by not giving a right-hand side. E.g. <code>:nmap</code> shows all
normal mappings and <code>:nmap &lt;leader&gt;</code> shows all normal mappings that start with
the mapleader.</p>
<p>If you want to disable a standard mapping, map them to the special <code>&lt;nop&gt;</code>
character, e.g. <code>:noremap &lt;left&gt; &lt;nop&gt;</code>.</p>
<p>Help:</p>
<pre><code>:h key-notation
:h mapping
:h 05.3
</code></pre>
<h2><a id="user-content-mapleader" class="anchor" aria-hidden="true" href="#mapleader"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mapleader</h2>
<p>The mapleader is simply a placeholder than can be used with custom mappings and
is set to <code>\</code> by default.</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">nnoremap</span> <span class="pl-c1">&lt;leader&gt;</span><span class="pl-c1">h</span> :<span class="pl-c1">helpgrep</span><span class="pl-c1">&lt;space&gt;</span></pre></div>
<p>This mapping is triggered by <code>\h</code>. If you want to use <code>&lt;space&gt;h</code> instead:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-k">let</span> mapleader <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span> <span class="pl-pds">'</span></span>
<span class="pl-c1">nnoremap</span> <span class="pl-c1">&lt;leader&gt;</span><span class="pl-c1">h</span> :<span class="pl-c1">helpgrep</span><span class="pl-c1">&lt;space&gt;</span></pre></div>
<p>Moreover, there is <code>&lt;localleader&gt;</code> that is the local counterpart to <code>&lt;leader&gt;</code>
and is supposed to be used for mappings that are local to the buffer, eg.
filetype-specific plugins. It also defaults to <code>\</code>.</p>
<p><strong>Note</strong>: Set the mapleaders before mappings! All leader mappings that are in
effect already, won't change just because the mapleader was changed. <code>:nmap &lt;leader&gt;</code> will show all normal mode leader mappings with the mapleader resolved
already, so use it to double-check your mappings.</p>
<p>See <code>:h mapleader</code> and <code>:h maplocalleader</code> for more.</p>
<h2><a id="user-content-registers" class="anchor" aria-hidden="true" href="#registers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Registers</h2>
<p>Registers are slots that save text. Copying text into a register is called
<strong>yanking</strong> and extracting text from a register is called <strong>pasting</strong>.</p>
<p>Vim provides the following registers:</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Character</th>
<th>Filled by?</th>
<th>Readonly?</th>
<th>Contains text from?</th>
</tr>
</thead>
<tbody>
<tr>
<td>Unnamed</td>
<td><code>"</code></td>
<td>vim</td>
<td>[ ]</td>
<td>Last yank or deletion. (<code>d</code>, <code>c</code>, <code>s</code>, <code>x</code>, <code>y</code>)</td>
</tr>
<tr>
<td>Numbered</td>
<td><code>0</code> to <code>9</code></td>
<td>vim</td>
<td>[ ]</td>
<td>Register <code>0</code>: Last yank. Register <code>1</code>: Last deletion. Register <code>2</code>: Second last deletion. And so on. Think of registers <code>1</code>-<code>9</code> as a read-only <a href="https://en.wikipedia.org/wiki/Queue_(abstract_data_type)" rel="nofollow">queue</a> with 9 elements.</td>
</tr>
<tr>
<td>Small delete</td>
<td><code>-</code></td>
<td>vim</td>
<td>[ ]</td>
<td>Last deletion that was less than one line.</td>
</tr>
<tr>
<td>Named</td>
<td><code>a</code> to <code>z</code>, <code>A</code> to <code>Z</code></td>
<td>user</td>
<td>[ ]</td>
<td>If you yank to register <code>a</code>, you replace its text. If you yank to register <code>A</code>, you append to the text in register <code>a</code>.</td>
</tr>
<tr>
<td>Read-only</td>
<td><code>:</code>, <code>.</code>, <code>%</code></td>
<td>vim</td>
<td>[x]</td>
<td><code>:</code>: Last command, <code>.</code>: Last inserted text, <code>%</code>: Current filename.</td>
</tr>
<tr>
<td>Alternate buffer</td>
<td><code>#</code></td>
<td>vim</td>
<td>[ ]</td>
<td>Most of the time the previously visited buffer of the current window. See <code>:h alternate-file</code></td>
</tr>
<tr>
<td>Expression</td>
<td><code>=</code></td>
<td>user</td>
<td>[ ]</td>
<td>Evaluation of the VimL expression that was yanked. E.g. do this in insert mode: <code>&lt;c-r&gt;=5+5&lt;cr&gt;</code> and "10" will be inserted in the buffer.</td>
</tr>
<tr>
<td>Selection</td>
<td><code>+</code>, <code>*</code></td>
<td>vim</td>
<td>[ ]</td>
<td><code>*</code> and <code>+</code> are the <a href="#clipboard">clipboard</a> registers.</td>
</tr>
<tr>
<td>Drop</td>
<td><code>~</code></td>
<td>vim</td>
<td>[x]</td>
<td>From last drag'n'drop.</td>
</tr>
<tr>
<td>Black hole</td>
<td><code>_</code></td>
<td>vim</td>
<td>[ ]</td>
<td>If you don't want any other registers implicitly affected. E.g. <code>"_dd</code> deletes the current line without affecting registers <code>"</code>, <code>1</code>, <code>+</code>, <code>*</code>.</td>
</tr>
<tr>
<td>Last search pattern</td>
<td><code>/</code></td>
<td>vim</td>
<td>[ ]</td>
<td>Last pattern used with <code>/</code>, <code>?</code>, <code>:global</code>, etc.</td>
</tr></tbody></table>
<p>Each register that is not readonly can be set by the user:</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-k">let</span> <span class="pl-smi">@/</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>register<span class="pl-pds">'</span></span></pre></div>
<p>Afterwards <kbd>n</kbd> would jump to the next occurrence of "register".</p>
<p>There are numerous exceptions when registers get implicitly filled, so be sure
to read <code>:h registers</code>.</p>
<p>Yank with <code>y</code> and paste with <code>p</code>/<code>P</code>, but mind that Vim distinguishes between
characterwise and linewise visual selections. See <code>:h linewise</code>.</p>
<p><strong>Example: linewise</strong></p>
<p><code>yy</code> (or just <code>Y</code>) yanks the current line, move the cursor somewhere else, use
<code>p</code> to paste below the current line <code>P</code> for pasting above it.</p>
<p><strong>Example: charwise</strong></p>
<p>Yank the first word with <code>0yw</code>, move somewhere else, paste after the cursor on
the current line with <code>p</code> and before the cursor with <code>P</code>.</p>
<p><strong>Example: explicit naming of register</strong></p>
<p><code>"aY</code> yanks the current line into register <code>a</code>. Move to another line. <code>"AY</code>
appends the current line to register <code>a</code>.</p>
<p>I suggest playing around with all these registers a bit and constantly checking
<code>:reg</code>, so you can see what's actually happening.</p>
<p><strong>Fun fact</strong>: In Emacs "yanking" stands for pasting (or <em>reinserting previously
killed text</em>) not copying.</p>
<h2><a id="user-content-ranges" class="anchor" aria-hidden="true" href="#ranges"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Ranges</h2>
<p>Ranges are pretty easy to understand, but many Vimmers don't know about their
full potential.</p>
<ul>
<li>Many commands take ranges.</li>
<li>An address denotes a certain line.</li>
<li>A range is either a single address or a pair of addresses separated by either
<code>,</code> or <code>;</code>.</li>
<li>Ranges tell commands which lines to act on.</li>
<li>Most commands act only on the current line by default. Notable exceptions are
<code>:write</code> and <code>:global</code> which act on all lines.</li>
</ul>
<p>The usage of ranges is pretty intuitive, so here are some examples (using <code>:d</code>
as short form of <code>:delete</code>):</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>Lines acted on</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:d</code></td>
<td>Current line.</td>
</tr>
<tr>
<td><code>:.d</code></td>
<td>Current line.</td>
</tr>
<tr>
<td><code>:1d</code></td>
<td>First line.</td>
</tr>
<tr>
<td><code>:$d</code></td>
<td>Last line.</td>
</tr>
<tr>
<td><code>:1,$d</code></td>
<td>All lines.</td>
</tr>
<tr>
<td><code>:%d</code></td>
<td>All lines (syntactic sugar for <code>1,$</code>).</td>
</tr>
<tr>
<td><code>:.,5d</code></td>
<td>Current line to line 5.</td>
</tr>
<tr>
<td><code>:,5d</code></td>
<td>Also current line to line 5.</td>
</tr>
<tr>
<td><code>:,+3d</code></td>
<td>Current line and the next 3 lines.</td>
</tr>
<tr>
<td><code>:1,+3d</code></td>
<td>First line to current line + 3.</td>
</tr>
<tr>
<td><code>:,-3d</code></td>
<td>Current line and the last 3 lines. (Vim will prompt you, since this is a reversed range.)</td>
</tr>
<tr>
<td><code>:3,'xdelete</code></td>
<td>Lines 3 to the line marked by <a href="#marks">mark</a> x.</td>
</tr>
<tr>
<td><code>:/^foo/,$delete</code></td>
<td>From the next line that starts with "foo" to the end.</td>
</tr>
<tr>
<td><code>:/^foo/+1,$delete</code></td>
<td>From the line after the line that starts with "foo" to the end.</td>
</tr></tbody></table>
<p>Note that instead of <code>,</code>, <code>;</code> can be used as a separator. The difference is that
in the case of <code>from,to</code>, the <em>to</em> is relative to the current line, but when
using <code>from;to</code>, the <em>to</em> is relative to the address of <em>from</em>! Assuming you're
on line 5, <code>:1,+1d</code> would delete lines 1 to 6, whereas <code>:1;+1d</code> would only
delete lines 1 and 2.</p>
<p>The <code>/</code> address can be preceded with another address. This allows you to <em>stack</em>
patterns, e.g.:</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-sr">/foo//bar//quux/</span><span class="pl-c1">d</span></pre></div>
<p>This would delete the first line containing "quux" after the first line
containing "bar" after the first line containing "foo" after the current line.</p>
<p>Sometimes Vim automatically prepends the command-line with a range. E.g. start a
visual line selection with <code>V</code>, select some lines and type <code>:</code>. The command-line
will be populated with the range <code>'&lt;,'&gt;</code>, which means the following command will
use the previously selected lines as a range. (This is also why you sometimes
see mappings like <code>:vnoremap foo :&lt;c-u&gt;command</code>. Here <code>&lt;c-u&gt;</code> is used to remove
the range, because Vim will throw an error when giving a range to a command that
doesn't support it.)</p>
<p>Another example is using <code>!!</code> in normal mode. This will populate the
command-line with <code>:.!</code>. If followed by an external program, that program's
output would replace the current line. So you could replace the current
paragraph with the output of ls by using <code>:?^$?+1,/^$/-1!ls</code>. Fancy!</p>
<p>Help:</p>
<pre><code>:h cmdline-ranges
:h 10.3
</code></pre>
<h2><a id="user-content-marks" class="anchor" aria-hidden="true" href="#marks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Marks</h2>
<p>You use marks to remember a position, that is line number and column, in a file.</p>
<table>
<thead>
<tr>
<th>Marks</th>
<th>Set by..</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>a</code> - <code>z</code></td>
<td>User</td>
<td>Local to file, thus only valid within one file. Jumping to a lowercase mark, means jumping within the current file.</td>
</tr>
<tr>
<td><code>A</code> - <code>Z</code></td>
<td>User</td>
<td>Global, thus valid between files. Also called <em>file marks</em>. Jumping to a file mark may switch to another buffer.</td>
</tr>
<tr>
<td><code>0</code> - <code>9</code></td>
<td>viminfo</td>
<td><code>0</code> is the position when the viminfo file was written last. In practice this means when the last Vim process ended. <code>1</code> is the position of when the second last Vim process ended and so on.</td>
</tr></tbody></table>
<p>Put <code>'</code>/<code>g'</code> or <code>`</code>/<code>g`</code> in front of a mark to form a motion.</p>
<p>Use <code>mm</code> to remember the current position with mark "m". Move around the file
and then jump back via <code>'m</code> (first non-blank) or <code>`m</code> (exact column).
Lowercase marks will be remembered after exiting Vim, if you tell your viminfo
file to do so, see <code>:h viminfo-'</code>.</p>
<p>Use <code>mM</code> to remember the current position with file mark "M". Switch to another
buffer and switch back via <code>'M</code> or <code>`M</code>.</p>
<p>Other motions include:</p>
<table>
<thead>
<tr>
<th>Motion</th>
<th>Jump to..</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>'[</code>, <code>`[</code></td>
<td>First line or character of previously changed or yanked text.</td>
</tr>
<tr>
<td><code>']</code>, <code>`]</code></td>
<td>Last line or character of previously changed or yanked text.</td>
</tr>
<tr>
<td><code>'&lt;</code>, <code>`&lt;</code></td>
<td>Beginning line or character of last visual selection.</td>
</tr>
<tr>
<td><code>'&gt;</code>, <code>`&gt;</code></td>
<td>Ending line or character of last visual selection.</td>
</tr>
<tr>
<td><code>''</code>, <code>``</code></td>
<td>Position before the latest jump.</td>
</tr>
<tr>
<td><code>'"</code>, <code>`"</code></td>
<td>Position when last exiting the current buffer.</td>
</tr>
<tr>
<td><code>'^</code>, <code>`^</code></td>
<td>Position where last insertion stopped.</td>
</tr>
<tr>
<td><code>'.</code>, <code>`.</code></td>
<td>Position where last change was made.</td>
</tr>
<tr>
<td><code>'(</code>, <code>`(</code></td>
<td>Start of current sentence.</td>
</tr>
<tr>
<td><code>')</code>, <code>`)</code></td>
<td>End of current sentence.</td>
</tr>
<tr>
<td><code>'{</code>, <code>`{</code></td>
<td>Start of current paragraph.</td>
</tr>
<tr>
<td><code>'}</code>, <code>`}</code></td>
<td>End of current paragraph.</td>
</tr></tbody></table>
<p>Marks can also be used in a <a href="#ranges">range</a>. You probably saw this before and
wondered what it means: Select some text in visual mode and do <code>:</code>, the
command-line will be prepended with <code>:'&lt;,'&gt;</code>, which means the following command
would get a range that denotes the visual selection.</p>
<p>Use <code>:marks</code> to list all marks. Read everything in <code>:h mark-motions</code>.</p>
<h2><a id="user-content-completion" class="anchor" aria-hidden="true" href="#completion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Completion</h2>
<p>Vim provides many kinds of insert mode completions. If there are multiple
matches, a popup menu will let you navigate to the match of your choice.</p>
<p>Typical kinds of completion are tags, functions from imported modules or
libraries, file names, dictionary or simply words from the current buffer.</p>
<p>Vim provides a mapping for each kind of completion and they all start with
<code>&lt;c-x&gt;</code> (remember to use them in insert mode):</p>
<table>
<thead>
<tr>
<th>Mapping</th>
<th>Kind</th>
<th>Help</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;c-x&gt;&lt;c-l&gt;</code></td>
<td>whole lines</td>
<td><code>:h i^x^l</code></td>
</tr>
<tr>
<td><code>&lt;c-x&gt;&lt;c-n&gt;</code></td>
<td>keywords from current file</td>
<td><code>:h i^x^n</code></td>
</tr>
<tr>
<td><code>&lt;c-x&gt;&lt;c-k&gt;</code></td>
<td>keywords from <code>'dictionary'</code> option</td>
<td><code>:h i^x^k</code></td>
</tr>
<tr>
<td><code>&lt;c-x&gt;&lt;c-t&gt;</code></td>
<td>keywords from <code>'thesaurus'</code> option</td>
<td><code>:h i^x^t</code></td>
</tr>
<tr>
<td><code>&lt;c-x&gt;&lt;c-i&gt;</code></td>
<td>keywords from current and included files</td>
<td><code>:h i^x^i</code></td>
</tr>
<tr>
<td><code>&lt;c-x&gt;&lt;c-]&gt;</code></td>
<td>tags</td>
<td><code>:h i^x^]</code></td>
</tr>
<tr>
<td><code>&lt;c-x&gt;&lt;c-f&gt;</code></td>
<td>file names</td>
<td><code>:h i^x^f</code></td>
</tr>
<tr>
<td><code>&lt;c-x&gt;&lt;c-d&gt;</code></td>
<td>definitions or macros</td>
<td><code>:h i^x^d</code></td>
</tr>
<tr>
<td><code>&lt;c-x&gt;&lt;c-v&gt;</code></td>
<td>Vim commands</td>
<td><code>:h i^x^v</code></td>
</tr>
<tr>
<td><code>&lt;c-x&gt;&lt;c-u&gt;</code></td>
<td>user defined (as specified in <code>'completefunc'</code>)</td>
<td><code>:h i^x^u</code></td>
</tr>
<tr>
<td><code>&lt;c-x&gt;&lt;c-o&gt;</code></td>
<td>omni completion (as specified in <code>'omnifunc'</code>)</td>
<td><code>:h i^x^o</code></td>
</tr>
<tr>
<td><code>&lt;c-x&gt;s</code></td>
<td>spelling suggestions</td>
<td><code>:h i^Xs</code></td>
</tr></tbody></table>
<p>People might be confused about the difference between user defined completion
and omni completion, but technically they do the same thing. They take a
function that inspects the current position and return a list of suggestions.
User defined completion is defined by the user for their own personal purposes.
(Surprise!) It could be anything. Omni completion is meant for filetype-specific
purposes, like completing struct members or class methods, and is often set by
filetype plugins.</p>
<p>Vim also allows for completing multiple kinds at once by setting the
<code>'complete'</code> option. By default that option includes quite a lot, so be sure to
trim it to your taste. You can trigger this completion by using either <code>&lt;c-n&gt;</code>
(next) and <code>&lt;c-p&gt;</code> (previous), which also happen to be the keys used for
choosing entries in the popup menu. See <code>:h i^n</code> and <code>:h 'complete'</code> for more on
this.</p>
<p>Be sure to check out <code>:h 'completeopt'</code> for configuring the behaviour of the
popup menu. The default is quite sane, but I prefer adding "noselect" as well.</p>
<p>Help:</p>
<pre><code>:h ins-completion
:h popupmenu-keys
:h new-omni-completion
</code></pre>
<h2><a id="user-content-motions-operators-text-objects" class="anchor" aria-hidden="true" href="#motions-operators-text-objects"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Motions, operators, text objects</h2>
<p><strong>Motions</strong> move the cursor. You all know <code>h</code>/<code>j</code>/<code>k</code>/<code>l</code>. Or <code>w</code> and <code>b</code>. Even
<code>/</code> is a motion. They also take a count. <code>2?the&lt;cr&gt;</code> jumps to the second last
occurrence of "the".</p>
<p>See <code>:h navigation</code> and everything below for all available motions.</p>
<p><strong>Operators</strong> act on a region of text, e.g. <code>d</code>, <code>~</code>, <code>gU</code>, <code>&gt;</code> to name just a
few. They get used in two contexts, either in normal or visual mode. In normal
mode, operators come first followed by a motion, e.g. <code>&gt;j</code>. In visual mode,
operators simply act on the selection, e.g. <code>Vjd</code>.</p>
<p>Like motions, operators take a count, e.g. <code>2gUw</code> makes the rest of the current
word and the next one uppercase. Since motions and operators take counts,
<code>2gU2w</code> works just as well and executes <code>gU2w</code> twice.</p>
<p>See <code>:h operator</code> for all available operators. Use <code>:set tildeop</code> to make <code>~</code>
act as an operator.</p>
<p><strong>Text objects</strong> act on the surrounding area, opposed to motions that act into
one direction. Actually they work on objects, e.g. a whole word, a whole
sentence, everything between parentheses, and so on.</p>
<p>Text objects can't be used to move the cursor in normal mode, because even the
most-skilled cursors can't jump into two directions at the same time. It works
in visual mode though, because then one side of the object is already selected
and the cursor simply jumps to the other side.</p>
<p>Text objects start with either <code>i</code> (think <em>inner</em>) or <code>a</code> (think <em>around</em>)
followed by a character denoting the object. With <code>i</code> it only acts on the object
itself, with <code>a</code> on the object plus trailing whitespace. E.g. <code>diw</code> deletes the
current word and <code>ci(</code> changes everything between parentheses.</p>
<p>Text objects take a count. Imagine <code>((( )))</code> and the cursor on or between the
most inner parentheses, then <code>d2a(</code> will remove the 2 inner pairs of parentheses
and everything in between.</p>
<p>See <code>:h text-objects</code> for all available text objects.</p>
<h2><a id="user-content-autocmds" class="anchor" aria-hidden="true" href="#autocmds"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Autocmds</h2>
<p>On many occasions, Vim emits events. You hook into these events by using
autocmds.</p>
<p>You wouldn't use Vim if there weren't autocmds. They're used all the time, even
if you don't notice it. Don't believe me? Check <code>:au</code>, but don't let the output
overwhelm you. These are all the autocmds that are in effect right now!</p>
<p>See <code>:h {event}</code> for a quick overview of all available events and <code>:h autocmd-events-abc</code> for more details.</p>
<p>A typical example would be setting filetype-specific settings:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">autocmd</span> <span class="pl-c1">FileType</span> <span class="pl-c1">ruby</span> <span class="pl-c1">setlocal</span> <span class="pl-c1">shiftwidth</span><span class="pl-k">=</span><span class="pl-c1">2</span> <span class="pl-c1">softtabstop</span><span class="pl-k">=</span><span class="pl-c1">2</span> <span class="pl-c1">comments</span><span class="pl-k">-</span><span class="pl-k">=</span>:#</pre></div>
<p>But how does a buffer even know that it contains Ruby code? Because another
autocmd detected it as that and set the filetype accordingly which again
triggered the <code>FileType</code> event.</p>
<p>One of the first things everyone adds to their vimrc is <code>filetype on</code>. This
simply means that <code>filetype.vim</code> is read at startup which sets autocmds for
almost all filetypes under the sun.</p>
<p>If you're brave enough, have a look at it: <code>:e $VIMRUNTIME/filetype.vim</code>. Search
for "Ruby" and you'll find that Vim simply uses the file extension <code>.rb</code> to
detect Ruby files:</p>
<p><strong>NOTE</strong>: Autocmds of the same event are executed in the order they were
created. <code>:au</code> shows them in the correct order.</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">au</span> <span class="pl-c1">BufNewFile</span>,<span class="pl-c1">BufRead</span> <span class="pl-k">*</span>.rb,<span class="pl-k">*</span>.rbw  <span class="pl-c1">setf</span> <span class="pl-c1">ruby</span></pre></div>
<p>The <code>BufNewFile</code> and <code>BufRead</code> events in this case are hardcoded in the C
sources of Vim and get emitted everytime you open a file via <code>:e</code> and similar
commands. Afterwards all the hundreds of filetypes from <code>filetype.vim</code> are
tested for.</p>
<p>Putting it in a nutshell, Vim makes heavy use of events and autocmds but also
exposes a clean interface to hook into that event-driven system for
customization.</p>
<p>Help: <code>:h autocommand</code></p>
<h2><a id="user-content-changelist-jumplist" class="anchor" aria-hidden="true" href="#changelist-jumplist"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Changelist, jumplist</h2>
<p>The positions of the last 100 changes are kept in the <strong>changelist</strong>. Several
small changes on the same line will be merged together, but the position will be
that of the last change nevertheless (in case you added something in the middle
of the line).</p>
<p>Every time you jump, the position <em>before</em> the jump is remembered in the
<strong>jumplist</strong>. A jumplist has up to 100 entries. Each window has its own
jumplist. When you split a window, the jumplist is copied.</p>
<p>A jump is one of the following commands: <code>'</code>, <code>`</code>, <code>G</code>, <code>/</code>, <code>?</code>, <code>n</code>, <code>N</code>,
<code>%</code>, <code>(</code>, <code>)</code>, <code>[[</code>, <code>]]</code>, <code>{</code>, <code>}</code>, <code>:s</code>, <code>:tag</code>, <code>L</code>, <code>M</code>, <code>H</code> and commands
that start editing a new file.</p>
<table>
<thead>
<tr>
<th>List</th>
<th>List all entries</th>
<th>Go to older position</th>
<th>Go to newer position</th>
</tr>
</thead>
<tbody>
<tr>
<td>jumplist</td>
<td><code>:jumps</code></td>
<td><code>[count]&lt;c-o&gt;</code></td>
<td><code>[count]&lt;c-i&gt;</code></td>
</tr>
<tr>
<td>changelist</td>
<td><code>:changes</code></td>
<td><code>[count]g;</code></td>
<td><code>[count]g,</code></td>
</tr></tbody></table>
<p>When you list all entries, a marker <code>&gt;</code> will be used to show the current
position. Usually that will be below position 1, the latest position.</p>
<p>If you want both lists to persist after restarting Vim, you need to use the
viminfo file and <code>:h viminfo-'</code>.</p>
<p><strong>NOTE</strong>: The position before the latest jump is also kept as a <a href="#marks">mark</a>
and can be jumped to via <code>``</code> or <code>''</code>.</p>
<p>Help:</p>
<pre><code>:h changelist
:h jumplist
</code></pre>
<h2><a id="user-content-undo-tree" class="anchor" aria-hidden="true" href="#undo-tree"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Undo tree</h2>
<p>The latest changes to the text state are remembered. You can use <em>undo</em> to
revert changes and <em>redo</em> to reapply previously reverted changes.</p>
<p>The important bit to understand it that the data structure holding recent
changes is not a
<a href="https://en.wikipedia.org/wiki/Queue_(abstract_data_type)" rel="nofollow">queue</a> but a
<a href="https://en.wikipedia.org/wiki/Tree_(data_structure)" rel="nofollow">tree</a>! Your changes are
nodes in the tree and each (but the top node) has a parent node. Each node keeps
information about the changed text and time. A branch is a series of nodes that
starts from any node and goes up to the top node. New branches get created when
you undo a change and then insert something else.</p>
<pre><code>ifoo&lt;esc&gt;
obar&lt;esc&gt;
obaz&lt;esc&gt;
u
oquux&lt;esc&gt;
</code></pre>
<p>Now you have 3 lines and the undo tree looks like this:</p>
<pre><code>     foo(1)
       /
    bar(2)
   /      \
baz(3)   quux(4)
</code></pre>
<p>The undo tree has 4 changes. The numbers represent the <em>time</em> the nodes were
created.</p>
<p>Now there are two ways to traverse this tree, let's call them <em>branch-wise</em> and
<em>time-wise</em>.</p>
<p>Undo (<code>u</code>) and redo (<code>&lt;c-r&gt;</code>) work branch-wise. They go up and down the current
branch. <code>u</code> will revert the text state to the one of node "bar". Another <code>u</code>
will revert the text state even further, to the one of node "foo". Now <code>&lt;c-r&gt;</code>
goes back to the state of node "bar" and another <code>&lt;c-r&gt;</code> to the state of node
"quux". (There's no way to reach node "baz" using branch-wise commands anymore.)</p>
<p>Opposed to this, <code>g-</code> and <code>g+</code> work time-wise. Thus, <code>g-</code> won't revert to the
state of node "bar", like <code>u</code> does, but to the chronologically previous state,
node "baz". Another <code>g-</code> would revert the state to the one of node "bar" and so
on. Thus, <code>g-</code> and <code>g+</code> simply go back and forth in time, respectively.</p>
<table>
<thead>
<tr>
<th>Command / Mapping</th>
<th>Action</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[count]u</code>, <code>:undo [count]</code></td>
<td>Undo [count] changes.</td>
</tr>
<tr>
<td><code>[count]&lt;c-r&gt;</code>, <code>:redo</code></td>
<td>Redo [count] changes.</td>
</tr>
<tr>
<td><code>U</code></td>
<td>Undo all changes to the line of the latest change.</td>
</tr>
<tr>
<td><code>[count]g-</code>, <code>:earlier [count]?</code></td>
<td>Go to older text state [count] times. The "?" can be either "s", "m", "h", "d", or "f". E.g. <code>:earlier 2d</code> goes to the text state from 2 days ago. <code>:earlier 1f</code> will go to the state of the latest file save.</td>
</tr>
<tr>
<td><code>[count]g+</code>, <code>:later [count]?</code></td>
<td>Same as above, but other direction.</td>
</tr></tbody></table>
<p>The undo tree is kept in memory and will be lost when Vim quits. See <a href="#handling-backup-swap-undo-and-viminfo-files">Handling
backup, swap, undo, and viminfo
files</a> for how to enable
persistent undo.</p>
<p>If you're confused by the undo tree,
<a href="https://github.com/mbbill/undotree">undotree</a> does a great job at visualizing
it.</p>
<p>Help:</p>
<pre><code>:h undo.txt
:h usr_32
</code></pre>
<h2><a id="user-content-quickfix-and-location-lists" class="anchor" aria-hidden="true" href="#quickfix-and-location-lists"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quickfix and location lists</h2>
<p>The quickfix list is a data structure that holds file positions. Essentially,
each entry in the quickfix list consists of a file path, a line number and
optional column, and a description.</p>
<p>Typical use cases are assembling compiler errors or results of a grep tool.</p>
<p>Vim has a special type of buffer for showing the quickfix list: the quickfix
buffer. Each line in the quickfix buffer shows one entry from the quickfix list.</p>
<p>Usually you open a new window to display the quickfix list: the quickfix window.
When that happens, the last window gets associated with the quickfix window.</p>
<p>In the quickfix buffer <code>&lt;cr&gt;</code> opens the selected entry in the associated window
and <code>&lt;c-w&gt;&lt;cr&gt;</code> in a new window.</p>
<p>The quickfix list was named after the "quick fix" feature from the <a href="https://en.wikipedia.org/wiki/Aztec_C" rel="nofollow">Aztec C
compiler</a>.</p>
<p>Actually there are two kinds of lists: quickfix and location lists. They behave
almost the same, but have the follwing differences:</p>
<ul>
<li>There is only one quickfix list. There can be multiple location lists; one per
window.</li>
<li>They use slightly different commands for navigation.</li>
</ul>
<table>
<thead>
<tr>
<th>Action</th>
<th>Quickfix</th>
<th>Location</th>
</tr>
</thead>
<tbody>
<tr>
<td>open window</td>
<td><code>:copen</code></td>
<td><code>:lopen</code></td>
</tr>
<tr>
<td>close window</td>
<td><code>:cclose</code></td>
<td><code>:lclose</code></td>
</tr>
<tr>
<td>next entry</td>
<td><code>:cnext</code></td>
<td><code>:lnext</code></td>
</tr>
<tr>
<td>previous entry</td>
<td><code>:cprevious</code></td>
<td><code>:lprevious</code></td>
</tr>
<tr>
<td>first entry</td>
<td><code>:cfirst</code></td>
<td><code>:lfirst</code></td>
</tr>
<tr>
<td>last entry</td>
<td><code>:clast</code></td>
<td><code>:llast</code></td>
</tr></tbody></table>
<p>Mind that the quickfix and location windows don't need to be open for these
commands to work.</p>
<p>See <code>:h quickfix</code> for more information and a full list of commands.</p>
<p>For conciseness, <em>quickfix</em> and <em>location</em> are often abbreviated as <em>qf</em> and
<em>loc</em> respectively.</p>
<p><strong>Example</strong>:</p>
<p>Let us use our good old friend <code>grep</code> for searching the files in the current
directory recursively for a certain query and put the results in the quickfix
list.</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-k">let</span> &amp;<span class="pl-c1">grepprg</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>grep -Rn $* .<span class="pl-pds">'</span></span>
:<span class="pl-c1">grep</span><span class="pl-k">!</span> foo
<span class="pl-c1">&lt;grep output - hit enter&gt;</span>
:<span class="pl-c1">copen</span></pre></div>
<p>Assuming any files contained the string "foo", it should be shown now in the
quickfix window.</p>
<h2><a id="user-content-macros" class="anchor" aria-hidden="true" href="#macros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Macros</h2>
<p>Vim allows <em>recording</em> typed characters into a <a href="#registers">register</a>. It's a
great way to automate certain tasks on the fly. (For more elaborate tasks, Vim
scripting should be used instead.)</p>
<ul>
<li>Start recording by typing <code>q</code> followed by the register, e.g. <code>q</code>. (The
command-line will signify this via "recording @q".)</li>
<li>Stop recording by hitting <code>q</code> once again.</li>
<li>Execute the macro via <code>[count]@q</code>.</li>
<li>Repeat the last used macro via <code>[count]@@</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<p>Insert a line and repeat it 10 times:</p>
<pre><code>qq
iabc&lt;cr&gt;&lt;esc&gt;
q
10@q
</code></pre>
<p>(The same could be done without macros: <code>oabc&lt;esc&gt;10.</code>)</p>
<p><strong>Example 2:</strong></p>
<p>For adding line numbers in front of all lines, start on the first line and add
"1. " to it manually. Increment the number under the cursor by using <code>&lt;c-a&gt;</code>,
displayed as <code>^A</code>.</p>
<pre><code>qq
0yf jP0^A
q
1000@q
</code></pre>
<p>Here we simply hope that the file doesn't contain more than 1000 lines when
using <code>1000@q</code>, but we can also use a <em>recursive macro</em>, which executes until
the macro can't be applied to a line anymore:</p>
<pre><code>qq
0yf jP0^A@q
q
@q
</code></pre>
<p>(The same could be done without macros: <code>:%s/^/\=line('.') . '. '</code>)</p>
<p>Mind that I also show how to achieve the same without using macros, but this
mostly works only for such simple examples. For more complex automation, macros
are the bomb!</p>
<p>Also see: <a href="#quickly-edit-your-macros">Quickly edit your macros</a></p>
<p>Help:</p>
<pre><code>:h recording
:h 'lazyredraw'
</code></pre>
<h2><a id="user-content-colorschemes" class="anchor" aria-hidden="true" href="#colorschemes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Colorschemes</h2>
<p>Colorschemes are the way to style your Vim. Vim consists of many components and
each of those can be customized with different colors for the foreground,
background and a few other attributes like bold text etc. They can be set like
this:</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">highlight</span> <span class="pl-c1">Normal</span> ctermbg<span class="pl-k">=</span><span class="pl-c1">1</span> guibg<span class="pl-k">=</span><span class="pl-c1">red</span></pre></div>
<p>This would paint the background of the editor red. See <code>:h :highlight</code> for more
information.</p>
<p>So, colorschemes are mostly collections of <code>:highlight</code> commands.</p>
<p>Actually, most colorschemes are really 2 colorschemes! The example above sets
colors via <code>ctermbg</code> and <code>guibg</code>. The former definition (<code>cterm*</code>) will only be
used if Vim was started in a terminal emulator, e.g. xterm. The latter (<code>gui*</code>)
will be used in graphical environments like gvim or MacVim.</p>
<p>If you ever happen to use a colorscheme in terminal Vim and the colors don't
look like the ones in the screenshot at all, chances are that the colorscheme
only defines colors for the GUI. Conversely, if you use a graphical Vim (e.g.
gvim or MacVim) and the colors look off, the colorscheme might only define
colors for the terminal.</p>
<p>The latter case can be "solved" by enabling true colors in Neovim or Vim
7.4.1830 and newer. This makes terminal Vim use the GUI definitions instead, but
also requires the terminal emulator itself and all software in between (e.g.
tmux) to be capable of handling true colors. (<a href="https://gist.github.com/XVilka/8346728">This
gist</a> gives a good overview about the
topic.)</p>
<p>Help:</p>
<ul>
<li><code>:h 'termguicolors'</code></li>
<li><a href="/mhinz/vim-galore/blob/master/PLUGINS.md#colorschemes-1">List of colorschemes</a></li>
<li><a href="#cosmetic-changes-to-colorschemes">Cosmetic changes to colorschemes</a></li>
</ul>
<h2><a id="user-content-folding" class="anchor" aria-hidden="true" href="#folding"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Folding</h2>
<p>Every text (or source code) has a certain structure. If you have a structure, it
means you have regions of logically separated text. Folding allows to "fold"
such a region into a single line and displaying a short description. There are
many commands that act on these regions called <em>folds</em>. Folds can be nested.</p>
<p>Vim distinguishes between several types of fold methods:</p>
<table>
<thead>
<tr>
<th>'foldmethod'</th>
<th>Usage</th>
</tr>
</thead>
<tbody>
<tr>
<td>diff</td>
<td>Used in diff windows to fold unchanged text.</td>
</tr>
<tr>
<td>expr</td>
<td>Uses <code>'foldexpr'</code> to basically create a new fold method.</td>
</tr>
<tr>
<td>indent</td>
<td>Folds based on indentation.</td>
</tr>
<tr>
<td>manual</td>
<td>Create folds yourself via <code>zf</code>, <code>zF</code>, and <code>:fold</code>.</td>
</tr>
<tr>
<td>marker</td>
<td>Folds based on markers in the text (often in comments).</td>
</tr>
<tr>
<td>syntax</td>
<td>Folds based on syntax, e.g. folding <code>if</code> blocks.</td>
</tr></tbody></table>
<p><strong>NOTE</strong>: Folding can be computationally intensive! If you experience any
performance drawbacks (small delays when typing), have a look at
<a href="https://github.com/Konfekt/FastFold">FastFold</a>, which prevents Vim from
updating folds when it's not needed.</p>
<p>Help:</p>
<pre><code>:h usr_28
:h folds
</code></pre>
<h2><a id="user-content-sessions" class="anchor" aria-hidden="true" href="#sessions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sessions</h2>
<p>If you save a <strong>view</strong> (<code>:h :mkview</code>), the current state of the window (and
options and mappings) gets saved for later use (<code>:h :loadview</code>).</p>
<p>A <strong>session</strong> saves the views of all windows plus global settings. It basically
makes a snapshot of your current Vim instance and saves it in a session file.
Let me stress this: it saves the current state; everything done after saving a
session won't be part of the session file. To "update" a session, simply write
it out again.</p>
<p>This makes it perfect for saving your <em>projects</em> and easy to switch between
them.</p>
<p>Try it right now! Open a few windows and tabs and do <code>:mksession Foo.vim</code>. If
you omit the filename, <code>Session.vim</code> will be assumed. The file will be saved to
the current working directory, check <code>:pwd</code>. Restart Vim and do <code>:source Foo.vim</code> and voilà, the buffer list, window layout, mappings, working directory
etc. should all be the same as before you saved the session. Do some more work
and update the session by overwriting the already existing session file with
<code>:mksession! Foo.vim</code>.</p>
<p>Note that a session file is really just a collection of Vim commands that are
supposed to restore a certain state of a Vim instance, so feel free to take a
look at it: <code>:vs Foo.vim</code>.</p>
<p>You can tell Vim what things to save in a session by setting <code>'sessionoptions'</code>.</p>
<p>For scripting purposes Vim keeps the name of the last sourced or written session
in the internal variable <code>v:this_session</code>.</p>
<p>Help:</p>
<pre><code>:h Session
:h 'sessionoptions'
:h v:this_session
</code></pre>
<h2><a id="user-content-locality" class="anchor" aria-hidden="true" href="#locality"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Locality</h2>
<p>Many of the concepts mentioned above also have <em>local</em> counterparts:</p>
<table>
<thead>
<tr>
<th>Global</th>
<th>Local</th>
<th>Scope</th>
<th>Help</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:set</code></td>
<td><code>:setlocal</code></td>
<td>buffer or window</td>
<td><code>:h local-options</code></td>
</tr>
<tr>
<td><code>:map</code></td>
<td><code>:map &lt;buffer&gt;</code></td>
<td>buffer</td>
<td><code>:h :map-local</code></td>
</tr>
<tr>
<td><code>:autocmd</code></td>
<td><code>:autocmd * &lt;buffer&gt;</code></td>
<td>buffer</td>
<td><code>:h autocmd-buflocal</code></td>
</tr>
<tr>
<td><code>:cd</code></td>
<td><code>:lcd</code></td>
<td>window</td>
<td><code>:h :lcd</code></td>
</tr>
<tr>
<td><code>&lt;leader&gt;</code></td>
<td><code>&lt;localleader&gt;</code></td>
<td>buffer</td>
<td><code>:h maplocalleader</code></td>
</tr></tbody></table>
<p>Variables also sport different scopes, but will be explained in
<a href="http://vimdoc.sourceforge.net/htmldoc/usr_41.html" rel="nofollow">Vim scripting</a>.</p>
<h1><a id="user-content-usage-1" class="anchor" aria-hidden="true" href="#usage-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h1>
<h2><a id="user-content-getting-help-offline" class="anchor" aria-hidden="true" href="#getting-help-offline"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting help offline</h2>
<p>Vim comes with great documentation in the form of single text files with a
special layout. Vim uses a system based on tags for accessing certain parts of
those help files.</p>
<p>First of all, read this: <code>:help :help</code>. This will open the file
<code>$VIMRUNTIME/doc/helphelp.txt</code> in a new window and jump to the <code>:help</code> tag
within that file.</p>
<p>A few simple rules:</p>
<ul>
<li>options are enclosed in single quotes, e.g. <code>:h 'textwidth'</code></li>
<li>VimL functions end in <code>()</code>, e.g. <code>:h reverse()</code></li>
<li>commands start with <code>:</code>, e.g. <code>:h :echo</code></li>
</ul>
<p>You can use <code>&lt;c-d&gt;</code> (this is <kbd>ctrl</kbd>+<kbd>d</kbd>) to list all tags that
match the currently entered query. E.g. <code>:h tab&lt;c-d&gt;</code> will get you a list of all
tags from <code>tab</code> over <code>'softtabstop'</code> to <code>setting-guitablabel</code>.</p>
<p>You want to list all VimL functions? Simple: <code>:h ()&lt;c-d&gt;</code>. You want to list all
VimL functions that concern windows? <code>:h win*()&lt;c-d&gt;</code>.</p>
<p>This quickly becomes second nature, but especially in the beginning, you
sometimes don't know any part of the tag you are looking for. You can only
imagine some keywords that could be involved. <code>:helpgrep</code> to the rescue!</p>
<pre><code>:helpgrep backwards
</code></pre>
<p>This will look for "backwards" in all documentation files and jump to the first
match. The matches will be assembled in the quickfix list. Use <code>:cn</code>/<code>:cp</code> to
jump to the next/previous match. Or use <code>:copen</code> to open the quickfix window,
navigate to an entry and hit <code>&lt;cr&gt;</code> to jump to that match. See <code>:h quickfix</code> for
the whole truth.</p>
<h2><a id="user-content-getting-help-offline-alternative" class="anchor" aria-hidden="true" href="#getting-help-offline-alternative"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting help offline (alternative)</h2>
<p>This list was compiled by @chrisbra, one of the most active Vim developers, and
posted to <a href="https://groups.google.com/forum/#!forum/vim_dev" rel="nofollow">vim_dev</a>.</p>
<p>It's reposted here with minor changes.</p>
<hr>
<p>If you know what you are looking for, it is usually easier to search for it
using the help system, because the subjects follow a certain style guide.</p>
<p>Also, the help has the advantage of belonging to your particular Vim version, so
that obsolete topics or topics that have been added later won't turn up.</p>
<p>Therefore, it is essential to learn the help system and the language it uses.
Here are some examples (not necessarily complete and I might have forgotten
something).</p>
<ol>
<li>
<p>Options are enclosed in single quotes. So you would use <code>:h 'list'</code> to go to
the help topic for the list option. If you only know, you are looking for a
certain option, you can also do <code>:h options.txt</code> to open the help page which
describes all option handling and then you can search using regular
expressions e.g. <code>/width</code>. Certain options have their own namespace, e.g. <code>:h cpo-a</code>, <code>:h cpo-A</code>, <code>:h cpo-b</code>, and so on.</p>
</li>
<li>
<p>Normal mode commands are just that. Use <code>:h gt</code> to go to the help page for
the "gt" command.</p>
</li>
<li>
<p>Regexp items always start with "/", so <code>:h /\+</code> takes you to the help item
for the "+" quantifier in Vim regexes. If you need to know anything about
regular expressions, start reading at <code>:h pattern.txt</code>.</p>
</li>
<li>
<p>Key combinations. They usually start with a single letter indicating the mode
for which they can be used. E.g. <code>:h i_CTRL-X</code> takes you to the family of
CTRL-X commands for insert mode which can be used to auto complete different
things. Note that certain keys will always be written the same, e.g. Control
will always be CTRL. Note, for normal mode commands, the "n" is left away,
e.g. <code>:h CTRL-A</code>. In contrast, <code>:h c_CTRL-R</code> will describe what CTRL-R does
when entering commands in the command line and <code>:h v_Ctrl-A</code> talks about
incrementing numbers in visual mode and <code>:h g_CTRL-A</code> talks about the g
command (thus you have to press "g" then ). Here the "g" stand for
the normal command "g" which always expect a second key before doing
something similar to the commands starting with "z".</p>
</li>
<li>
<p>Registers always start with "quote" so use <code>:h quote</code> to find out about the
special ":" register.</p>
</li>
<li>
<p>Vim script (VimL) is available at <code>:h eval.txt</code>. Certain aspects of the
language are available at <code>:h expr-X</code> where 'X' is a single letter, e.g. <code>:h expr-!</code> will take you to the topic describing the '!' (Not) operator for
VimL. Also important, see <code>:h function-list</code> to find a short description of
all functions available.</p>
</li>
<li>
<p>Mappings are talked about in the help page <code>:h map.txt</code>. Use <code>:h mapmode-i</code>
to find out about the <code>:imap</code> command. Also use <code>:map-topic</code> to find out
about certain subtopics particular for mappings (e.g. <code>:h :map-local</code> for
buffer-local mappings or <code>:h map_bar</code> for how the '|' is handled in mappings.</p>
</li>
<li>
<p>Command definitions are talked about at <code>:h command-*</code>, so use :h command-bar
to find out about the '!' argument for custom commands.</p>
</li>
<li>
<p>Window management commands always start with CTRL-W, so you find the
corresponding help at <code>:h CTRL-W_*</code> (e.g. <code>:h CTRL-W_p</code> for switch to the
previously accessed window). You can also access <code>:h windows.txt</code> and read
your way through, if you are looking for window handling command.</p>
</li>
<li>
<p>Ex commands always start with ":", so <code>:h :s</code> covers the ":s" command.</p>
</li>
<li>
<p>Use CTRL-D after typing a topic and let Vim try to complete to all available
topics.</p>
</li>
<li>
<p>Use <code>:helpgrep</code> to search in all help pages (usually also includes help
pages by installed plugins). See <code>:h :helpgrep</code> for how to use it. Once you
have searched for a topic, all matches are available in the quickfix (or
location) window which can be opened with <code>:copen</code> or <code>:lopen</code>. There you
can also use <code>/</code> to further filter the matches.</p>
</li>
<li>
<p><code>:h helphelp</code> contains some information on how to use the help.</p>
</li>
<li>
<p>The user manual. This describes help topics for beginners in a rather
friendly way. Start at <code>:h usr_toc.txt</code> to find the table of content (as you
might have guessed). Skimming over that help to find certain topics, .e.g
you will find an entry "Digraphs" and "Entering special characters" in
chapter 24 (so use <code>:h usr_24.txt</code> to go to that particular help page).</p>
</li>
<li>
<p>Highlighting groups always start with <code>hl-*</code>. E.g. <code>:h hl-WarningMsg</code> talks
about the "WarningMsg" highlighting group.</p>
</li>
<li>
<p>Syntax highlighting is namespaced to ":syn-topic", e.g. <code>:h :syn-conceal</code>
talks about the conceal argument for the :syn command.</p>
</li>
<li>
<p>Quickfix commands usually start with ":c", while location list commands
usually start with ":l".</p>
</li>
<li>
<p><code>:h BufWinLeave</code> talks about the BufWinLeave autocmd. Also, <code>:h autocommands-events</code> talks about all possible events.</p>
</li>
<li>
<p>Startup arguments always start with "-", so <code>:h -f</code> takes you to the help of
the "-f" command switch of Vim.</p>
</li>
<li>
<p>Compiled extra features always start with "+", so <code>:h +conceal</code> talks about
the conceal support.</p>
</li>
<li>
<p>Error codes can be looked up directly in the help. <code>:h E297</code> takes you
exactly to the description of the error message. Sometimes however, those
error codes are not described, but rather are listed at the Vim command that
usually causes this. E.g. <code>:h hE128</code> takes you directly to the <code>:function</code>
command.</p>
</li>
<li>
<p>Documentation for included syntax files is usually available at <code>:h ft-*-syntax</code>. E.g. <code>:h ft-c-syntax</code> talks about the C syntax file and the
options it provides. Sometimes, additional sections for omni completion (<code>:h ft-php-omni</code>) or filetype plugins (<code>:h ft-tex-plugin</code>) are available.</p>
</li>
</ol>
<p>Also, a link to the user documentation (which describes certain commands more
from a user perspective and less detailed) will be mentioned at the top of help
pages if they are available. So <code>:h pattern.txt</code> mentions the user guide topics
<code>:h 03.9</code> and <code>:h usr_27</code>.</p>
<h2><a id="user-content-getting-help-online" class="anchor" aria-hidden="true" href="#getting-help-online"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting help online</h2>
<p>If you have an issue you can't resolve or are in need of general guidance, see
the <a href="https://groups.google.com/forum/#!forum/vim_use" rel="nofollow">vim_use</a> mailing list.
Another great resource is using
<a href="https://de.wikipedia.org/wiki/Internet_Relay_Chat" rel="nofollow">IRC</a>. The channel <code>#vim</code> on
<a href="https://freenode.net" rel="nofollow">Freenode</a> is huge and usually full of helpful people.</p>
<p>If you want to report a Vim bug, use the
<a href="https://groups.google.com/forum/#!forum/vim_dev" rel="nofollow">vim_dev</a> mailing list.</p>
<h2><a id="user-content-autocmds-in-practice" class="anchor" aria-hidden="true" href="#autocmds-in-practice"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Autocmds in practice</h2>
<p>You can trigger any event right now: <code>:doautocmd BufRead</code>.</p>
<h3><a id="user-content-user-events" class="anchor" aria-hidden="true" href="#user-events"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>User events</h3>
<p>Especially for plugins it's useful to create your own "User" events:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-k">function</span><span class="pl-k">!</span> <span class="pl-en">Chibby</span>()
<span class="pl-c">  <span class="pl-c">"</span> A lot of stuff is happening here.</span>
<span class="pl-c">  <span class="pl-c">"</span> And at last..</span>
  doautocmd <span class="pl-c1">User</span> ChibbyExit
<span class="pl-k">endfunction</span></pre></div>
<p>Now users of your plugin can execute anything when Chibby finishes running:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">autocmd</span> <span class="pl-c1">User</span> ChibbyExit <span class="pl-c1">call</span> <span class="pl-en">ChibbyCleanup</span>()</pre></div>
<p>By the way, if there's no "catching" :autocmd, :doautocmd will output a pesky
"No matching autocommands" message. That's why many plugins use <code>silent doautocmd ...</code> instead. But this has the disadvantage, that you can't simply use
<code>echo "foo"</code> in the :autocmd, you have to use <code>unsilent echo "foo"</code> instead..</p>
<p>That's why it's better to check if there even is a receiving autocmd and not
bothering emitting the event otherwise:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-k">if</span> <span class="pl-en">exists</span>(<span class="pl-s"><span class="pl-pds">'</span>#User#ChibbyExit<span class="pl-pds">'</span></span>)
  doautocmd <span class="pl-c1">User</span> ChibbyExit
<span class="pl-k">endif</span></pre></div>
<p>Help: <code>:h User</code></p>
<h3><a id="user-content-nested-autocmds" class="anchor" aria-hidden="true" href="#nested-autocmds"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Nested autocmds</h3>
<p>By default, autocmds do not nest! If an autocmd executes a command, which in
turn would usually trigger another event, it won't happen.</p>
<p>Let's say every time you start Vim, you want to automatically open your vimrc:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">autocmd</span> <span class="pl-c1">VimEnter</span> <span class="pl-k">*</span> <span class="pl-c1">edit</span> <span class="pl-c1">$MYVIMRC</span></pre></div>
<p>When you now start Vim, it will open your vimrc, but the first thing you'll
notice is that there won't be any highlighting although usually there would be.</p>
<p>The problem is that <code>:edit</code> in your non-nested autocmd won't trigger the
"BufRead" event, so the filetype never gets set to "vim" and
<code>$VIMRUNTIME/syntax/vim.vim</code> never sourced. See <code>:au BufRead *.vim</code>. Use this
instead:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">autocmd</span> <span class="pl-c1">VimEnter</span> <span class="pl-k">*</span> nested <span class="pl-c1">edit</span> <span class="pl-c1">$MYVIMRC</span></pre></div>
<p>Help: <code>:h autocmd-nested</code></p>
<h2><a id="user-content-clipboard" class="anchor" aria-hidden="true" href="#clipboard"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Clipboard</h2>
<p>Required <a href="#what-kind-of-vim-am-i-running">features</a>: <code>+clipboard</code> and optionally
<code>+xterm_clipboard</code> if you want to use the <code>'clipboard'</code> option on a Unix system
with a Vim that doesn't have GUI support.</p>
<p>Help:</p>
<pre><code>:h 'clipboard'
:h gui-clipboard
:h gui-selections
</code></pre>
<p>Also see: <a href="#bracketed-paste-or-why-do-i-have-to-set-paste-all-the-time">Bracketed paste (or why do I have to set 'paste' all the
time?)</a></p>
<h3><a id="user-content-clipboard-usage-windows-macos" class="anchor" aria-hidden="true" href="#clipboard-usage-windows-macos"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Clipboard usage (Windows, macOS)</h3>
<p>Windows comes with a
<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms649012(v=vs.85).aspx" rel="nofollow">clipboard</a>
and macOS comes with a
<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/PasteboardGuide106/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008100-SW1" rel="nofollow">pasteboard</a>.</p>
<p>Both work like most users would expect them to work. You copy selected text with
<code>ctrl+c</code>/<code>cmd+c</code> and paste them in another application with <code>ctrl+v</code>/<code>cmd+v</code>.</p>
<p>Note that copied text is actually transferred to the clipboard, so you can close
the application you copied from before pasting in another application without
problems.</p>
<p>Whenever this happens, the clipboard register <code>*</code> gets filled with the
selection. From Vim use <code>"*y</code> and <code>"*p</code> to yank and paste from the clipboard
respectively.</p>
<p>If you don't even want to specify the <code>*</code> register all the time, put this in
your vimrc:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">set</span> <span class="pl-c1">clipboard</span><span class="pl-k">=</span>unnamed</pre></div>
<p>Usually all yank/delete/put operations fill the <code>"</code> register, now the <code>*</code>
register is used for the same operations, therefore simply <code>y</code> and <code>p</code> will be
enough.</p>
<p>Let me repeat: Using the option above means that every yank/paste, even when
only used in the same Vim window, will alter the clipboard. Decide for yourself
if this is useful or not.</p>
<p>If you're even too lazy to type <code>y</code>, you can send every visual selection to the
clipboard by using these settings:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">set</span> <span class="pl-c1">clipboard</span><span class="pl-k">=</span>unnamed,autoselect
<span class="pl-c1">set</span> <span class="pl-c1">guioptions</span><span class="pl-k">+</span><span class="pl-k">=</span><span class="pl-c1">a</span></pre></div>
<p>Help:</p>
<pre><code>:h clipboard-unnamed
:h autoselect
:h 'go_a'
</code></pre>
<h3><a id="user-content-clipboard-usage-linux-bsd-" class="anchor" aria-hidden="true" href="#clipboard-usage-linux-bsd-"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Clipboard usage (Linux, BSD, ...)</h3>
<p>If your OS uses <a href="http://www.x.org/wiki" rel="nofollow">X</a>, things work a bit different. X
implements the <a href="http://www.x.org/releases/X11R7.7/doc/xproto/x11protocol.html" rel="nofollow">X Window System
Protocol</a> which
happens to be at major version 11 since 1987, hence X is also often called X11.</p>
<p>Prior, in X10, <a href="http://www.x.org/releases/X11R7.7/doc/xorg-docs/icccm/icccm.html#Peer_to_Peer_Communication_by_Means_of_Cut_Buffers" rel="nofollow">cut
buffers</a>
were introduced that kind of worked like a <em>clipboard</em> as in copied text was
actually held by X and it was accessible by all other applications. This
mechanism still exists in X, but its use is deprecated now and most software
doesn't use it anymore.</p>
<p>Nowadays data is transferred between applications by the means of
<a href="http://www.x.org/releases/X11R7.7/doc/xorg-docs/icccm/icccm.html#Peer_to_Peer_Communication_by_Means_of_Selections" rel="nofollow">selections</a>.
From the 3 <em>selection atoms</em> defined, only 2 are used in practice: PRIMARY and
CLIPBOARD.</p>
<p>Selections work roughly like this:</p>
<pre><code>Program A: &lt;ctrl+c&gt;
Program A: assert ownership of CLIPBOARD
Program B: &lt;ctrl+v&gt;
Program B: note that ownership of CLIPBOARD is hold by Program A
Program B: request data from Program A
Program A: respond to request and send data to Program B
Program B: receives data from Program A and inserts it into the window
</code></pre>
<table>
<thead>
<tr>
<th>Selection</th>
<th>When used?</th>
<th>How to paste?</th>
<th>How to access from Vim?</th>
</tr>
</thead>
<tbody>
<tr>
<td>PRIMARY</td>
<td>Selecting text</td>
<td><code>middle-click</code>, <code>shift+insert</code></td>
<td><code>*</code> register</td>
</tr>
<tr>
<td>CLIPBOARD</td>
<td>Selecting text and <code>ctrl+c</code></td>
<td><code>ctrl+v</code></td>
<td><code>+</code> register</td>
</tr></tbody></table>
<p><strong>NOTE</strong>: Selections (no, not even the CLIPBOARD selection) are never kept in
the X server! Thus, you lose the data copied with <code>ctrl+c</code> when the application
closes.</p>
<p>Use <code>"*p</code> to paste the PRIMARY selection or <code>"+y1G</code> to yank the entire file to
the CLIPBOARD selection.</p>
<p>If you happen to access one of the two registers all the time, consider using:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">set</span> <span class="pl-c1">clipboard</span>^<span class="pl-k">=</span>unnamed<span class="pl-c">      <span class="pl-c">"</span> * register</span>
<span class="pl-c"><span class="pl-c">"</span> or</span>
<span class="pl-c1">set</span> <span class="pl-c1">clipboard</span>^<span class="pl-k">=</span>unnamedplus<span class="pl-c">  <span class="pl-c">"</span> + register</span></pre></div>
<p>(The <code>^=</code> is used to prepend to the default value, <code>:h :set^=</code>.)</p>
<p>This will make all yank/delete/put operations use either <code>*</code> or <code>+</code> instead of
the unnamed register <code>"</code>. Afterwards you can simply use <code>y</code> or <code>p</code> for accessing
your chosen X selection.</p>
<p>Help:</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">h</span> <span class="pl-c1">clipboard</span><span class="pl-k">-</span>unnamed
:<span class="pl-c1">h</span> <span class="pl-c1">clipboard</span><span class="pl-k">-</span>unnamedplus</pre></div>
<h2><a id="user-content-restore-cursor-position-when-opening-file" class="anchor" aria-hidden="true" href="#restore-cursor-position-when-opening-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Restore cursor position when opening file</h2>
<p>When you open a file, the cursor will be positioned at line 1, column 1.
Fortunately the viminfo file remembers <a href="#marks">marks</a>. The <code>"</code> mark contains
the position in the buffer where you left off.</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">autocmd</span> <span class="pl-c1">BufReadPost</span> <span class="pl-k">*</span>
    <span class="pl-k">\</span> <span class="pl-k">if</span> <span class="pl-en">line</span>(<span class="pl-s"><span class="pl-pds">"</span>'\"<span class="pl-pds">"</span></span>)<span class="pl-k"> &gt; </span><span class="pl-c1">1</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-en">line</span>(<span class="pl-s"><span class="pl-pds">"</span>'\"<span class="pl-pds">"</span></span>) <span class="pl-k">&lt;=</span> <span class="pl-en">line</span>(<span class="pl-s"><span class="pl-pds">"</span>$<span class="pl-pds">"</span></span>) |
    <span class="pl-k">\</span>   <span class="pl-c1">execute</span> <span class="pl-s"><span class="pl-pds">"</span>normal! g`\"<span class="pl-pds">"</span></span> |
    <span class="pl-k">\</span> <span class="pl-k">endif</span></pre></div>
<p>Read: If the mark <code>"</code> contains a line number greater than line 1 but not greater
than the last line in the file, jump to it.</p>
<pre><code>:h viminfo-'
:h `quote
:h g`
</code></pre>
<h2><a id="user-content-temporary-files" class="anchor" aria-hidden="true" href="#temporary-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Temporary files</h2>
<h3><a id="user-content-backup-files" class="anchor" aria-hidden="true" href="#backup-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Backup files</h3>
<p>Before saving a file, Vim creates a backup file. If writing to disk was
successful, the backup file will be deleted.</p>
<p>With <code>:set backup</code>, the backup will persist. This means, the backup file will
always have the same content as the original file <em>before</em> the most recent save.
It's up to you to decide whether this is useful or not.</p>
<p>You can disable backups entirely with <code>:set nobackup nowritebackup</code>, but you
shouldn't need to nowadays. <code>'writebackup'</code> is a security feature that makes
sure that you don't lose the original file in case saving it should ever fail,
no matter whether you keep the backup file afterwards or not.</p>
<p>If you frequently use Vim to edit huge files, <a href="#editing-huge-files-is-slow">and you probably
shouldn't</a>, you can exclude those from backups with
<code>'backupskip'</code>.</p>
<p>Vim knows different ways to create a backup: <em>copying</em> and <em>renaming</em>.</p>
<ul>
<li><strong>Copying</strong>
<ol>
<li>A full copy of the original file is created and used as backup.</li>
<li>The original file gets emptied and then filled with the content of the
Vim buffer.</li>
</ol>
</li>
<li><strong>Renaming</strong>
<ol>
<li>The original file is renamed to the backup file.</li>
<li>The content of the Vim buffer gets written to a new file with the name of
the original file.</li>
</ol>
</li>
</ul>
<p>See <code>:h 'backupcopy'</code> for all the nitty-gritty details.</p>
<hr>
<p>Demo:</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">set</span> <span class="pl-c1">backup</span> <span class="pl-c1">backupskip</span><span class="pl-k">=</span> <span class="pl-c1">backupdir</span><span class="pl-k">=</span>. <span class="pl-c1">backupext</span><span class="pl-k">=</span><span class="pl-k">-</span><span class="pl-c1">backup</span>
:<span class="pl-c1">e</span> <span class="pl-sr">/tmp/</span>foo
ifoo<span class="pl-c1">&lt;esc&gt;</span>
:<span class="pl-c1">w</span>
<span class="pl-c"><span class="pl-c">"</span> original file gets created, no need for backup file</span>
obar<span class="pl-c1">&lt;esc&gt;</span>
:<span class="pl-c1">w</span>
<span class="pl-c"><span class="pl-c">"</span> backup file is created, original file gets updated</span></pre></div>
<div class="highlight highlight-source-diff"><pre>$ diff -u /tmp/foo-backup /tmp/foo
<span class="pl-md">--- /tmp/foo-backup     2017-04-22 15:05:13.000000000 +0200</span>
<span class="pl-mi1">+++ /tmp/foo    2017-04-22 15:05:25.000000000 +0200</span>
<span class="pl-mdr">@@ -1 +1,2 @@</span>
 foo
<span class="pl-mi1"><span class="pl-mi1">+</span>bar</span></pre></div>
<hr>
<pre><code>:h backup
:h write-fail
</code></pre>
<h3><a id="user-content-swap-files" class="anchor" aria-hidden="true" href="#swap-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Swap files</h3>
<p>When editing a file, unsaved changes get written to a swap file.</p>
<p>Get the name of the current swap file with <code>:swapname</code>. Disable them with <code>:set noswapfile</code>.</p>
<p>A swap file gets updated either all 200 characters or when nothing was typed for
4 seconds. They get deleted when you stop editing the file. You can change these
numbers with <code>:h 'updatecount'</code> and <code>:h 'updatetime'</code>.</p>
<p>If Vim gets killed (e.g. power outage), you lose all changes since the last time
the file was written to disk, but the swap file won't be deleted. Now, if you
edit the file again, Vim will offer the chance to recover the file from the swap
file.</p>
<p>When two people try to edit the same file, the second person will get a notice
that the swap file already exists. It prevents people from trying to save
different versions of a file. If you don't want that behaviour, see <code>:h 'directory'</code>.</p>
<pre><code>:h swap-file
:h usr_11
</code></pre>
<h3><a id="user-content-undo-files" class="anchor" aria-hidden="true" href="#undo-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Undo files</h3>
<p>The <a href="#undo-tree">undo tree</a> is kept in memory and will be lost when Vim quits.
If you want it to persist, <code>:set undofile</code>. This will save the undo file for
<code>~/foo.c</code> in <code>~/foo.c.un~</code>.</p>
<pre><code>:h 'undofile'
:h undo-persistence
</code></pre>
<h3><a id="user-content-viminfo-files" class="anchor" aria-hidden="true" href="#viminfo-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Viminfo files</h3>
<p>When backup, swap, and undo files are all about text state, viminfo files are
used for saving everything else that would otherwise be lost when quitting Vim.
The viminfo file keeps histories (command line, search, input), registers,
marks, buffer list, global variables etc.</p>
<p>By default, the viminfo is written to <code>~/.viminfo</code>.</p>
<pre><code>:h viminfo
:h 'viminfo'
</code></pre>
<h3><a id="user-content-example-configuration-for-temporary-files" class="anchor" aria-hidden="true" href="#example-configuration-for-temporary-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Example configuration for temporary files</h3>
<p>Put all temporary files in their own directory under <code>~/.vim/files</code>:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c"><span class="pl-c">"</span> create directory if needed</span>
<span class="pl-k">if</span> <span class="pl-k">!</span><span class="pl-en">isdirectory</span>(<span class="pl-c1">$HOME</span>.<span class="pl-s"><span class="pl-pds">'</span>/.vim/files<span class="pl-pds">'</span></span>) <span class="pl-k">&amp;&amp;</span> <span class="pl-en">exists</span>(<span class="pl-s"><span class="pl-pds">'</span>*mkdir<span class="pl-pds">'</span></span>)
  <span class="pl-c1">call</span> <span class="pl-en">mkdir</span>(<span class="pl-c1">$HOME</span>.<span class="pl-s"><span class="pl-pds">'</span>/.vim/files<span class="pl-pds">'</span></span>)
<span class="pl-k">endif</span>

<span class="pl-c"><span class="pl-c">"</span> backup files</span>
<span class="pl-c1">set</span> <span class="pl-c1">backup</span>
<span class="pl-c1">set</span> <span class="pl-c1">backupdir</span>   <span class="pl-k">=</span><span class="pl-c1">$HOME</span><span class="pl-sr">/.vim/</span><span class="pl-c1">files</span><span class="pl-sr">/backup/</span>
<span class="pl-c1">set</span> <span class="pl-c1">backupext</span>   <span class="pl-k">=</span><span class="pl-k">-</span>vimbackup
<span class="pl-c1">set</span> <span class="pl-c1">backupskip</span>  <span class="pl-k">=</span>
<span class="pl-c"><span class="pl-c">"</span> swap files</span>
<span class="pl-c1">set</span> <span class="pl-c1">directory</span>   <span class="pl-k">=</span><span class="pl-c1">$HOME</span><span class="pl-sr">/.vim/</span><span class="pl-c1">files</span><span class="pl-sr">/swap/</span>/
<span class="pl-c1">set</span> <span class="pl-c1">updatecount</span> <span class="pl-k">=</span><span class="pl-c1">100</span>
<span class="pl-c"><span class="pl-c">"</span> undo files</span>
<span class="pl-c1">set</span> <span class="pl-c1">undofile</span>
<span class="pl-c1">set</span> <span class="pl-c1">undodir</span>     <span class="pl-k">=</span><span class="pl-c1">$HOME</span><span class="pl-sr">/.vim/</span><span class="pl-c1">files</span><span class="pl-sr">/undo/</span>
<span class="pl-c"><span class="pl-c">"</span> viminfo files</span>
<span class="pl-c1">set</span> <span class="pl-c1">viminfo</span>     <span class="pl-k">=</span>'<span class="pl-c1">100</span>,<span class="pl-c1">n</span><span class="pl-c1">$HOME</span><span class="pl-sr">/.vim/</span><span class="pl-c1">files</span><span class="pl-sr">/info/</span><span class="pl-c1">viminfo</span></pre></div>
<h2><a id="user-content-editing-remote-files" class="anchor" aria-hidden="true" href="#editing-remote-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Editing remote files</h2>
<p>Vim comes with the netrw plugin that enables editing remote files. Actually it
transfers the remote file to a local temporary file via scp, opens a buffer
using that file, and writes the changes back to the remote file on saving.</p>
<p>This is extremely useful if you want to use your local configuration opposed to
ssh'ing into a server and use whatever the admins want you to use.</p>
<pre><code>:e scp://bram@awesome.site.com/.vimrc
</code></pre>
<p>If you have a <code>~/.ssh/config</code> set up already, this gets used automatically:</p>
<pre><code>Host awesome
    HostName awesome.site.com
    Port 1234
    User bram
</code></pre>
<p>Assuming the above content in <code>~/.ssh/config</code>, this works just as well:</p>
<pre><code>:e scp://awesome/.vimrc
</code></pre>
<p>Similar can be done with a <code>~/.netrc</code>, see <code>:h netrw-netrc</code>.</p>
<p>Make sure to read <code>:h netrw-ssh-hack</code> and <code>:h g:netrw_ssh_cmd</code>.</p>
<hr>
<p>Another possibility is using <a href="https://wiki.archlinux.org/index.php/Sshfs" rel="nofollow">sshfs</a>
which uses <a href="https://en.wikipedia.org/wiki/Filesystem_in_Userspace" rel="nofollow">FUSE</a> to
mount a remote filesystem into your local filesystem.</p>
<h2><a id="user-content-managing-plugins" class="anchor" aria-hidden="true" href="#managing-plugins"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Managing plugins</h2>
<p><a href="https://github.com/tpope/vim-pathogen">Pathogen</a> was the first popular tool for
managing plugins. Actually it just adjusts the <em>runtimepath</em> (<code>:h 'rtp'</code>) to
include all the things put under a certain directory. You have to clone the
repositories of the plugins there yourself.</p>
<p>Real plugin managers expose commands that help you to install and update plugins
from within Vim.</p>
<p><a href="/mhinz/vim-galore/blob/master/PLUGINS.md#plugin-managers">List of plugin managers</a></p>
<h2><a id="user-content-block-insert" class="anchor" aria-hidden="true" href="#block-insert"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Block insert</h2>
<p>This is a technique to insert the same text on multiple consecutive lines at the
same time. See this
<a href="https://raw.githubusercontent.com/mhinz/vim-galore/master/static/images/content-block_insert.gif" rel="nofollow">demo</a>.</p>
<p>Switch to visual block mode with <code>&lt;c-v&gt;</code>. Afterwards go down for a few lines.
Hit <code>I</code> or <code>A</code> and start entering your text.</p>
<p>It might be a bit confusing at first, but text is always entered for the current
line and only after finishing the current insertion, the same text will be
applied to all other lines of the prior visual selection.</p>
<p>So a simple example is <code>&lt;c-v&gt;3jItext&lt;esc&gt;</code>.</p>
<p>If you have lines of different length and want to append the same text right
after the end of each line, do this: <code>&lt;c-v&gt;3j$Atext&lt;esc&gt;</code>.</p>
<p>Sometime you need to place the cursor somewhere after the end of the current
line. You can't do that by default, but you can set the <code>virtualedit</code> option:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">set</span> <span class="pl-c1">virtualedit</span><span class="pl-k">=</span><span class="pl-c1">all</span></pre></div>
<p>Afterwards <code>$10l</code> or <code>90|</code> work even after the end of the line.</p>
<p>See <code>:h blockwise-examples</code> for more info. It might seem complicated at first,
but quickly becomes second nature.</p>
<p>If you want to get real fancy, have a look at
<a href="https://github.com/terryma/vim-multiple-cursors">multiple-cursors</a>.</p>
<h2><a id="user-content-running-external-programs-and-using-filters" class="anchor" aria-hidden="true" href="#running-external-programs-and-using-filters"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Running external programs and using filters</h2>
<p>Disclaimer: Vim is single-threaded, so running an external program in the
foreground will block everything else. Sure, you can use one of Vim's
programming interfaces, e.g. Lua, and use its thread support, but during that
time the Vim process is blocked nevertheless. Neovim fixed that by adding a
proper job API.</p>
<p>(Apparently Bram is thinking about adding job control to Vim as well. If you
have a very recent version, see <code>:helpgrep startjob</code>.)</p>
<p>Use <code>:!</code> to start a job. If you want to list the files in the current working
directory, use <code>:!ls</code>. Use <code>|</code> for piping in the shell as usual, e.g. <code>:!ls -1 | sort | tail -n5</code>.</p>
<p>Without a range, the output of <code>:!</code> will be shown in a scrollable window. On the
other hand, if a range is given, these lines will be
<a href="https://en.wikipedia.org/wiki/Filter_(software)" rel="nofollow">filtered</a>. This means they
will be piped to the
<a href="https://en.wikipedia.org/wiki/Standard_streams#Standard_input_.28stdin.29" rel="nofollow">stdin</a>
of the filter program and after processing be replaced by the
<a href="https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29" rel="nofollow">stdout</a>
of the filter. E.g. for prepending numbers to the next 5 lines, use this:</p>
<pre><code>:.,+4!nl -ba -w1 -s' '
</code></pre>
<p>Since manually adding the range is quite burdensome, Vim also provides some
helpers for convenience. As always with ranges, you can also select lines in
visual mode and then hit <code>:</code>. There's also an operator <code>!</code> that takes a motion.
E.g. <code>!ip!sort</code> will sort the lines of the current paragraph.</p>
<p>A good use case for filtering is the <a href="https://golang.org" rel="nofollow">Go programming
language</a>. The indentation is pretty opinionated, it even
comes with a filter called <code>gofmt</code> for indenting Go source code properly. So
plugins for Go often provide helper commands called <code>:Fmt</code> that basically do
<code>:%!gofmt</code>, so they indent all lines in the file.</p>
<p>People often use <code>:r !prog</code> to put the output of prog below the current line,
which is fine for scripts, but when doing it on the fly, I find it easier to use
<code>!!ls</code> instead, which replaces the current line.</p>
<pre><code>:h filter
:h :read!
</code></pre>
<h2><a id="user-content-cscope" class="anchor" aria-hidden="true" href="#cscope"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cscope</h2>
<p><a href="http://cscope.sourceforge.net/" rel="nofollow">Cscope</a> does more things than
<a href="http://ctags.sourceforge.net/" rel="nofollow">ctags</a>, but only supports C (and C++ and Java to
some extent).</p>
<p>Whereas a tags file only knows where a symbol was defined, a cscope database
knows much more about your data:</p>
<ul>
<li>Where is this symbol defined?</li>
<li>Where is this symbol used?</li>
<li>What is this global symbol's definition?</li>
<li>Where did this variable get its value?</li>
<li>Where is this function in the source files?</li>
<li>What functions call this function?</li>
<li>What functions are called by this function?</li>
<li>Where does the message "out of space" come from?</li>
<li>Where is this source file in the directory structure?</li>
<li>What files include this header file?</li>
</ul>
<h3><a id="user-content-1-build-the-database" class="anchor" aria-hidden="true" href="#1-build-the-database"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>1. Build the database</h3>
<p>Do this in the root of your project:</p>
<div class="highlight highlight-source-shell"><pre>$ cscope -bqR</pre></div>
<p>This will create 3 files: <code>cscope{,.in,.po}.out</code> in the current working
directory. Think of them as your database.</p>
<p>Unfortunately <code>cscope</code> only analyzes <code>*.[c|h|y|l]</code> files by default. If you want
to use cscope for a Java project instead, do this:</p>
<div class="highlight highlight-source-shell"><pre>$ find <span class="pl-c1">.</span> -name <span class="pl-s"><span class="pl-pds">"</span>*.java<span class="pl-pds">"</span></span> <span class="pl-k">&gt;</span> cscope.files
$ cscope -bq</pre></div>
<h3><a id="user-content-2-add-the-database" class="anchor" aria-hidden="true" href="#2-add-the-database"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2. Add the database</h3>
<p>Open a connection to your freshly built database:</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">cs</span> <span class="pl-c1">add</span> <span class="pl-c1">cscope</span>.out</pre></div>
<p>Verify that the connection was made:</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">cs</span> show</pre></div>
<p>(Yes, you can add multiple connections.)</p>
<h3><a id="user-content-3-query-the-database" class="anchor" aria-hidden="true" href="#3-query-the-database"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3. Query the database</h3>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">cs</span> <span class="pl-c1">find</span> <span class="pl-c1">&lt;kind&gt;</span> <span class="pl-c1">&lt;query&gt;</span></pre></div>
<p>E.g. <code>:cs find d foo</code> will list all functions that are called by <code>foo(...)</code>.</p>
<table>
<thead>
<tr>
<th>Kind</th>
<th>Explanation</th>
</tr>
</thead>
<tbody>
<tr>
<td>s</td>
<td><strong>s</strong>ymbol: find all references to the token</td>
</tr>
<tr>
<td>g</td>
<td><strong>g</strong>lobal: find global definition(s) of the token</td>
</tr>
<tr>
<td>c</td>
<td><strong>c</strong>alls: find all calls to the function</td>
</tr>
<tr>
<td>t</td>
<td><strong>t</strong>ext: find all instances of the text</td>
</tr>
<tr>
<td>e</td>
<td><strong>e</strong>grep: egrep search for the word</td>
</tr>
<tr>
<td>f</td>
<td><strong>f</strong>ile: open the filename</td>
</tr>
<tr>
<td>i</td>
<td><strong>i</strong>ncludes: find files that include the filename</td>
</tr>
<tr>
<td>d</td>
<td><strong>d</strong>epends: find functions called by this function</td>
</tr></tbody></table>
<p>I suggest some convenience mappings e.g.:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">nnoremap</span> <span class="pl-c1">&lt;buffer&gt;</span> <span class="pl-c1">&lt;leader&gt;</span><span class="pl-c1">cs</span> :<span class="pl-c1">cscope</span> <span class="pl-c1">find</span> <span class="pl-c1">s</span>  <span class="pl-c1">&lt;c-r&gt;</span><span class="pl-k">=</span><span class="pl-en">expand</span>(<span class="pl-s"><span class="pl-pds">'</span>&lt;cword&gt;<span class="pl-pds">'</span></span>)<span class="pl-c1">&lt;cr&gt;&lt;cr&gt;</span>
<span class="pl-c1">nnoremap</span> <span class="pl-c1">&lt;buffer&gt;</span> <span class="pl-c1">&lt;leader&gt;</span><span class="pl-c1">cg</span> :<span class="pl-c1">cscope</span> <span class="pl-c1">find</span> <span class="pl-c1">g</span>  <span class="pl-c1">&lt;c-r&gt;</span><span class="pl-k">=</span><span class="pl-en">expand</span>(<span class="pl-s"><span class="pl-pds">'</span>&lt;cword&gt;<span class="pl-pds">'</span></span>)<span class="pl-c1">&lt;cr&gt;&lt;cr&gt;</span>
<span class="pl-c1">nnoremap</span> <span class="pl-c1">&lt;buffer&gt;</span> <span class="pl-c1">&lt;leader&gt;</span><span class="pl-c1">cc</span> :<span class="pl-c1">cscope</span> <span class="pl-c1">find</span> <span class="pl-c1">c</span>  <span class="pl-c1">&lt;c-r&gt;</span><span class="pl-k">=</span><span class="pl-en">expand</span>(<span class="pl-s"><span class="pl-pds">'</span>&lt;cword&gt;<span class="pl-pds">'</span></span>)<span class="pl-c1">&lt;cr&gt;&lt;cr&gt;</span>
<span class="pl-c1">nnoremap</span> <span class="pl-c1">&lt;buffer&gt;</span> <span class="pl-c1">&lt;leader&gt;</span>ct :<span class="pl-c1">cscope</span> <span class="pl-c1">find</span> <span class="pl-c1">t</span>  <span class="pl-c1">&lt;c-r&gt;</span><span class="pl-k">=</span><span class="pl-en">expand</span>(<span class="pl-s"><span class="pl-pds">'</span>&lt;cword&gt;<span class="pl-pds">'</span></span>)<span class="pl-c1">&lt;cr&gt;&lt;cr&gt;</span>
<span class="pl-c1">nnoremap</span> <span class="pl-c1">&lt;buffer&gt;</span> <span class="pl-c1">&lt;leader&gt;</span><span class="pl-c1">ce</span> :<span class="pl-c1">cscope</span> <span class="pl-c1">find</span> <span class="pl-c1">e</span>  <span class="pl-c1">&lt;c-r&gt;</span><span class="pl-k">=</span><span class="pl-en">expand</span>(<span class="pl-s"><span class="pl-pds">'</span>&lt;cword&gt;<span class="pl-pds">'</span></span>)<span class="pl-c1">&lt;cr&gt;&lt;cr&gt;</span>
<span class="pl-c1">nnoremap</span> <span class="pl-c1">&lt;buffer&gt;</span> <span class="pl-c1">&lt;leader&gt;</span><span class="pl-c1">cf</span> :<span class="pl-c1">cscope</span> <span class="pl-c1">find</span> <span class="pl-c1">f</span>  <span class="pl-c1">&lt;c-r&gt;</span><span class="pl-k">=</span><span class="pl-en">expand</span>(<span class="pl-s"><span class="pl-pds">'</span>&lt;cfile&gt;<span class="pl-pds">'</span></span>)<span class="pl-c1">&lt;cr&gt;&lt;cr&gt;</span>
<span class="pl-c1">nnoremap</span> <span class="pl-c1">&lt;buffer&gt;</span> <span class="pl-c1">&lt;leader&gt;</span><span class="pl-c1">ci</span> :<span class="pl-c1">cscope</span> <span class="pl-c1">find</span> <span class="pl-c1">i</span> ^<span class="pl-c1">&lt;c-r&gt;</span><span class="pl-k">=</span><span class="pl-en">expand</span>(<span class="pl-s"><span class="pl-pds">'</span>&lt;cfile&gt;<span class="pl-pds">'</span></span>)<span class="pl-c1">&lt;cr&gt;</span><span class="pl-smi">$</span><span class="pl-c1">&lt;cr&gt;</span>
<span class="pl-c1">nnoremap</span> <span class="pl-c1">&lt;buffer&gt;</span> <span class="pl-c1">&lt;leader&gt;</span><span class="pl-c1">cd</span> :<span class="pl-c1">cscope</span> <span class="pl-c1">find</span> <span class="pl-c1">d</span>  <span class="pl-c1">&lt;c-r&gt;</span><span class="pl-k">=</span><span class="pl-en">expand</span>(<span class="pl-s"><span class="pl-pds">'</span>&lt;cword&gt;<span class="pl-pds">'</span></span>)<span class="pl-c1">&lt;cr&gt;&lt;cr&gt;</span></pre></div>
<p>So, when <code>:tag</code> (or <code>&lt;c-]&gt;</code>) jumps to a definition from the tags file, <code>:cstag</code>
does the same, but also takes connected cscope databases into account. The
option <code>'cscopetag'</code> makes <code>:tag</code> act like <code>:cstag</code> automatically. This is very
convenient if you already have tag-related mappings.</p>
<p>Help: <code>:h cscope</code></p>
<h2><a id="user-content-matchit" class="anchor" aria-hidden="true" href="#matchit"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>MatchIt</h2>
<p>Since Vim is written in C, a lot of features assume C-like syntax. By default,
if your cursor is on <code>{</code> or <code>#endif</code>, you can use <code>%</code> to jump to the
corresponding <code>}</code> or <code>#ifdef</code> respectively.</p>
<p>Vim comes bundled with a plugin called matchit.vim which is not enabled by
default. It makes <code>%</code> also cycle through HTML tags, if/else/endif constructs in
VimL etc. and introduces a few new commands.</p>
<h4><a id="user-content-installation-for-vim-8" class="anchor" aria-hidden="true" href="#installation-for-vim-8"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation for Vim 8</h4>
<div class="highlight highlight-source-viml"><pre><span class="pl-c"><span class="pl-c">"</span> vimrc</span>
<span class="pl-c1">packadd</span><span class="pl-k">!</span> matchit</pre></div>
<h4><a id="user-content-installation-for-vim-7-and-older" class="anchor" aria-hidden="true" href="#installation-for-vim-7-and-older"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation for Vim 7 and older</h4>
<div class="highlight highlight-source-viml"><pre><span class="pl-c"><span class="pl-c">"</span> vimrc</span>
<span class="pl-c1">runtime</span> macros/matchit.<span class="pl-c1">vim</span></pre></div>
<p>Since the documentation of matchit is pretty extensive, I suggest also doing the
following once:</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-k">!</span><span class="pl-c1">mkdir</span> <span class="pl-k">-</span><span class="pl-c1">p</span> <span class="pl-c1">~/.vim/doc</span>
:<span class="pl-k">!</span><span class="pl-c1">cp</span> <span class="pl-c1">$VIMRUNTIME</span><span class="pl-sr">/macros/</span>matchit.txt <span class="pl-c1">~/.vim/doc</span>
:<span class="pl-c1">helptags</span> <span class="pl-c1">~/.vim/doc</span></pre></div>
<h4><a id="user-content-small-intro" class="anchor" aria-hidden="true" href="#small-intro"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Small intro</h4>
<p>The plugin is ready to use now. See <code>:h matchit-intro</code> for the supported
commands and <code>:h matchit-languages</code> for the supported languages.</p>
<p>That said, it's easy to define your own matching pairs:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">autocmd</span> <span class="pl-c1">FileType</span> <span class="pl-c1">python</span> <span class="pl-k">let</span> <span class="pl-smi"><span class="pl-k">b:</span>match_words</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>\&lt;if\&gt;:\&lt;elif\&gt;:\&lt;else\&gt;<span class="pl-pds">'</span></span></pre></div>
<p>Afterwards you can cycle through these 3 statements in any Python file by using
<code>%</code> (forward) or <code>g%</code> (backward).</p>
<p>Help:</p>
<pre><code>:h matchit-install
:h matchit
:h b:match_words
</code></pre>
<h2><a id="user-content-true-colors" class="anchor" aria-hidden="true" href="#true-colors"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>True colors</h2>
<p>Using true colors in a terminal emulator means being able to use 24 bits for RGB
colors. That makes 16777216 (2^24) colors instead of the usual 256.</p>
<p>As explained <a href="#colorschemes">here</a>, colorschemes can actually be <em>two</em>
colorschemes by having definitions for terminals (xterm) and for GUIs (gvim).
This made sense before terminal emulators learned about true colors.</p>
<p>After <code>:set termguicolors</code>, Vim starts emitting escape sequences only understood
by a terminal emulator that supports true colors. When your colors look weird,
chances are your terminal emulator doesn't support true colors or your
colorcheme has no GUI colors defined.</p>
<p>Many people use the terminal multiplexer
<a href="https://github.com/tmux/tmux/wiki">tmux</a> which basically sits in between the
terminal emulator and Vim. To make tmux <em>forward</em> the true color escape
sequences emitted by Vim, you have to put the following in the user's
<code>.tmux.conf</code>:</p>
<pre><code>set-option -g  default-terminal 'tmux-256color'
set-option -ga terminal-overrides ',xterm-256color:Tc'
</code></pre>
<ul>
<li>The first line should be the same for most people and denotes the <code>$TERM</code> to
be used <em>within</em> tmux.</li>
<li>The second line adds the tmux-specific <code>Tc</code> (true color) capability to the
other terminfo entries of <code>xterm-256color</code>. Obviously this assumes that the
user is using <code>TERM=xterm-256color</code> <em>outside</em> of tmux.</li>
</ul>
<p>So, here is the checklist for enabling true colors:</p>
<ul>
<li>Read <code>:h 'termguicolors'</code>.</li>
<li>Put <code>set termguicolors</code> in your vimrc.</li>
<li>Make sure your colorscheme has color definitions for GUIs. (It should contain
lines with <code>guifg</code> and <code>guibg</code>.)</li>
<li>Make sure your terminal emulator of choice supports true colors.</li>
<li>Using tmux? Configure it to add the <code>Tc</code> capability.</li>
</ul>
<p>A popular reference for colors in the terminal:
<a href="https://gist.github.com/XVilka/8346728">https://gist.github.com/XVilka/8346728</a></p>
<h1><a id="user-content-tips-1" class="anchor" aria-hidden="true" href="#tips-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tips</h1>
<h2><a id="user-content-saner-behavior-of-n-and-n" class="anchor" aria-hidden="true" href="#saner-behavior-of-n-and-n"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Saner behavior of n and N</h2>
<p>The direction of <code>n</code> and <code>N</code> depends on whether <code>/</code> or <code>?</code> was used for
searching forward or backward respectively. This is pretty confusing to me.</p>
<p>If you want <code>n</code> to always search forward and <code>N</code> backward, use this:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">nnoremap</span> <span class="pl-c1">&lt;expr&gt;</span> <span class="pl-c1">n</span>  <span class="pl-s"><span class="pl-pds">'</span>Nn<span class="pl-pds">'</span></span>[<span class="pl-smi"><span class="pl-k">v:</span>searchforward</span>]
<span class="pl-c1">nnoremap</span> <span class="pl-c1">&lt;expr&gt;</span> <span class="pl-c1">N</span>  <span class="pl-s"><span class="pl-pds">'</span>nN<span class="pl-pds">'</span></span>[<span class="pl-smi"><span class="pl-k">v:</span>searchforward</span>]</pre></div>
<h2><a id="user-content-saner-command-line-history" class="anchor" aria-hidden="true" href="#saner-command-line-history"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Saner command-line history</h2>
<p>If you're anything like me, you're used to going to next and previous items via
<code>&lt;c-n&gt;</code> and <code>&lt;c-p&gt;</code> respectively. By default, this also works in the
command-line and recalls older or more recent command-lines from history.</p>
<p>So far, so good. But <code>&lt;up&gt;</code> and <code>&lt;down&gt;</code> are even smarter! They recall the
command-line whose beginning matches the current command-line. E.g. <code>:echo &lt;up&gt;</code>
may change to <code>:echo "Vim rocks!"</code>.</p>
<p>Of course, I don't want you to reach to the arrow keys, just map it instead:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">cnoremap</span> <span class="pl-c1">&lt;c-n&gt;</span>  <span class="pl-c1">&lt;down&gt;</span>
<span class="pl-c1">cnoremap</span> <span class="pl-c1">&lt;c-p&gt;</span>  <span class="pl-c1">&lt;up&gt;</span></pre></div>
<p>I depend on this behaviour several times a day.</p>
<h2><a id="user-content-saner-ctrl-l" class="anchor" aria-hidden="true" href="#saner-ctrl-l"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Saner CTRL-L</h2>
<p>By default, <code>&lt;c-l&gt;</code> clears and redraws the screen (like <code>:redraw!</code>). The
following mapping does the same, plus de-highlighting the matches found via <code>/</code>,
<code>?</code> etc., plus fixing syntax highlighting (sometimes Vim loses highlighting due
to complex highlighting rules), plus force updating the syntax highlighting in
diff mode:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">nnoremap</span> <span class="pl-c1">&lt;leader&gt;</span><span class="pl-c1">l</span> :<span class="pl-c1">nohlsearch</span><span class="pl-c1">&lt;cr&gt;</span>:<span class="pl-c1">diffupdate</span><span class="pl-c1">&lt;cr&gt;</span>:<span class="pl-c1">syntax</span> <span class="pl-c1">sync</span> <span class="pl-c1">fromstart</span><span class="pl-c1">&lt;cr&gt;&lt;c-l&gt;</span></pre></div>
<h2><a id="user-content-disable-audible-and-visual-bells" class="anchor" aria-hidden="true" href="#disable-audible-and-visual-bells"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Disable audible and visual bells</h2>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">set</span> <span class="pl-c1">noerrorbells</span>
<span class="pl-c1">set</span> <span class="pl-c1">novisualbell</span>
<span class="pl-c1">set</span> <span class="pl-c1">t_vb</span><span class="pl-k">=</span></pre></div>
<p>See <a href="http://vim.wikia.com/wiki/Disable_beeping" rel="nofollow">Vim Wiki: Disable beeping</a>.</p>
<h2><a id="user-content-quickly-move-current-line" class="anchor" aria-hidden="true" href="#quickly-move-current-line"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quickly move current line</h2>
<p>Sometimes I need a quick way to move the current line above or below:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">nnoremap</span> [<span class="pl-c1">e</span>  :<span class="pl-c1">&lt;c-u&gt;</span><span class="pl-c1">execute</span> <span class="pl-s"><span class="pl-pds">'</span>move -1-<span class="pl-pds">'</span></span>. <span class="pl-smi"><span class="pl-k">v:</span>count1</span><span class="pl-c1">&lt;cr&gt;</span>
<span class="pl-c1">nnoremap</span> ]<span class="pl-c1">e</span>  :<span class="pl-c1">&lt;c-u&gt;</span><span class="pl-c1">execute</span> <span class="pl-s"><span class="pl-pds">'</span>move +<span class="pl-pds">'</span></span>. <span class="pl-smi"><span class="pl-k">v:</span>count1</span><span class="pl-c1">&lt;cr&gt;</span></pre></div>
<p>These mappings also take a count, so <code>2]e</code> moves the current line 2 lines below.</p>
<h2><a id="user-content-quickly-add-empty-lines" class="anchor" aria-hidden="true" href="#quickly-add-empty-lines"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quickly add empty lines</h2>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">nnoremap</span> [<span class="pl-c1">&lt;space&gt;</span>  :<span class="pl-c1">&lt;c-u&gt;</span><span class="pl-c1">put</span><span class="pl-k">!</span> <span class="pl-k">=</span><span class="pl-en">repeat</span>(<span class="pl-en">nr2char</span>(<span class="pl-c1">10</span>), <span class="pl-smi"><span class="pl-k">v:</span>count1</span>)<span class="pl-c1">&lt;cr&gt;</span>'[
<span class="pl-c1">nnoremap</span> ]<span class="pl-c1">&lt;space&gt;</span>  :<span class="pl-c1">&lt;c-u&gt;</span><span class="pl-c1">put</span> <span class="pl-k">=</span><span class="pl-en">repeat</span>(<span class="pl-en">nr2char</span>(<span class="pl-c1">10</span>), <span class="pl-smi"><span class="pl-k">v:</span>count1</span>)<span class="pl-c1">&lt;cr&gt;</span></pre></div>
<p>Now <code>5[&lt;space&gt;</code> inserts 5 blank lines above the current line.</p>
<h2><a id="user-content-quickly-edit-your-macros" class="anchor" aria-hidden="true" href="#quickly-edit-your-macros"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quickly edit your macros</h2>
<p>This is a real gem! The mapping takes a register (or <code>*</code> by default) and opens
it in the cmdline-window. Hit <code>&lt;cr&gt;</code> when you're done editing for setting the
register.</p>
<p>I often use this to correct typos I did while recording a macro.</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">nnoremap</span> <span class="pl-c1">&lt;leader&gt;</span><span class="pl-c1">m</span>  :<span class="pl-c1">&lt;c-u&gt;&lt;c-r&gt;&lt;c-r&gt;</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">'</span>let @<span class="pl-pds">'</span></span>. <span class="pl-smi"><span class="pl-k">v:</span>register</span> .<span class="pl-s"><span class="pl-pds">'</span> = <span class="pl-pds">'</span></span>. <span class="pl-en">string</span>(<span class="pl-en">getreg</span>(<span class="pl-smi"><span class="pl-k">v:</span>register</span>))<span class="pl-c1">&lt;cr&gt;&lt;c-f&gt;&lt;left&gt;</span></pre></div>
<p>Use it like this <code>&lt;leader&gt;m</code> or <code>"q&lt;leader&gt;m</code>.</p>
<p>Notice the use of <code>&lt;c-r&gt;&lt;c-r&gt;</code> to make sure that the <code>&lt;c-r&gt;</code> is inserted
literally. See <code>:h c_^R^R</code>.</p>
<h2><a id="user-content-quickly-jump-to-header-or-source-file" class="anchor" aria-hidden="true" href="#quickly-jump-to-header-or-source-file"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quickly jump to header or source file</h2>
<p>This technique can probably be applied to many filetypes. It sets <em>file marks</em>
(see <code>:h marks</code>) when leaving a source or header file, so you can quickly jump
back to the last accessed one by using <code>'C</code> or <code>'H</code> (see <code>:h 'A</code>).</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">autocmd</span> <span class="pl-c1">BufLeave</span> <span class="pl-k">*</span>.{<span class="pl-c1">c</span>,cpp} <span class="pl-c1">mark</span> C
<span class="pl-c1">autocmd</span> <span class="pl-c1">BufLeave</span> <span class="pl-k">*</span>.<span class="pl-c1">h</span>       <span class="pl-c1">mark</span> H</pre></div>
<p><strong>NOTE</strong>: The info is saved in the viminfo file, so make sure that <code>:set viminfo?</code> includes <code>:h viminfo-'</code>.</p>
<h2><a id="user-content-quickly-change-font-size-in-gui" class="anchor" aria-hidden="true" href="#quickly-change-font-size-in-gui"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Quickly change font size in GUI</h2>
<p>I think this was taken from tpope's config:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">command</span><span class="pl-k">!</span> Bigger  :<span class="pl-k">let</span> &amp;<span class="pl-c1">guifont</span> <span class="pl-k">=</span> <span class="pl-en">substitute</span>(&amp;<span class="pl-c1">guifont</span>, <span class="pl-s"><span class="pl-pds">'</span>\d\+$<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>\=submatch(0)+1<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span>)
<span class="pl-c1">command</span><span class="pl-k">!</span> Smaller :<span class="pl-k">let</span> &amp;<span class="pl-c1">guifont</span> <span class="pl-k">=</span> <span class="pl-en">substitute</span>(&amp;<span class="pl-c1">guifont</span>, <span class="pl-s"><span class="pl-pds">'</span>\d\+$<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>\=submatch(0)-1<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span>)</pre></div>
<h2><a id="user-content-change-cursor-style-dependent-on-mode" class="anchor" aria-hidden="true" href="#change-cursor-style-dependent-on-mode"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Change cursor style dependent on mode</h2>
<p>I like to use a block cursor in normal mode, i-beam cursor in insert mode, and
underline cursor in replace mode.</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-k">if</span> <span class="pl-en">empty</span>(<span class="pl-c1">$TMUX</span>)
  <span class="pl-k">let</span> &amp;<span class="pl-c1">t_SI</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>\&lt;Esc&gt;]50;CursorShape=1\x7<span class="pl-pds">"</span></span>
  <span class="pl-k">let</span> &amp;<span class="pl-c1">t_EI</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>\&lt;Esc&gt;]50;CursorShape=0\x7<span class="pl-pds">"</span></span>
  <span class="pl-k">let</span> &amp;<span class="pl-c1">t_SR</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>\&lt;Esc&gt;]50;CursorShape=2\x7<span class="pl-pds">"</span></span>
<span class="pl-k">else</span>
  <span class="pl-k">let</span> &amp;<span class="pl-c1">t_SI</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>\&lt;Esc&gt;Ptmux;\&lt;Esc&gt;\&lt;Esc&gt;]50;CursorShape=1\x7\&lt;Esc&gt;\\<span class="pl-pds">"</span></span>
  <span class="pl-k">let</span> &amp;<span class="pl-c1">t_EI</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>\&lt;Esc&gt;Ptmux;\&lt;Esc&gt;\&lt;Esc&gt;]50;CursorShape=0\x7\&lt;Esc&gt;\\<span class="pl-pds">"</span></span>
  <span class="pl-k">let</span> &amp;<span class="pl-c1">t_SR</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>\&lt;Esc&gt;Ptmux;\&lt;Esc&gt;\&lt;Esc&gt;]50;CursorShape=2\x7\&lt;Esc&gt;\\<span class="pl-pds">"</span></span>
<span class="pl-k">endif</span></pre></div>
<p>This simply tells Vim to print a certain sequence of characters (<a href="https://en.wikipedia.org/wiki/Escape_sequence" rel="nofollow">escape
sequence</a>) when entering/leaving
insert mode. The underlying terminal, or programs like
<a href="https://tmux.github.io" rel="nofollow">tmux</a> that sit between Vim and the terminal, will
process and evaluate it.</p>
<p>There's one drawback though: there are many terminal emulator implementations
and not all use the same sequences for doing the same things. The sequences used
above might not work with your implementation. Your implementation might not
even support different cursor styles. Check the documentation.</p>
<p>The example above works with iTerm2.</p>
<h2><a id="user-content-dont-lose-selection-when-shifting-sidewards" class="anchor" aria-hidden="true" href="#dont-lose-selection-when-shifting-sidewards"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Don't lose selection when shifting sidewards</h2>
<p>If you select one or more lines, you can use <code>&lt;</code> and <code>&gt;</code> for shifting them
sidewards. Unfortunately you immediately lose the selection afterwards.</p>
<p>You can use <code>gv</code> to reselect the last selection (see <code>:h gv</code>), thus you can work
around it like this:</p>
<div class="highlight highlight-source-viml"><pre>xnoremap<span class="pl-k"> &lt; </span> &lt;gv
xnoremap<span class="pl-k"> &gt; </span> &gt;gv</pre></div>
<p>Now you can use <code>&gt;&gt;&gt;&gt;&gt;</code> on your visual selection without any problems.</p>
<p><strong>NOTE</strong>: The same can be achieved using <code>.</code>, which repeats the last change.</p>
<h2><a id="user-content-reload-a-file-on-saving" class="anchor" aria-hidden="true" href="#reload-a-file-on-saving"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reload a file on saving</h2>
<p>Using <a href="#autocmds">autocmds</a> you can do anything on saving a file, e.g. sourcing
it in case of a dotfile or running a linter to check for syntactical errors in
your source code.</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">autocmd</span> <span class="pl-c1">BufWritePost</span> <span class="pl-c1">$MYVIMRC</span> <span class="pl-c1">source</span> <span class="pl-c1">$MYVIMRC</span>
<span class="pl-c1">autocmd</span> <span class="pl-c1">BufWritePost</span> <span class="pl-c1">~/.Xdefaults</span> <span class="pl-c1">call</span> <span class="pl-en">system</span>(<span class="pl-s"><span class="pl-pds">'</span>xrdb ~/.Xdefaults<span class="pl-pds">'</span></span>)</pre></div>
<h2><a id="user-content-smarter-cursorline" class="anchor" aria-hidden="true" href="#smarter-cursorline"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Smarter cursorline</h2>
<p>I love the cursorline, but I only want to use it in the current window and not
when being in insert mode:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">autocmd</span> <span class="pl-c1">InsertLeave</span>,<span class="pl-c1">WinEnter</span> <span class="pl-k">*</span> <span class="pl-c1">set</span> <span class="pl-c1">cursorline</span>
<span class="pl-c1">autocmd</span> <span class="pl-c1">InsertEnter</span>,<span class="pl-c1">WinLeave</span> <span class="pl-k">*</span> <span class="pl-c1">set</span> <span class="pl-c1">nocursorline</span></pre></div>
<h2><a id="user-content-faster-keyword-completion" class="anchor" aria-hidden="true" href="#faster-keyword-completion"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Faster keyword completion</h2>
<p>The keyword completion (<code>&lt;c-n&gt;</code>/<code>&lt;c-p&gt;</code>) tries completing whatever is listed in
the <code>'complete'</code> option. By default, this also includes tags (which can be
annoying) and scanning all included files (which can be very slow). If you can
live without these things, disable them:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">set</span> <span class="pl-c1">complete</span><span class="pl-k">-</span><span class="pl-k">=</span><span class="pl-c1">i</span><span class="pl-c">   <span class="pl-c">"</span> disable scanning included files</span>
<span class="pl-c1">set</span> <span class="pl-c1">complete</span><span class="pl-k">-</span><span class="pl-k">=</span><span class="pl-c1">t</span><span class="pl-c">   <span class="pl-c">"</span> disable searching tags</span></pre></div>
<h2><a id="user-content-cosmetic-changes-to-colorschemes" class="anchor" aria-hidden="true" href="#cosmetic-changes-to-colorschemes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Cosmetic changes to colorschemes</h2>
<p>Always use a dark gray statusline, no matter which colorscheme is chosen:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">autocmd</span> <span class="pl-c1">ColorScheme</span> <span class="pl-k">*</span> <span class="pl-c1">highlight</span> <span class="pl-c1">StatusLine</span> ctermbg<span class="pl-k">=</span><span class="pl-c1">darkgray</span> cterm<span class="pl-k">=</span><span class="pl-c1">NONE</span> guibg<span class="pl-k">=</span><span class="pl-c1">darkgray</span> <span class="pl-c1">gui</span><span class="pl-k">=</span><span class="pl-c1">NONE</span></pre></div>
<p>This triggers every time you use <code>:colorscheme ...</code>. If you want it to trigger only for
a certain colorscheme:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">autocmd</span> <span class="pl-c1">ColorScheme</span> desert <span class="pl-c1">highlight</span> <span class="pl-c1">StatusLine</span> ctermbg<span class="pl-k">=</span><span class="pl-c1">darkgray</span> cterm<span class="pl-k">=</span><span class="pl-c1">NONE</span> guibg<span class="pl-k">=</span><span class="pl-c1">darkgray</span> <span class="pl-c1">gui</span><span class="pl-k">=</span><span class="pl-c1">NONE</span></pre></div>
<p>This triggers only for <code>:colorscheme desert</code>.</p>
<h1><a id="user-content-commands-1" class="anchor" aria-hidden="true" href="#commands-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Commands</h1>
<p>Useful commands that are good to know. Use <code>:h :&lt;command name&gt;</code> to learn more
about them, e.g. <code>:h :global</code>.</p>
<h2><a id="user-content-global-and-vglobal" class="anchor" aria-hidden="true" href="#global-and-vglobal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>:global and :vglobal</h2>
<p>Execute a command on all matching lines. E.g. <code>:global /regexp/ print</code> will use
<code>:print</code> on all lines that contain "regexp".</p>
<p>Fun fact: You probably all know good old grep, the filter program written by Ken
Thompson. What does it do? It prints all lines matching a certain regular
expression! Now guess the short form of <code>:global /regexp/ print</code>? That's right!
It's <code>:g/re/p</code>. Ken Thompson was inspired by vi's <code>:global</code> when he wrote grep.</p>
<p>Despite its name, <code>:global</code> only acts on all lines by default, but it also takes
a range. Assume you want use <code>:delete</code> on all lines from the current line to the
next blank line (matched by the regular expression <code>^$</code>) that contain "foo":</p>
<div class="highlight highlight-source-viml"><pre>:,<span class="pl-sr">/^$/</span><span class="pl-c1">g</span><span class="pl-sr">/foo/</span><span class="pl-c1">d</span></pre></div>
<p>For executing commands on all lines that do <em>not</em> match a given pattern, use
<code>:global!</code> or its alias <code>:vglobal</code> (think <em>inVerse</em>) instead.</p>
<h2><a id="user-content-normal-and-execute" class="anchor" aria-hidden="true" href="#normal-and-execute"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>:normal and :execute</h2>
<p>These commands are commonly used in Vim scripts.</p>
<p>With <code>:normal</code> you can do normal mode mappings from the command-line. E.g.
<code>:normal! 4j</code> will make the cursor go down 4 lines (without using any custom
mapping for "j" due to the "!").</p>
<p>Mind that <code>:normal</code> also takes a count, so <code>:%norm! Iabc</code> would prepend "abc" to
every line.</p>
<p>With <code>:execute</code> you can mix commands with expressions. Assume you edit a C
source file and want to switch to its header file:</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">execute</span> <span class="pl-s"><span class="pl-pds">'</span>edit<span class="pl-pds">'</span></span> <span class="pl-en">fnamemodify</span>(<span class="pl-en">expand</span>(<span class="pl-s"><span class="pl-pds">'</span>%<span class="pl-pds">'</span></span>), <span class="pl-s"><span class="pl-pds">'</span>:r<span class="pl-pds">'</span></span>) . <span class="pl-s"><span class="pl-pds">'</span>.h<span class="pl-pds">'</span></span></pre></div>
<p>Both commands are often used together. Assume you want to make the cursor go
down "n" lines:</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-k">let</span> <span class="pl-c1">n</span> <span class="pl-k">=</span> <span class="pl-c1">4</span>
:<span class="pl-c1">execute</span> <span class="pl-s"><span class="pl-pds">'</span>normal!<span class="pl-pds">'</span></span> <span class="pl-c1">n</span> . <span class="pl-s"><span class="pl-pds">'</span>j<span class="pl-pds">'</span></span></pre></div>
<h2><a id="user-content-redir-and-execute" class="anchor" aria-hidden="true" href="#redir-and-execute"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>:redir and execute()</h2>
<p>Many commands print messages and <code>:redir</code> allows to redirect that output. You
can redirect to files, <a href="#registers">registers</a> or variables.</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">redir</span> <span class="pl-k">=</span>&gt; <span class="pl-c1">var</span>
:<span class="pl-c1">reg</span>
:<span class="pl-c1">redir</span> END
:echo <span class="pl-c1">var</span>
:<span class="pl-c"><span class="pl-c">"</span> For fun let's also put it onto the current buffer.</span>
:<span class="pl-c1">put</span> <span class="pl-k">=</span><span class="pl-c1">var</span></pre></div>
<p>In Vim 8 there is an even shorter way:</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">put</span> <span class="pl-k">=</span><span class="pl-en">execute</span>(<span class="pl-s"><span class="pl-pds">'</span>reg<span class="pl-pds">'</span></span>)</pre></div>
<p>Help:</p>
<pre><code>:h :redir
:h execute()
</code></pre>
<h1><a id="user-content-debugging-1" class="anchor" aria-hidden="true" href="#debugging-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Debugging</h1>
<h2><a id="user-content-general-tips" class="anchor" aria-hidden="true" href="#general-tips"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>General tips</h2>
<p>If you encounter a strange behaviour, try reproducing it like this:</p>
<pre><code>vim -u NONE -N
</code></pre>
<p>This will start Vim without vimrc (thus default settings) and in nocompatible
mode (which makes it use Vim defaults instead of vi defaults). (See <code>:h --noplugin</code> for other combinations of what to load at start.)</p>
<p>If you can still reproduce it now, it's most likely a bug in Vim itself! Report
it to the <a href="https://groups.google.com/forum/#!forum/vim_dev" rel="nofollow">vim_dev</a> mailing
list. Most of the time the issue won't be resolved at this time and you'll have
to further investigate.</p>
<p>Plugins often introduce new/changed/faulty behaviour. E.g. if it happens on
saving, check <code>:verb au BufWritePost</code> to get a list of potential culprits.</p>
<p>If you're using a plugin manager, comment them out until you find the culprit.</p>
<p>Issue is still not resolved? If it's not a plugin, it must be your other
settings, so maybe your options or autocmds etc.</p>
<p>Time to use binary search. Repeatedly split the search space in two until you
find the culprit line. Due to the nature of binary division, it won't take many
steps.</p>
<p>In practice, it works like this: Put the <code>:finish</code> command in the middle of your
vimrc. Vim will skip everything after it. If it still happens, the problem is in
the active upper half. Move the <code>:finish</code> to the middle of <em>that</em> half.
Otherwise, the issue is in the inactive lower half. Move the <code>:finish</code> to the
middle of <em>that</em> half. And so on.</p>
<h2><a id="user-content-verbosity" class="anchor" aria-hidden="true" href="#verbosity"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Verbosity</h2>
<p>Another useful way for observing what Vim is currently doing is increasing the
verbosity level. Currently Vim supports 9 different levels. See <code>:h 'verbose'</code>
for the full list.</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">e</span> <span class="pl-sr">/tmp/</span>foo
:<span class="pl-c1">set</span> <span class="pl-c1">verbose</span><span class="pl-k">=</span><span class="pl-c1">2</span>
:<span class="pl-c1">w</span>
:<span class="pl-c1">set</span> <span class="pl-c1">verbose</span><span class="pl-k">=</span><span class="pl-c1">0</span></pre></div>
<p>This would show all the files that get sourced, e.g. the undo file or various
plugins that act on saving.</p>
<p>If you only want increase verbosity for a single command, there's also
<code>:verbose</code>, which simply gets put in front of any other command. It takes the
verbosity level as count and defaults to 1:</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">verb</span> <span class="pl-c1">set</span> <span class="pl-c1">verbose</span>
<span class="pl-c"><span class="pl-c">"</span>  verbose=1</span>
:<span class="pl-c1">10</span>verb <span class="pl-c1">set</span> <span class="pl-c1">verbose</span>
<span class="pl-c"><span class="pl-c">"</span>  verbose=10</span></pre></div>
<p>It's very often used with its default verbosity level 1 to show where an option
was set last:</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">verb</span> <span class="pl-c1">set</span> <span class="pl-c1">ai</span>?
<span class="pl-c"><span class="pl-c">"</span>      Last set from ~/.vim/vimrc</span></pre></div>
<p>Naturally, the higher the verbosity level the more overwhelming the output. But
fear no more, you can simply redirect the output to a file:</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">set</span> <span class="pl-c1">verbosefile</span><span class="pl-k">=</span><span class="pl-sr">/tmp/</span>foo | <span class="pl-c1">15</span>verbose echo <span class="pl-s"><span class="pl-pds">"</span>foo<span class="pl-pds">"</span></span> | <span class="pl-c1">vsplit</span> <span class="pl-sr">/tmp/</span>foo</pre></div>
<p>You can also enable verbosity at starting time, with the <code>-V</code> option. It
defaults to verbosity level 10. E.g. <code>vim -V5</code>.</p>
<h2><a id="user-content-profiling-startup-time" class="anchor" aria-hidden="true" href="#profiling-startup-time"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Profiling startup time</h2>
<p>Vim startup feels slow? Time to crunch some numbers:</p>
<pre><code>vim --startuptime /tmp/startup.log +q &amp;&amp; vim /tmp/startup.log
</code></pre>
<p>The first column is the most important as it shows the elapsed absolute time. If
there is a big jump in time between two lines, the second line is either a very
big file or a file with faulty VimL code that is worth investigating.</p>
<h2><a id="user-content-profiling-at-runtime" class="anchor" aria-hidden="true" href="#profiling-at-runtime"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Profiling at runtime</h2>
<p>Required <a href="#what-kind-of-vim-am-i-running">feature</a>: <code>+profile</code></p>
<p>Vim provides a built-in capability for profiling at runtime and is a great way
to find slow code in your environment.</p>
<p>The <code>:profile</code> command takes a bunch of sub-commands for specifying what to
profile.</p>
<p>If you want to profile <em>everything</em>, do this:</p>
<pre><code>:profile start /tmp/profile.log
:profile file *
:profile func *
&lt;do something in Vim&gt;
&lt;quit Vim&gt;
</code></pre>
<p>Vim keeps the profiling information in memory and only writes it out to the
logfile on exit. (Neovim has fixed this using <code>:profile dump</code>).</p>
<p>Have a look at <code>/tmp/profile.log</code>. All code that was executed during profiling
will be shown. Every line, how often it was executed and how much time it took.</p>
<p>Most of the time that will be plugin code the user isn't familiar with, but if
you're investigating a certain issue, jump to the bottom of the log. Here are
two different sections <code>FUNCTIONS SORTED ON TOTAL TIME</code> and <code>FUNCTIONS SORTED ON SELF TIME</code> that are worth gold. At a quick glance you can see, if a certain
function is taking too long.</p>
<h2><a id="user-content-debugging-vim-scripts" class="anchor" aria-hidden="true" href="#debugging-vim-scripts"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Debugging Vim scripts</h2>
<p>If you ever used a command-line debugger before, <code>:debug</code> will quickly feel
familiar.</p>
<p>Simply prepend <code>:debug</code> to any other command and you'll be put into debug mode.
That is, the execution will stop at the first line about to be executed and that
line will be displayed.</p>
<p>See <code>:h &gt;cont</code> and below for the 6 available debugger commands and note that,
like in gdb and similar debuggers, you can also use their short forms: <code>c</code>, <code>q</code>,
<code>n</code>, <code>s</code>, <code>i</code>, and <code>f</code>.</p>
<p>Apart from that those, you're free to use any Vim command, e.g. <code>:echo myvar</code>,
which gets executed in the context of the current position in the code.</p>
<p>You basically get a
<a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" rel="nofollow">REPL</a> by
simply using <code>:debug 1</code>.</p>
<p>It would be a pain if you had to single-step through every single line, so of
course we can define breakpoints, too. (Breakpoints are called breakpoints,
because the execution stops when they're hit, thus you can simply skip code
you're not interested in.) See <code>:h :breakadd</code>, <code>:h :breakdel</code>, and <code>:h :breaklist</code> for further details.</p>
<p>Let's assume you want to know what code is run every time you save a file:</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">au</span> <span class="pl-c1">BufWritePost</span>
<span class="pl-c"><span class="pl-c">"</span> signify  BufWritePost</span>
<span class="pl-c"><span class="pl-c">"</span>     *         call sy#start()</span>
:<span class="pl-c1">breakadd</span> func <span class="pl-k">*</span><span class="pl-c1">start</span>
:<span class="pl-c1">w</span>
<span class="pl-c"><span class="pl-c">"</span> Breakpoint in "sy#start" line 1</span>
<span class="pl-c"><span class="pl-c">"</span> Entering Debug mode.  Type "cont" to continue.</span>
<span class="pl-c"><span class="pl-c">"</span> function sy#start</span>
<span class="pl-c"><span class="pl-c">"</span> line 1: if g:signify_locked</span>
&gt;<span class="pl-c1">s</span>
<span class="pl-c"><span class="pl-c">"</span> function sy#start</span>
<span class="pl-c"><span class="pl-c">"</span> line 3: endif</span>
&gt;
<span class="pl-c"><span class="pl-c">"</span> function sy#start</span>
<span class="pl-c"><span class="pl-c">"</span> line 5: let sy_path = resolve(expand('%:p'))</span>
&gt;<span class="pl-c1">q</span>
:<span class="pl-c1">breakdel</span> <span class="pl-k">*</span></pre></div>
<p>As you can see, using <code>&lt;cr&gt;</code> will repeat the previous debugger command, <code>s</code> in
this case.</p>
<p><code>:debug</code> can be used in combination with the <a href="#verbosity">verbose</a> option.</p>
<h2><a id="user-content-debugging-syntax-files" class="anchor" aria-hidden="true" href="#debugging-syntax-files"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Debugging syntax files</h2>
<p>Syntax files are often the cause for slowdowns due to wrong and/or complex
regular expressions. If the <code>+profile</code> <a href="#what-kind-of-vim-am-i-running">feature</a>
is compiled in, Vim provides the super useful <code>:syntime</code> command.</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">syntime</span> <span class="pl-c1">on</span>
<span class="pl-c"><span class="pl-c">"</span> hit &lt;c-l&gt; a few times to redraw the window which causes the syntax rules to get applied again</span>
:<span class="pl-c1">syntime</span> <span class="pl-c1">off</span>
:<span class="pl-c1">syntime</span> <span class="pl-c1">report</span></pre></div>
<p>The output contains important metrics. E.g. you can see which regexp takes too
long and should be optimized or which regexps are used all the time but never
even match.</p>
<p>See <code>:h :syntime</code>.</p>
<h1><a id="user-content-miscellaneous-1" class="anchor" aria-hidden="true" href="#miscellaneous-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Miscellaneous</h1>
<h2><a id="user-content-additional-resources" class="anchor" aria-hidden="true" href="#additional-resources"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Additional resources</h2>
<table>
<thead>
<tr>
<th>Resource</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.moolenaar.net/habits.html" rel="nofollow">Seven habits of effective text editing</a></td>
<td>By Bram Moolenaar, the author of Vim.</td>
</tr>
<tr>
<td><a href="http://www.moolenaar.net/habits_2007.pdf" rel="nofollow">Seven habits of effective text editing 2.0 (PDF)</a></td>
<td>See above.</td>
</tr>
<tr>
<td><a href="http://www.ibm.com/developerworks/views/linux/libraryview.jsp?sort_order=asc&amp;sort_by=Title&amp;search_by=scripting+the+vim+editor" rel="nofollow">IBM DeveloperWorks: Scripting the Vim editor</a></td>
<td>Five-part series on Vim scripting.</td>
</tr>
<tr>
<td><a href="http://learnvimscriptthehardway.stevelosh.com" rel="nofollow">Learn Vimscript the Hard Way</a></td>
<td>Develop a Vim plugin from scratch.</td>
</tr>
<tr>
<td><a href="http://www.amazon.com/Practical-Vim-Edit-Speed-Thought/dp/1680501275/" rel="nofollow">Practical Vim (2nd Edition)</a></td>
<td>Hands down the best book about Vim.</td>
</tr>
<tr>
<td><a href="http://vimcasts.org/episodes/archive" rel="nofollow">Vimcasts.org</a></td>
<td>Vim screencasts.</td>
</tr>
<tr>
<td><a href="https://www.youtube.com/channel/UCXPHFM88IlFn68OmLwtPmZA" rel="nofollow">wincent's screencasts on YouTube</a></td>
<td>Vim screencasts.</td>
</tr>
<tr>
<td><a href="http://www.viemu.com/a-why-vi-vim.html" rel="nofollow">Why, oh WHY, do those #?@! nutheads use vi?</a></td>
<td>Common misconceptions explained.</td>
</tr>
<tr>
<td><a href="http://stackoverflow.com/a/1220118" rel="nofollow">Your problem with Vim is that you don't grok vi</a></td>
<td>Concise, informative and correct. A real gem.</td>
</tr></tbody></table>
<h2><a id="user-content-vim-distributions" class="anchor" aria-hidden="true" href="#vim-distributions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Vim distributions</h2>
<p>Vim distributions are bundles of custom settings and plugins for Vim.</p>
<p>More advanced users know how to configure their editor anyway, so distributions
are mostly targeted at beginners. If you think about that, it's quite
paradoxical though: Making it easier by adding even more things to learn about?</p>
<p>I know that many people don't want to spend hours and hours on customizing an
editor (and actually you never stop customizing your vimrc when you finally got
hooked), but eventually you only get efficient in Vim when you take the time to
learn it properly.</p>
<p>Repeat after me: "A programmer should know their tools."</p>
<p>Anyway, if you know what you're doing, you might draw some inspiration from
looking at a few distributions:</p>
<ul>
<li><a href="http://cream.sourceforge.net" rel="nofollow">cream</a></li>
<li><a href="https://github.com/carlhuda/janus.git">janus</a></li>
<li><a href="https://github.com/SpaceVim/SpaceVim">spacevim</a></li>
<li><a href="https://github.com/spf13/spf13-vim">spf13</a></li>
</ul>
<h2><a id="user-content-standard-plugins" class="anchor" aria-hidden="true" href="#standard-plugins"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Standard plugins</h2>
<p>Surprising to many people, Vim comes with a handful of plugins on its own that
all get loaded by default. Check <code>:scriptnames</code> after starting Vim to see all
sourced files.</p>
<p>Most of them will never get used, so disable them as you see fit. They will
still be shown as sourced, but only the first lines actually get read before Vim
bails out. No further code (mappings, commands, logic) will be processed.</p>
<table>
<thead>
<tr>
<th>Plugin</th>
<th>Disable it using..</th>
<th>Help</th>
</tr>
</thead>
<tbody>
<tr>
<td>2html</td>
<td><code>let g:loaded_2html_plugin = 1</code></td>
<td><code>:h 2html</code></td>
</tr>
<tr>
<td>getscript</td>
<td><code>let g:loaded_getscriptPlugin = 1</code></td>
<td><code>:h pi_getscript</code></td>
</tr>
<tr>
<td>gzip</td>
<td><code>let g:loaded_gzip = 1</code></td>
<td><code>:h pi_gzip</code></td>
</tr>
<tr>
<td>logipat</td>
<td><code>let g:loaded_logipat = 1</code></td>
<td><code>:h pi_logipat</code></td>
</tr>
<tr>
<td>matchparen</td>
<td><code>let g:loaded_matchparen = 1</code></td>
<td><code>:h pi_paren</code></td>
</tr>
<tr>
<td>netrw</td>
<td><code>let g:loaded_netrwPlugin = 1</code></td>
<td><code>:h pi_netrw</code></td>
</tr>
<tr>
<td>rrhelper</td>
<td><code>let g:loaded_rrhelper = 1</code></td>
<td><code>:e $VIMRUNTIME/plugin/rrhelper.vim</code></td>
</tr>
<tr>
<td>spellfile</td>
<td><code>let g:loaded_spellfile_plugin = 1</code></td>
<td><code>:h spellfile.vim</code></td>
</tr>
<tr>
<td>tar</td>
<td><code>let g:loaded_tarPlugin = 1</code></td>
<td><code>:h pi_tar</code></td>
</tr>
<tr>
<td>vimball</td>
<td><code>let g:loaded_vimballPlugin = 1</code></td>
<td><code>:h pi_vimball</code></td>
</tr>
<tr>
<td>zip</td>
<td><code>let g:loaded_zipPlugin = 1</code></td>
<td><code>:h pi_zip</code></td>
</tr></tbody></table>
<h2><a id="user-content-map-capslock-to-control" class="anchor" aria-hidden="true" href="#map-capslock-to-control"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Map CapsLock to Control</h2>
<p>CapsLock belongs to the most useless keys on your keyboard, but it's much easier
to reach than the Control key, since it lies on your <a href="https://raw.githubusercontent.com/mhinz/vim-galore/master/static/images/content-homerow.png" rel="nofollow">home
row</a>.
Mapping CapsLock to Control is a great way to prevent or at least reduce
<a href="https://de.wikipedia.org/wiki/Repetitive-Strain-Injury-Syndrom" rel="nofollow">RSI</a> if you
program a lot.</p>
<p>Attention: When you get used to it, you can't live without it anymore.</p>
<p><strong>macOS</strong>:</p>
<p><code>System Preferences -&gt; Keyboard -&gt; Keyboard Tab -&gt; Modifier Keys</code>. Change
"CapsLock" to "Control".</p>
<p><strong>Linux</strong>:</p>
<p>To change the keys in X, put this in your <code>~/.xmodmap</code>:</p>
<pre><code>remove Lock = Caps_Lock
keysym Caps_Lock = Control_L
add Control = Control_L
</code></pre>
<p>Afterwards source it via <code>$ xmodmap ~/.xmodmap</code>.</p>
<p>An alternative would be using <a href="https://github.com/oblitum/caps2esc">caps2esc</a> or
<a href="https://github.com/alols/xcape">xcape</a>.</p>
<p><strong>Windows</strong>:</p>
<p>See <a href="http://superuser.com/questions/764782/map-caps-lock-to-control-in-windows-8-1" rel="nofollow">superuser.com: Map Caps-Lock to Control in Windows
8.1</a>.</p>
<h2><a id="user-content-easter-eggs" class="anchor" aria-hidden="true" href="#easter-eggs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Easter eggs</h2>
<table>
<thead>
<tr>
<th>Command</th>
<th>Message</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:Ni!</code></td>
<td><code>Do you demand a shrubbery?</code></td>
</tr>
<tr>
<td><code>:h 'sm'</code></td>
<td><code>NOTE: Use of the short form is rated PG.</code></td>
</tr>
<tr>
<td><code>:h 42</code></td>
<td><code>What is the meaning of life, the universe and everything? Douglas Adams, the only person who knew what this question really was about is now dead, unfortunately. So now you might wonder what the meaning of death is...</code></td>
</tr>
<tr>
<td><code>:h UserGettingBored</code></td>
<td><code>When the user presses the same key 42 times. Just kidding! :-)</code></td>
</tr>
<tr>
<td><code>:h bar</code></td>
<td><code>Ceci n'est pas une pipe.</code></td>
</tr>
<tr>
<td><code>:h holy-grail</code></td>
<td><code>You found it, Arthur!</code></td>
</tr>
<tr>
<td><code>:h map-modes</code></td>
<td><code>:nunmap can also be used outside of a monastery.</code></td>
</tr>
<tr>
<td><code>:help!</code></td>
<td><code>E478: Don't panic!</code> (Glitch? When used in a help buffer (<code>buftype=help</code>) this works like <code>:h help.txt</code> instead.)</td>
</tr>
<tr>
<td><code>:smile</code></td>
<td>Try it out yourself. ;-) Added in 7.4.1005.</td>
</tr></tbody></table>
<h2><a id="user-content-why-hjkl-for-navigation" class="anchor" aria-hidden="true" href="#why-hjkl-for-navigation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Why hjkl for navigation?</h2>
<p>When <a href="https://en.wikipedia.org/wiki/Bill_Joy" rel="nofollow">Bill Joy</a> created
<a href="https://en.wikipedia.org/wiki/Vi" rel="nofollow">vi</a>, a predecessor of Vim, he did it on a
<a href="https://en.wikipedia.org/wiki/ADM-3A" rel="nofollow">ADM-3A</a> which had no extra cursor buttons
but used, you might already guessed it, hjkl instead.</p>
<p>Keyboard layout: <a href="https://raw.githubusercontent.com/mhinz/vim-galore/master/static/images/content-adm-3a-layout.jpg" rel="nofollow">click</a></p>
<p>This also shows why <code>~</code> is used to denote the home directory on Unix systems.</p>
<h1><a id="user-content-common-problems-1" class="anchor" aria-hidden="true" href="#common-problems-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Common problems</h1>
<h2><a id="user-content-editing-small-files-is-slow" class="anchor" aria-hidden="true" href="#editing-small-files-is-slow"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Editing small files is slow</h2>
<p>There are two things which can have a huge impact on performance:</p>
<ol>
<li>Complex <strong>regular expressions</strong>. Particular the Ruby syntax file caused
people to have slowdowns in the past. (Also see <a href="#debugging-syntax-files">Debugging syntax files</a>.)</li>
<li><strong>Screen redraws</strong>. Some features force all lines to redraw.</li>
</ol>
<table>
<thead>
<tr>
<th>Typical culprit</th>
<th>Why?</th>
<th>Solution?</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:set cursorline</code></td>
<td>Causes all lines to redraw.</td>
<td><code>:set nocursorline</code></td>
</tr>
<tr>
<td><code>:set cursorcolumn</code></td>
<td>Causes all lines to redraw.</td>
<td><code>:set nocursorcolumn</code></td>
</tr>
<tr>
<td><code>:set relativenumber</code></td>
<td>Causes all lines to redraw.</td>
<td><code>:set norelativenumber</code></td>
</tr>
<tr>
<td><code>:set foldmethod=syntax</code></td>
<td>If the syntax file is slow already, this makes it even worse.</td>
<td><code>:set foldmethod=manual</code>, <code>:set foldmethod=marker</code> or <a href="https://github.com/Konfekt/FastFold">FastFold</a></td>
</tr>
<tr>
<td><code>:set synmaxcol=3000</code></td>
<td>Due to internal representation, Vim has problems with long lines in general. Highlights columns till column 3000.</td>
<td><code>:set synmaxcol=200</code></td>
</tr>
<tr>
<td>matchparen.vim</td>
<td>Loaded by default. Uses regular expressions to find the accompanying parenthesis.</td>
<td>Disable plugin: <code>:h matchparen</code></td>
</tr></tbody></table>
<p><strong>NOTE</strong>: You only need to do this if you experience actual performance
drawbacks. In most cases using the things mentioned above is absolutely fine.</p>
<h2><a id="user-content-editing-huge-files-is-slow" class="anchor" aria-hidden="true" href="#editing-huge-files-is-slow"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Editing huge files is slow</h2>
<p>The biggest issue with big files is, that Vim reads the whole file at once. This
is done due to how buffers are represented internally.
(<a href="https://groups.google.com/forum/#!topic/vim_dev/oY3i8rqYGD4/discussion" rel="nofollow">Discussion on vim_dev@</a>)</p>
<p>If you only want to read, <code>tail hugefile | vim -</code> is a good workaround.</p>
<p>If you can live without syntax, settings and plugins for the moment:</p>
<pre><code>$ vim -u NONE -N
</code></pre>
<p>This should make navigation quite a lot faster, especially since no expensive
regular expressions for syntax highlighting are used. You should also tell Vim
not to use swapfiles and viminfo files to avoid long delays on writing:</p>
<pre><code>$ vim -n -u NONE -i NONE -N
</code></pre>
<p>Putting it in a nutshell, try to avoid using Vim when intending to write really
huge files. :\</p>
<h2><a id="user-content-bracketed-paste-or-why-do-i-have-to-set-paste-all-the-time" class="anchor" aria-hidden="true" href="#bracketed-paste-or-why-do-i-have-to-set-paste-all-the-time"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Bracketed paste (or why do I have to set 'paste' all the time?)</h2>
<p>Bracketed paste mode allows terminal emulators to distinguish between typed text
and pasted text.</p>
<p>Did you ever tried pasting code into Vim and afterwards everything seemed messed
up?</p>
<p>This only happens if you paste via <code>cmd+v</code>, <code>shift-insert</code>, <code>middle-click</code> etc.
because then you're just throwing text at the terminal emulator. Vim doesn't
know that you just pasted the text, it thinks you're an extremely fast typist.
Accordingly, it tries to indent the lines and fails.</p>
<p>Obviously this is not an issue, if you paste using Vim's registers, e.g. <code>"+p</code>,
because then Vim knows that you're actually pasting.</p>
<p>To workaround this, you have to <code>:set paste</code>, so it gets pasted as-is. See <code>:h 'paste'</code> and <code>:h 'pastetoggle'</code>.</p>
<p>If you're fed up with toggling <code>'paste'</code> all the time, have a look at this fine
plugin that does it for you:
<a href="https://github.com/ConradIrwin/vim-bracketed-paste">bracketed-paste</a>.</p>
<p>Additional read from the same author as the plugin:
<a href="http://cirw.in/blog/bracketed-paste" rel="nofollow">here</a>.</p>
<p><strong>Neovim</strong>: Neovim tries to make all of this much more seamless and sets
bracketed paste mode automatically if the terminal emulator supports it.</p>
<h2><a id="user-content-delays-when-using-escape-key-in-terminal" class="anchor" aria-hidden="true" href="#delays-when-using-escape-key-in-terminal"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Delays when using escape key in terminal</h2>
<p>If you live in the command-line, you probably use a so-called <em>terminal
emulator</em> like xterm, gnome-terminal, iTerm2, etc. (opposed to a real
<a href="https://en.wikipedia.org/wiki/Computer_terminal" rel="nofollow">terminal</a>).</p>
<p>Like their ancestors, terminal emulators use <a href="https://en.wikipedia.org/wiki/Escape_sequence" rel="nofollow">escape
sequences</a> (or <em>control
sequences</em>) to control things like moving the cursor, changing text colors, etc.
They're simply strings of ASCII characters starting with an escape character
(displayed in <a href="https://en.wikipedia.org/wiki/Caret_notation" rel="nofollow">caret notation</a> as
<code>^[</code>). When such a string arrives, the terminal emulator looks up the
accompanying action in the <a href="https://en.wikipedia.org/wiki/Terminfo" rel="nofollow">terminfo</a>
database.</p>
<p>To make the problem clearer, I'll explain mapping timeouts first. They always
happen when there's ambiguity between mappings:</p>
<div class="highlight highlight-source-viml"><pre>:<span class="pl-c1">nnoremap</span> ,<span class="pl-c1">a</span>  :echo <span class="pl-s"><span class="pl-pds">'</span>foo<span class="pl-pds">'</span></span><span class="pl-c1">&lt;cr&gt;</span>
:<span class="pl-c1">nnoremap</span> ,<span class="pl-c1">ab</span> :echo <span class="pl-s"><span class="pl-pds">'</span>bar<span class="pl-pds">'</span></span><span class="pl-c1">&lt;cr&gt;</span></pre></div>
<p>Both mappings work as expected, but when typing <code>,a</code>, there will be a delay of 1
second, because Vim waits whether the user keys in another <code>b</code> or not.</p>
<p>Escape sequences pose the same problem:</p>
<ul>
<li><code>&lt;esc&gt;</code> is used a lot for returning to normal mode or quitting an action.</li>
<li>Cursor keys are encoded using escape sequences.</li>
<li>Vim expects <kbd>Alt</kbd> (also called <em>Meta key</em>) to send a proper 8-bit
encoding with the high bit set, but many terminal emulators don't support it
(or don't enable it by default) and send an escape sequence instead.</li>
</ul>
<p>You can test the above like this: <code>vim -u NONE -N</code> and type <code>i&lt;c-v&gt;&lt;left&gt;</code> and
you'll see a sequence inserted that starts with <code>^[</code> which denotes the escape
character.</p>
<p>Putting it in a nutshell, Vim has a hard time distinguishing between a typed
<code>&lt;esc&gt;</code> character and a proper escape sequence.</p>
<p>By default, Vim uses <code>:set timeout timeoutlen=1000</code>, so it delays on ambiguity
of mappings <em>and</em> key codes by 1 second. This is a sane value for mappings, but
you can define the key code timeout on its own which is the most common
workaround for this entire issue:</p>
<div class="highlight highlight-source-viml"><pre><span class="pl-c1">set</span> <span class="pl-c1">timeout</span><span class="pl-c">           <span class="pl-c">"</span> for mappings</span>
<span class="pl-c1">set</span> <span class="pl-c1">timeoutlen</span><span class="pl-k">=</span><span class="pl-c1">1000</span><span class="pl-c">   <span class="pl-c">"</span> default value</span>
<span class="pl-c1">set</span> <span class="pl-c1">ttimeout</span><span class="pl-c">          <span class="pl-c">"</span> for key codes</span>
<span class="pl-c1">set</span> <span class="pl-c1">ttimeoutlen</span><span class="pl-k">=</span><span class="pl-c1">10</span><span class="pl-c">    <span class="pl-c">"</span> unnoticeable small value</span></pre></div>
<p>Under <code>:h ttimeout</code> you find a small table showing the relationship between
these options.</p>
<p>If you're using tmux between Vim and your terminal emulator, also put this in
your <code>~/.tmux.conf</code>:</p>
<div class="highlight highlight-source-shell"><pre><span class="pl-c1">set</span> -sg escape-time 0</pre></div>
<h2><a id="user-content-function-search-undo" class="anchor" aria-hidden="true" href="#function-search-undo"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Function search undo</h2>
<ul>
<li>A search pattern in a command (<code>/</code>, <code>:substitute</code>, ...) changes the "last used
search pattern". (It's saved in the <code>/</code> register; print it with <code>:echo @/</code>).</li>
<li>A simple text change can be redone with <code>.</code>. (It's saved in the <code>.</code> register;
print it with <code>:echo @.</code>).</li>
</ul>
<p>Both things are <em>not</em> the case, if you do them from a function, though! Thus you
can't easily highlight words from a function or redo the text changes made by
it.</p>
<p>Help: <code>:h function-search-undo</code></p>
<h1><a id="user-content-technical-quirks-1" class="anchor" aria-hidden="true" href="#technical-quirks-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Technical quirks</h1>
<h2><a id="user-content-newline-used-for-nul" class="anchor" aria-hidden="true" href="#newline-used-for-nul"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Newline used for NUL</h2>
<p>NUL characters (<code>\0</code>) in a file, are stored as newline (<code>\n</code>) in memory and
displayed in a buffer as <code>^@</code>.</p>
<p>See <code>man 7 ascii</code> and <code>:h NL-used-for-Nul</code> for more information.</p>
</article>
  </div>


  </div>
  <div class="modal-backdrop js-touch-events"></div>
</div>

    </div>
  </div>

  </div>

      
<div class="footer container-lg px-3" role="contentinfo">
  <div class="position-relative d-flex flex-justify-between pt-6 pb-2 mt-6 f6 text-gray border-top border-gray-light ">
    <ul class="list-style-none d-flex flex-wrap ">
      <li class="mr-3">&copy; 2018 <span title="0.26019s from unicorn-3751571531-g3zc6">GitHub</span>, Inc.</li>
        <li class="mr-3"><a data-ga-click="Footer, go to terms, text:terms" href="https://github.com/site/terms">Terms</a></li>
        <li class="mr-3"><a data-ga-click="Footer, go to privacy, text:privacy" href="https://github.com/site/privacy">Privacy</a></li>
        <li class="mr-3"><a href="https://help.github.com/articles/github-security/" data-ga-click="Footer, go to security, text:security">Security</a></li>
        <li class="mr-3"><a href="https://status.github.com/" data-ga-click="Footer, go to status, text:status">Status</a></li>
        <li><a data-ga-click="Footer, go to help, text:help" href="https://help.github.com">Help</a></li>
    </ul>

    <a aria-label="Homepage" title="GitHub" class="footer-octicon" href="https://github.com">
      <svg height="24" class="octicon octicon-mark-github" viewBox="0 0 16 16" version="1.1" width="24" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg>
</a>
   <ul class="list-style-none d-flex flex-wrap ">
        <li class="mr-3"><a data-ga-click="Footer, go to contact, text:contact" href="https://github.com/contact">Contact GitHub</a></li>
      <li class="mr-3"><a href="https://developer.github.com" data-ga-click="Footer, go to api, text:api">API</a></li>
      <li class="mr-3"><a href="https://training.github.com" data-ga-click="Footer, go to training, text:training">Training</a></li>
      <li class="mr-3"><a href="https://shop.github.com" data-ga-click="Footer, go to shop, text:shop">Shop</a></li>
        <li class="mr-3"><a href="https://blog.github.com" data-ga-click="Footer, go to blog, text:blog">Blog</a></li>
        <li><a data-ga-click="Footer, go to about, text:about" href="https://github.com/about">About</a></li>

    </ul>
  </div>
  <div class="d-flex flex-justify-center pb-6">
    <span class="f6 text-gray-light"></span>
  </div>
</div>



  <div id="ajax-error-message" class="ajax-error-message flash flash-error">
    <svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.865 1.52c-.18-.31-.51-.5-.87-.5s-.69.19-.87.5L.275 13.5c-.18.31-.18.69 0 1 .19.31.52.5.87.5h13.7c.36 0 .69-.19.86-.5.17-.31.18-.69.01-1L8.865 1.52zM8.995 13h-2v-2h2v2zm0-3h-2V6h2v4z"/></svg>
    <button type="button" class="flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
      <svg class="octicon octicon-x" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
    </button>
    You can't perform that action at this time.
  </div>


    <script crossorigin="anonymous" type="application/javascript" src="https://assets-cdn.github.com/assets/compat-413dd2a0695c3dfaf7de158468a91646.js"></script>
    <script crossorigin="anonymous" type="application/javascript" src="https://assets-cdn.github.com/assets/frameworks-d941de838fad400fb91238d23684a777.js"></script>
    
    <script crossorigin="anonymous" async="async" type="application/javascript" src="https://assets-cdn.github.com/assets/github-d19623a69cc756b5a2cbda89154a69e9.js"></script>
    
    
    
    
  <div class="js-stale-session-flash stale-session-flash flash flash-warn flash-banner d-none">
    <svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.865 1.52c-.18-.31-.51-.5-.87-.5s-.69.19-.87.5L.275 13.5c-.18.31-.18.69 0 1 .19.31.52.5.87.5h13.7c.36 0 .69-.19.86-.5.17-.31.18-.69.01-1L8.865 1.52zM8.995 13h-2v-2h2v2zm0-3h-2V6h2v4z"/></svg>
    <span class="signed-in-tab-flash">You signed in with another tab or window. <a href="">Reload</a> to refresh your session.</span>
    <span class="signed-out-tab-flash">You signed out in another tab or window. <a href="">Reload</a> to refresh your session.</span>
  </div>
  <div class="facebox" id="facebox" style="display:none;">
  <div class="facebox-popup">
    <div class="facebox-content" role="dialog" aria-labelledby="facebox-header" aria-describedby="facebox-description">
    </div>
    <button type="button" class="facebox-close js-facebox-close" aria-label="Close modal">
      <svg class="octicon octicon-x" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
    </button>
  </div>
</div>

  <div class="Popover js-hovercard-content position-absolute" style="display: none; outline: none;" tabindex="0">
  <div class="Popover-message Popover-message--bottom-left Popover-message--large Box box-shadow-large" style="width:360px;">
  </div>
</div>

<div id="hovercard-aria-description" class="sr-only">
  Press h to open a hovercard with more details.
</div>


  </body>
</html>

